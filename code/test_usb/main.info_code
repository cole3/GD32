
/home/osmc/work/gd32/code/test2/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 00 01 20 71 08 00 08 25 23 00 08 31 23 00 08     ... q...%#..1#..
 8000010:	a5 08 00 08 a5 08 00 08 a5 08 00 08 00 00 00 00     ................
	...
 800002c:	39 23 00 08 a5 08 00 08 00 00 00 00 45 23 00 08     9#..........E#..
 800003c:	51 23 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     Q#..............
 800004c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800005c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800006c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800007c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800008c:	a5 08 00 08 85 23 00 08 a5 08 00 08 a5 08 00 08     .....#..........
 800009c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 80000ac:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 80000bc:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 80000cc:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 80000dc:	a5 08 00 08 91 23 00 08 a5 08 00 08 d1 23 00 08     .....#.......#..
 80000ec:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 80000fc:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800010c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800011c:	a5 08 00 08 a5 08 00 08 a5 08 00 08 a5 08 00 08     ................
 800012c:	a5 08 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 80001dc:	5f f8 e0 f1                                         _...

080001e0 <delay>:
#define BLUE_LED_PIN    GPIO_PIN_4



static void delay(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
    unsigned int n = 10000000;
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <delay+0x20>)
 80001e8:	607b      	str	r3, [r7, #4]
    while (n--);
 80001ea:	bf00      	nop
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	1e5a      	subs	r2, r3, #1
 80001f0:	607a      	str	r2, [r7, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d1fa      	bne.n	80001ec <delay+0xc>
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	00989680 	.word	0x00989680

08000204 <gpio_init>:

void gpio_init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    GPIO_InitPara GPIO_InitStructure;

    RCC_APB2PeriphClock_Enable(RCC_APB2PERIPH_GPIOB | RCC_APB2PERIPH_GPIOC, ENABLE);
 800020a:	2101      	movs	r1, #1
 800020c:	2018      	movs	r0, #24
 800020e:	f001 fae7 	bl	80017e0 <RCC_APB2PeriphClock_Enable>
    RCC_APB2PeriphClock_Enable(RCC_APB2PERIPH_AF, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	2001      	movs	r0, #1
 8000216:	f001 fae3 	bl	80017e0 <RCC_APB2PeriphClock_Enable>
    GPIO_PinRemapConfig(GPIO_REMAP_SWJ_JTAGDISABLE, ENABLE);
 800021a:	2101      	movs	r1, #1
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <gpio_init+0x64>)
 800021e:	f000 feb5 	bl	8000f8c <GPIO_PinRemapConfig>

    // PB4 & JTAG PIN same
    GPIO_InitStructure.GPIO_Pin = RED_LED_PIN;
 8000222:	2380      	movs	r3, #128	; 0x80
 8000224:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 8000226:	2303      	movs	r3, #3
 8000228:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_OUT_PP;
 800022a:	2310      	movs	r3, #16
 800022c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(RED_LED_PORT, &GPIO_InitStructure);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4619      	mov	r1, r3
 8000232:	480e      	ldr	r0, [pc, #56]	; (800026c <gpio_init+0x68>)
 8000234:	f000 fce6 	bl	8000c04 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = BLUE_LED_PIN;
 8000238:	2310      	movs	r3, #16
 800023a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 800023c:	2303      	movs	r3, #3
 800023e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_OUT_PP;
 8000240:	2310      	movs	r3, #16
 8000242:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(BLUE_LED_PORT, &GPIO_InitStructure);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	4809      	ldr	r0, [pc, #36]	; (8000270 <gpio_init+0x6c>)
 800024a:	f000 fcdb 	bl	8000c04 <GPIO_Init>

    GPIO_SetBits(RED_LED_PORT, RED_LED_PIN);
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	4806      	ldr	r0, [pc, #24]	; (800026c <gpio_init+0x68>)
 8000252:	f000 fdf3 	bl	8000e3c <GPIO_SetBits>
    GPIO_SetBits(BLUE_LED_PORT, BLUE_LED_PIN);
 8000256:	2110      	movs	r1, #16
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <gpio_init+0x6c>)
 800025a:	f000 fdef 	bl	8000e3c <GPIO_SetBits>
}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	00300200 	.word	0x00300200
 800026c:	40011000 	.word	0x40011000
 8000270:	40010c00 	.word	0x40010c00

08000274 <led_trigger>:

void led_trigger(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    static int flag = 0;

    if (flag) {
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <led_trigger+0x38>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d004      	beq.n	800028a <led_trigger+0x16>
        GPIO_ResetBits(BLUE_LED_PORT, BLUE_LED_PIN);
 8000280:	2110      	movs	r1, #16
 8000282:	480b      	ldr	r0, [pc, #44]	; (80002b0 <led_trigger+0x3c>)
 8000284:	f000 fde8 	bl	8000e58 <GPIO_ResetBits>
 8000288:	e003      	b.n	8000292 <led_trigger+0x1e>
    } else {
        GPIO_SetBits(BLUE_LED_PORT, BLUE_LED_PIN);
 800028a:	2110      	movs	r1, #16
 800028c:	4808      	ldr	r0, [pc, #32]	; (80002b0 <led_trigger+0x3c>)
 800028e:	f000 fdd5 	bl	8000e3c <GPIO_SetBits>
    }

    flag = !flag;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <led_trigger+0x38>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	bf0c      	ite	eq
 800029a:	2301      	moveq	r3, #1
 800029c:	2300      	movne	r3, #0
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b02      	ldr	r3, [pc, #8]	; (80002ac <led_trigger+0x38>)
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000130 	.word	0x20000130
 80002b0:	40010c00 	.word	0x40010c00

080002b4 <main>:

extern void USB_Mouse_Init(void);

int main()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
    char c = 'A';
 80002ba:	2341      	movs	r3, #65	; 0x41
 80002bc:	71fb      	strb	r3, [r7, #7]

    gpio_init();
 80002be:	f7ff ffa1 	bl	8000204 <gpio_init>

    print("start\n");
 80002c2:	480d      	ldr	r0, [pc, #52]	; (80002f8 <main+0x44>)
 80002c4:	f000 f968 	bl	8000598 <print>
    USB_Mouse_Init();
 80002c8:	f001 fff6 	bl	80022b8 <USB_Mouse_Init>
    GPIO_ResetBits(BLUE_LED_PORT, BLUE_LED_PIN);
 80002cc:	2110      	movs	r1, #16
 80002ce:	480b      	ldr	r0, [pc, #44]	; (80002fc <main+0x48>)
 80002d0:	f000 fdc2 	bl	8000e58 <GPIO_ResetBits>
    //print("end\n");

    while(1) {
        if (c > 'Z') {
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b5a      	cmp	r3, #90	; 0x5a
 80002d8:	d901      	bls.n	80002de <main+0x2a>
            c = 'A';
 80002da:	2341      	movs	r3, #65	; 0x41
 80002dc:	71fb      	strb	r3, [r7, #7]
        }

        print("Send: %c\n", c++);
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	71fa      	strb	r2, [r7, #7]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <main+0x4c>)
 80002e8:	f000 f956 	bl	8000598 <print>

        //USART_SendData(USART1, c++);
        //while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
        //GPIO_WriteBit(RED_LED_PORT, RED_LED_PIN, Bit_SET);
        //GPIO_WriteBit(BLUE_LED_PORT, BLUE_LED_PIN, Bit_RESET);
        led_trigger();
 80002ec:	f7ff ffc2 	bl	8000274 <led_trigger>
        delay();
 80002f0:	f7ff ff76 	bl	80001e0 <delay>
        //GPIO_WriteBit(RED_LED_PORT, RED_LED_PIN, Bit_RESET);
        //GPIO_WriteBit(BLUE_LED_PORT, BLUE_LED_PIN, Bit_SET);
        //delay();
    }
 80002f4:	e7ee      	b.n	80002d4 <main+0x20>
 80002f6:	bf00      	nop
 80002f8:	080073f0 	.word	0x080073f0
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	080073f8 	.word	0x080073f8

08000304 <usart1_init>:


static char usart1_enable;

static void usart1_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
    GPIO_InitPara GPIO_InitStructure;
    USART_InitPara USART_InitStructure;

    RCC_APB2PeriphClock_Enable( RCC_APB2PERIPH_GPIOA , ENABLE );
 800030a:	2101      	movs	r1, #1
 800030c:	2004      	movs	r0, #4
 800030e:	f001 fa67 	bl	80017e0 <RCC_APB2PeriphClock_Enable>
    RCC_APB2PeriphClock_Enable( RCC_APB2PERIPH_USART1 , ENABLE );
 8000312:	2101      	movs	r1, #1
 8000314:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000318:	f001 fa62 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_9 ;
 800031c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000320:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_AF_PP;
 8000322:	2318      	movs	r3, #24
 8000324:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 8000326:	2303      	movs	r3, #3
 8000328:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA , &GPIO_InitStructure);
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	4619      	mov	r1, r3
 8000330:	4815      	ldr	r0, [pc, #84]	; (8000388 <usart1_init+0x84>)
 8000332:	f000 fc67 	bl	8000c04 <GPIO_Init>
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_10;
 8000336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033a:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IN_FLOATING;;
 800033c:	2304      	movs	r3, #4
 800033e:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOA , &GPIO_InitStructure);
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	4619      	mov	r1, r3
 8000346:	4810      	ldr	r0, [pc, #64]	; (8000388 <usart1_init+0x84>)
 8000348:	f000 fc5c 	bl	8000c04 <GPIO_Init>

    USART_DeInit( USART1 );
 800034c:	480f      	ldr	r0, [pc, #60]	; (800038c <usart1_init+0x88>)
 800034e:	f001 fbbb 	bl	8001ac8 <USART_DeInit>
    USART_InitStructure.USART_BRR = 115200;
 8000352:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000356:	607b      	str	r3, [r7, #4]
    USART_InitStructure.USART_WL = USART_WL_8B;
 8000358:	2300      	movs	r3, #0
 800035a:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_STBits = USART_STBITS_1;
 800035c:	2300      	movs	r3, #0
 800035e:	817b      	strh	r3, [r7, #10]
    USART_InitStructure.USART_Parity = USART_PARITY_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_HardwareFlowControl = USART_HARDWAREFLOWCONTROL_NONE;
 8000364:	2300      	movs	r3, #0
 8000366:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_RxorTx = USART_RXORTX_RX | USART_RXORTX_TX;
 8000368:	230c      	movs	r3, #12
 800036a:	81fb      	strh	r3, [r7, #14]
    USART_Init(USART1, &USART_InitStructure);
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <usart1_init+0x88>)
 8000372:	f001 fc05 	bl	8001b80 <USART_Init>
    USART_Enable(USART1, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4804      	ldr	r0, [pc, #16]	; (800038c <usart1_init+0x88>)
 800037a:	f001 fce1 	bl	8001d40 <USART_Enable>
}
 800037e:	bf00      	nop
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010800 	.word	0x40010800
 800038c:	40013800 	.word	0x40013800

08000390 <printch>:

static void printch(char ch)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
    USART_DataSend(USART1, ch);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	b29b      	uxth	r3, r3
 800039e:	4619      	mov	r1, r3
 80003a0:	4807      	ldr	r0, [pc, #28]	; (80003c0 <printch+0x30>)
 80003a2:	f001 fd09 	bl	8001db8 <USART_DataSend>
    while(USART_GetBitState(USART1, USART_FLAG_TC) == RESET);
 80003a6:	bf00      	nop
 80003a8:	2140      	movs	r1, #64	; 0x40
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <printch+0x30>)
 80003ac:	f001 fe9a 	bl	80020e4 <USART_GetBitState>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f8      	beq.n	80003a8 <printch+0x18>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40013800 	.word	0x40013800

080003c4 <printdec>:

static void printdec(int dec)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    if(dec==0) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d01c      	beq.n	800040c <printdec+0x48>
        return;
    }
    printdec(dec/10);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a0f      	ldr	r2, [pc, #60]	; (8000414 <printdec+0x50>)
 80003d6:	fb82 1203 	smull	r1, r2, r2, r3
 80003da:	1092      	asrs	r2, r2, #2
 80003dc:	17db      	asrs	r3, r3, #31
 80003de:	1ad3      	subs	r3, r2, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ffef 	bl	80003c4 <printdec>
    printch((char)(dec%10 + '0'));
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <printdec+0x50>)
 80003ea:	fb83 1302 	smull	r1, r3, r3, r2
 80003ee:	1099      	asrs	r1, r3, #2
 80003f0:	17d3      	asrs	r3, r2, #31
 80003f2:	1ac9      	subs	r1, r1, r3
 80003f4:	460b      	mov	r3, r1
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	440b      	add	r3, r1
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	1ad1      	subs	r1, r2, r3
 80003fe:	b2cb      	uxtb	r3, r1
 8000400:	3330      	adds	r3, #48	; 0x30
 8000402:	b2db      	uxtb	r3, r3
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ffc3 	bl	8000390 <printch>
 800040a:	e000      	b.n	800040e <printdec+0x4a>
}

static void printdec(int dec)
{
    if(dec==0) {
        return;
 800040c:	bf00      	nop
    }
    printdec(dec/10);
    printch((char)(dec%10 + '0'));
}
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	66666667 	.word	0x66666667

08000418 <printflt>:

static void printflt(double flt)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	e9c7 0100 	strd	r0, r1, [r7]
    int icnt = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
    int tmpint = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]

    tmpint = (int)flt;
 800042a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800042e:	f006 ffb7 	bl	80073a0 <__aeabi_d2iz>
 8000432:	4603      	mov	r3, r0
 8000434:	60bb      	str	r3, [r7, #8]
    printdec(tmpint);
 8000436:	68b8      	ldr	r0, [r7, #8]
 8000438:	f7ff ffc4 	bl	80003c4 <printdec>
    printch('.');
 800043c:	202e      	movs	r0, #46	; 0x2e
 800043e:	f7ff ffa7 	bl	8000390 <printch>
    flt = flt - tmpint;
 8000442:	68b8      	ldr	r0, [r7, #8]
 8000444:	f006 fd34 	bl	8006eb0 <__aeabi_i2d>
 8000448:	4603      	mov	r3, r0
 800044a:	460c      	mov	r4, r1
 800044c:	461a      	mov	r2, r3
 800044e:	4623      	mov	r3, r4
 8000450:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000454:	f006 fbde 	bl	8006c14 <__aeabi_dsub>
 8000458:	4603      	mov	r3, r0
 800045a:	460c      	mov	r4, r1
 800045c:	e9c7 3400 	strd	r3, r4, [r7]
    tmpint = (int)(flt * 1000000);
 8000460:	a30b      	add	r3, pc, #44	; (adr r3, 8000490 <printflt+0x78>)
 8000462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000466:	e9d7 0100 	ldrd	r0, r1, [r7]
 800046a:	f006 fd87 	bl	8006f7c <__aeabi_dmul>
 800046e:	4603      	mov	r3, r0
 8000470:	460c      	mov	r4, r1
 8000472:	4618      	mov	r0, r3
 8000474:	4621      	mov	r1, r4
 8000476:	f006 ff93 	bl	80073a0 <__aeabi_d2iz>
 800047a:	4603      	mov	r3, r0
 800047c:	60bb      	str	r3, [r7, #8]
    printdec(tmpint);
 800047e:	68b8      	ldr	r0, [r7, #8]
 8000480:	f7ff ffa0 	bl	80003c4 <printdec>
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bd90      	pop	{r4, r7, pc}
 800048c:	f3af 8000 	nop.w
 8000490:	00000000 	.word	0x00000000
 8000494:	412e8480 	.word	0x412e8480

08000498 <printstr>:

static void printstr(char* str)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
    while(*str) {
 80004a0:	e006      	b.n	80004b0 <printstr+0x18>
        printch(*str++);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff70 	bl	8000390 <printch>
    printdec(tmpint);
}

static void printstr(char* str)
{
    while(*str) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1f4      	bne.n	80004a2 <printstr+0xa>
        printch(*str++);
    }
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <printbin>:

static void printbin(int bin)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    if(bin == 0) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d103      	bne.n	80004d6 <printbin+0x16>
        printstr("0b");
 80004ce:	480e      	ldr	r0, [pc, #56]	; (8000508 <printbin+0x48>)
 80004d0:	f7ff ffe2 	bl	8000498 <printstr>
        return;
 80004d4:	e015      	b.n	8000502 <printbin+0x42>
    }
    printbin(bin/2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	0fda      	lsrs	r2, r3, #31
 80004da:	4413      	add	r3, r2
 80004dc:	105b      	asrs	r3, r3, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffee 	bl	80004c0 <printbin>
    printch( (char)(bin%2 + '0'));
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <printbin+0x4c>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da03      	bge.n	80004f6 <printbin+0x36>
 80004ee:	3b01      	subs	r3, #1
 80004f0:	f063 0301 	orn	r3, r3, #1
 80004f4:	3301      	adds	r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	3330      	adds	r3, #48	; 0x30
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff ff47 	bl	8000390 <printch>
}
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08007404 	.word	0x08007404
 800050c:	80000001 	.word	0x80000001

08000510 <printhex>:

static void printhex(int hex)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    if(hex==0) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d103      	bne.n	8000526 <printhex+0x16>
        printstr("0x");
 800051e:	481c      	ldr	r0, [pc, #112]	; (8000590 <printhex+0x80>)
 8000520:	f7ff ffba 	bl	8000498 <printstr>
        return;
 8000524:	e031      	b.n	800058a <printhex+0x7a>
    }
    printhex(hex/16);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <printhex+0x1e>
 800052c:	330f      	adds	r3, #15
 800052e:	111b      	asrs	r3, r3, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ffed 	bl	8000510 <printhex>
    if(hex%16 < 10) {
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <printhex+0x84>)
 800053a:	4013      	ands	r3, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	da03      	bge.n	8000548 <printhex+0x38>
 8000540:	3b01      	subs	r3, #1
 8000542:	f063 030f 	orn	r3, r3, #15
 8000546:	3301      	adds	r3, #1
 8000548:	2b09      	cmp	r3, #9
 800054a:	dc0f      	bgt.n	800056c <printhex+0x5c>
        printch((char)(hex%16 + '0'));
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <printhex+0x84>)
 8000550:	4013      	ands	r3, r2
 8000552:	2b00      	cmp	r3, #0
 8000554:	da03      	bge.n	800055e <printhex+0x4e>
 8000556:	3b01      	subs	r3, #1
 8000558:	f063 030f 	orn	r3, r3, #15
 800055c:	3301      	adds	r3, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	3330      	adds	r3, #48	; 0x30
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff13 	bl	8000390 <printch>
 800056a:	e00e      	b.n	800058a <printhex+0x7a>
    } else {
        printch((char)(hex%16 - 10 + 'a' ));
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <printhex+0x84>)
 8000570:	4013      	ands	r3, r2
 8000572:	2b00      	cmp	r3, #0
 8000574:	da03      	bge.n	800057e <printhex+0x6e>
 8000576:	3b01      	subs	r3, #1
 8000578:	f063 030f 	orn	r3, r3, #15
 800057c:	3301      	adds	r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	3357      	adds	r3, #87	; 0x57
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff03 	bl	8000390 <printch>
    }
}
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	08007408 	.word	0x08007408
 8000594:	8000000f 	.word	0x8000000f

08000598 <print>:

void print(char* fmt, ...)
{
 8000598:	b40f      	push	{r0, r1, r2, r3}
 800059a:	b590      	push	{r4, r7, lr}
 800059c:	b089      	sub	sp, #36	; 0x24
 800059e:	af00      	add	r7, sp, #0
    double vargflt = 0;
 80005a0:	f04f 0300 	mov.w	r3, #0
 80005a4:	f04f 0400 	mov.w	r4, #0
 80005a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    int  vargint = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
    char *vargpch;
    char vargch = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	72fb      	strb	r3, [r7, #11]
    char *pfmt;
    va_list vp;

    if (!usart1_enable) {
 80005b4:	4b93      	ldr	r3, [pc, #588]	; (8000804 <print+0x26c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d104      	bne.n	80005c6 <print+0x2e>
        usart1_enable = 1; 
 80005bc:	4b91      	ldr	r3, [pc, #580]	; (8000804 <print+0x26c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
        usart1_init();
 80005c2:	f7ff fe9f 	bl	8000304 <usart1_init>
    }

    va_start(vp, fmt);
 80005c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005ca:	603b      	str	r3, [r7, #0]
    pfmt = fmt;
 80005cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ce:	61fb      	str	r3, [r7, #28]

    while(*pfmt) {
 80005d0:	e10c      	b.n	80007ec <print+0x254>
        if(*pfmt == '%') {
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b25      	cmp	r3, #37	; 0x25
 80005d8:	f040 80fa 	bne.w	80007d0 <print+0x238>
            switch(*(++pfmt)) {
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	3301      	adds	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	3b25      	subs	r3, #37	; 0x25
 80005e8:	2b53      	cmp	r3, #83	; 0x53
 80005ea:	f200 80ec 	bhi.w	80007c6 <print+0x22e>
 80005ee:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <print+0x5c>)
 80005f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f4:	080007bf 	.word	0x080007bf
 80005f8:	080007c7 	.word	0x080007c7
 80005fc:	080007c7 	.word	0x080007c7
 8000600:	080007c7 	.word	0x080007c7
 8000604:	080007c7 	.word	0x080007c7
 8000608:	080007c7 	.word	0x080007c7
 800060c:	080007c7 	.word	0x080007c7
 8000610:	080007c7 	.word	0x080007c7
 8000614:	080007c7 	.word	0x080007c7
 8000618:	080007c7 	.word	0x080007c7
 800061c:	080007c7 	.word	0x080007c7
 8000620:	080007c7 	.word	0x080007c7
 8000624:	080007c7 	.word	0x080007c7
 8000628:	080007c7 	.word	0x080007c7
 800062c:	080007c7 	.word	0x080007c7
 8000630:	080007c7 	.word	0x080007c7
 8000634:	080007c7 	.word	0x080007c7
 8000638:	080007c7 	.word	0x080007c7
 800063c:	080007c7 	.word	0x080007c7
 8000640:	080007c7 	.word	0x080007c7
 8000644:	080007c7 	.word	0x080007c7
 8000648:	080007c7 	.word	0x080007c7
 800064c:	080007c7 	.word	0x080007c7
 8000650:	080007c7 	.word	0x080007c7
 8000654:	080007c7 	.word	0x080007c7
 8000658:	080007c7 	.word	0x080007c7
 800065c:	080007c7 	.word	0x080007c7
 8000660:	080007c7 	.word	0x080007c7
 8000664:	080007c7 	.word	0x080007c7
 8000668:	0800079b 	.word	0x0800079b
 800066c:	080007c7 	.word	0x080007c7
 8000670:	080007c7 	.word	0x080007c7
 8000674:	080007c7 	.word	0x080007c7
 8000678:	080007c7 	.word	0x080007c7
 800067c:	080007c7 	.word	0x080007c7
 8000680:	080007c7 	.word	0x080007c7
 8000684:	080007c7 	.word	0x080007c7
 8000688:	080007c7 	.word	0x080007c7
 800068c:	080007c7 	.word	0x080007c7
 8000690:	080007c7 	.word	0x080007c7
 8000694:	080007c7 	.word	0x080007c7
 8000698:	080007c7 	.word	0x080007c7
 800069c:	080007c7 	.word	0x080007c7
 80006a0:	080007c7 	.word	0x080007c7
 80006a4:	080007c7 	.word	0x080007c7
 80006a8:	080007c7 	.word	0x080007c7
 80006ac:	080007c7 	.word	0x080007c7
 80006b0:	080007c7 	.word	0x080007c7
 80006b4:	080007c7 	.word	0x080007c7
 80006b8:	080007c7 	.word	0x080007c7
 80006bc:	080007c7 	.word	0x080007c7
 80006c0:	080007ad 	.word	0x080007ad
 80006c4:	080007c7 	.word	0x080007c7
 80006c8:	080007c7 	.word	0x080007c7
 80006cc:	080007c7 	.word	0x080007c7
 80006d0:	080007c7 	.word	0x080007c7
 80006d4:	080007c7 	.word	0x080007c7
 80006d8:	080007c7 	.word	0x080007c7
 80006dc:	080007c7 	.word	0x080007c7
 80006e0:	080007c7 	.word	0x080007c7
 80006e4:	080007c7 	.word	0x080007c7
 80006e8:	0800079b 	.word	0x0800079b
 80006ec:	08000745 	.word	0x08000745
 80006f0:	08000759 	.word	0x08000759
 80006f4:	080007c7 	.word	0x080007c7
 80006f8:	0800076b 	.word	0x0800076b
 80006fc:	080007c7 	.word	0x080007c7
 8000700:	080007c7 	.word	0x080007c7
 8000704:	08000759 	.word	0x08000759
 8000708:	080007c7 	.word	0x080007c7
 800070c:	080007c7 	.word	0x080007c7
 8000710:	080007c7 	.word	0x080007c7
 8000714:	080007c7 	.word	0x080007c7
 8000718:	080007c7 	.word	0x080007c7
 800071c:	080007c7 	.word	0x080007c7
 8000720:	080007c7 	.word	0x080007c7
 8000724:	080007c7 	.word	0x080007c7
 8000728:	080007c7 	.word	0x080007c7
 800072c:	08000789 	.word	0x08000789
 8000730:	080007c7 	.word	0x080007c7
 8000734:	080007c7 	.word	0x080007c7
 8000738:	080007c7 	.word	0x080007c7
 800073c:	080007c7 	.word	0x080007c7
 8000740:	080007ad 	.word	0x080007ad
            case 'c':
                vargch = va_arg(vp, int);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	1d1a      	adds	r2, r3, #4
 8000748:	603a      	str	r2, [r7, #0]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	72fb      	strb	r3, [r7, #11]
                printch(vargch);
 800074e:	7afb      	ldrb	r3, [r7, #11]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fe1d 	bl	8000390 <printch>
                break;
 8000756:	e037      	b.n	80007c8 <print+0x230>
            case 'd':
            case 'i':
                vargint = va_arg(vp, int);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	1d1a      	adds	r2, r3, #4
 800075c:	603a      	str	r2, [r7, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	60fb      	str	r3, [r7, #12]
                printdec(vargint);
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff fe2e 	bl	80003c4 <printdec>
                break;
 8000768:	e02e      	b.n	80007c8 <print+0x230>
            case 'f':
                vargflt = va_arg(vp, double);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3307      	adds	r3, #7
 800076e:	f023 0307 	bic.w	r3, r3, #7
 8000772:	f103 0208 	add.w	r2, r3, #8
 8000776:	603a      	str	r2, [r7, #0]
 8000778:	cb18      	ldmia	r3, {r3, r4}
 800077a:	e9c7 3404 	strd	r3, r4, [r7, #16]
                printflt(vargflt);
 800077e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000782:	f7ff fe49 	bl	8000418 <printflt>
                break;
 8000786:	e01f      	b.n	80007c8 <print+0x230>
            case 's':
                vargpch = va_arg(vp, char*);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	1d1a      	adds	r2, r3, #4
 800078c:	603a      	str	r2, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	607b      	str	r3, [r7, #4]
                printstr(vargpch);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fe80 	bl	8000498 <printstr>
                break;
 8000798:	e016      	b.n	80007c8 <print+0x230>
            case 'b':
            case 'B':
                vargint = va_arg(vp, int);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	1d1a      	adds	r2, r3, #4
 800079e:	603a      	str	r2, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	60fb      	str	r3, [r7, #12]
                printbin(vargint);
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	f7ff fe8b 	bl	80004c0 <printbin>
                break;
 80007aa:	e00d      	b.n	80007c8 <print+0x230>
            case 'x':
            case 'X':
                vargint = va_arg(vp, int);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	1d1a      	adds	r2, r3, #4
 80007b0:	603a      	str	r2, [r7, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
                printhex(vargint);
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f7ff feaa 	bl	8000510 <printhex>
                break;
 80007bc:	e004      	b.n	80007c8 <print+0x230>
            case '%':
                printch('%');
 80007be:	2025      	movs	r0, #37	; 0x25
 80007c0:	f7ff fde6 	bl	8000390 <printch>
                break;
 80007c4:	e000      	b.n	80007c8 <print+0x230>
            default:
                break;
 80007c6:	bf00      	nop
            }
            pfmt++;
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	3301      	adds	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]
 80007ce:	e00d      	b.n	80007ec <print+0x254>
        } else {
            if (*pfmt == '\n') {
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	d102      	bne.n	80007de <print+0x246>
                printch('\r');
 80007d8:	200d      	movs	r0, #13
 80007da:	f7ff fdd9 	bl	8000390 <printch>
            }
            printch(*pfmt++);
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	61fa      	str	r2, [r7, #28]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fdd2 	bl	8000390 <printch>
    }

    va_start(vp, fmt);
    pfmt = fmt;

    while(*pfmt) {
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f47f aeee 	bne.w	80005d2 <print+0x3a>
            }
            printch(*pfmt++);
        }
    }
    va_end(vp);
}
 80007f6:	bf00      	nop
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	20000134 	.word	0x20000134

08000808 <__Init_Data>:
    0, 0, 0, 0, 0,
    0, 0, 0,
    (intfunc)0xF1E0F85F /* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};

void __Init_Data(void) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
    unsigned long *src, *dst;
    /* copy the data segment into ram */
    src = &_sidata;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <__Init_Data+0x54>)
 8000810:	607b      	str	r3, [r7, #4]
    dst = &_sdata;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <__Init_Data+0x58>)
 8000814:	603b      	str	r3, [r7, #0]
    if (src != dst)
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	d00c      	beq.n	8000838 <__Init_Data+0x30>
        while(dst < &_edata)
 800081e:	e007      	b.n	8000830 <__Init_Data+0x28>
            *(dst++) = *(src++);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	1d1a      	adds	r2, r3, #4
 8000824:	603a      	str	r2, [r7, #0]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	1d11      	adds	r1, r2, #4
 800082a:	6079      	str	r1, [r7, #4]
 800082c:	6812      	ldr	r2, [r2, #0]
 800082e:	601a      	str	r2, [r3, #0]
    unsigned long *src, *dst;
    /* copy the data segment into ram */
    src = &_sidata;
    dst = &_sdata;
    if (src != dst)
        while(dst < &_edata)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <__Init_Data+0x5c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d3f3      	bcc.n	8000820 <__Init_Data+0x18>
            *(dst++) = *(src++);
    /* zero the bss segment */
    dst = &_sbss;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <__Init_Data+0x60>)
 800083a:	603b      	str	r3, [r7, #0]
    while(dst < &_ebss)
 800083c:	e004      	b.n	8000848 <__Init_Data+0x40>
        *(dst++) = 0;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	1d1a      	adds	r2, r3, #4
 8000842:	603a      	str	r2, [r7, #0]
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
    if (src != dst)
        while(dst < &_edata)
            *(dst++) = *(src++);
    /* zero the bss segment */
    dst = &_sbss;
    while(dst < &_ebss)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <__Init_Data+0x64>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d3f6      	bcc.n	800083e <__Init_Data+0x36>
        *(dst++) = 0;
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	08007560 	.word	0x08007560
 8000860:	20000000 	.word	0x20000000
 8000864:	20000130 	.word	0x20000130
 8000868:	20000130 	.word	0x20000130
 800086c:	20000210 	.word	0x20000210

08000870 <Reset_Handler>:

void Reset_Handler(void) {
 8000870:	4668      	mov	r0, sp
 8000872:	f020 0107 	bic.w	r1, r0, #7
 8000876:	468d      	mov	sp, r1
 8000878:	b589      	push	{r0, r3, r7, lr}
 800087a:	af00      	add	r7, sp, #0
    __Init_Data(); /* Initialize memory, data and bss */
 800087c:	f7ff ffc4 	bl	8000808 <__Init_Data>
    extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
    SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <Reset_Handler+0x2c>)
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <Reset_Handler+0x30>)
 8000884:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 8000888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800088c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000890:	6093      	str	r3, [r2, #8]
    SystemInit(); /* configure the clock */
 8000892:	f000 f80f 	bl	80008b4 <SystemInit>
    main(); /* start execution of the program */
 8000896:	f7ff fd0d 	bl	80002b4 <main>
    while(1) {}
 800089a:	e7fe      	b.n	800089a <Reset_Handler+0x2a>
 800089c:	e000ed00 	.word	0xe000ed00
 80008a0:	00000000 	.word	0x00000000

080008a4 <Default_Handler>:
#pragma weak DMA2_Channel2_IRQHandler = Default_Handler
#pragma weak DMA2_Channel3_IRQHandler = Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler = Default_Handler

void Default_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    print("Default Hanler\n");
 80008a8:	4801      	ldr	r0, [pc, #4]	; (80008b0 <Default_Handler+0xc>)
 80008aa:	f7ff fe75 	bl	8000598 <print>
    while (1) {}
 80008ae:	e7fe      	b.n	80008ae <Default_Handler+0xa>
 80008b0:	08007410 	.word	0x08007410

080008b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit (void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    /* Set RCC GCCR_HSIEN mask */
    RCC->GCCR |= SYS_GCCR_HSIEN_SET;
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <SystemInit+0x58>)
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <SystemInit+0x58>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6013      	str	r3, [r2, #0]
    
    /* Reset SCS[1:0], AHBPS[3:0], APB1PS[2:0],APB2PS[2:0], ADCPS[2:0],CKOTUSEL[2:0] bits */
#ifdef GD32F10X_CL
    RCC->GCFGR &= SYS_GCFGR_RESET_CL;
#else
    RCC->GCFGR &= SYS_GCFGR_RESET;
 80008c4:	4911      	ldr	r1, [pc, #68]	; (800090c <SystemInit+0x58>)
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <SystemInit+0x58>)
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <SystemInit+0x5c>)
 80008cc:	4013      	ands	r3, r2
 80008ce:	604b      	str	r3, [r1, #4]
#endif /* GD32F10X_CL */   
  
    /* Reset HSEEN, CKMEN and PLLEN bits */
    RCC->GCCR &= SYS_GCCR_HSEEN_CKMEN_PLLEN_RESET;
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <SystemInit+0x58>)
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <SystemInit+0x58>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008de:	6013      	str	r3, [r2, #0]

    /* Reset HSEBPS bit */
    RCC->GCCR &= SYS_GCCR_HSEBPS_RESET;
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SystemInit+0x58>)
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <SystemInit+0x58>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ea:	6013      	str	r3, [r2, #0]

    /* Reset PLLSEL, PLLPREDV and PLLMF[4:0] USBPS/OTGPS bits */
#ifdef GD32F10X_CL
    RCC->GCFGR &= SYS_GCFGR_PLLSEL_PLLPREDV_PLLMF_USBPS_RESET_CL;
#else
    RCC->GCFGR &= SYS_GCFGR_PLLSEL_PLLPREDV_PLLMF_USBPS_RESET;
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <SystemInit+0x58>)
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <SystemInit+0x58>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f023 630f 	bic.w	r3, r3, #149946368	; 0x8f00000
 80008f6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80008fa:	6053      	str	r3, [r2, #4]

    /* Disable all interrupts and clear flag bits */
    RCC->GCIR = SYS_GCIR_INT_FLAG_RESET_CL;
#else
    /* Disable all interrupts and clear flag bits */
    RCC->GCIR = SYS_GCIR_INT_FLAG_RESET;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <SystemInit+0x58>)
 80008fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000902:	609a      	str	r2, [r3, #8]
#endif /* GD32F10X_CL */   

  /* Configure the System clock frequency, AHB, APB2 and APB1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000904:	f000 f88c 	bl	8000a20 <SetSysClock>

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	e8ff0000 	.word	0xe8ff0000

08000914 <SystemCoreClockUpdate>:
  *         Otherwise, any configuration based on this variable will be wrong.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
    uint32_t temp = 0, pllmf = 0, pllmf4=0,pllselect = 0, presc = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
#ifdef  GD32F10X_CL
    uint32_t prediv1select = 0, prediv1factor = 0, prediv2factor = 0, pll2mf = 0;
#endif /* GD32F10X_CL */
    
    /* Get CK_SYS source -------------------------------------------------------*/
    temp = RCC->GCFGR & RCC_GCFGR_SCSS;
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 030c 	and.w	r3, r3, #12
 8000936:	617b      	str	r3, [r7, #20]
  
    switch (temp)
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b04      	cmp	r3, #4
 800093c:	d007      	beq.n	800094e <SystemCoreClockUpdate+0x3a>
 800093e:	2b08      	cmp	r3, #8
 8000940:	d009      	beq.n	8000956 <SystemCoreClockUpdate+0x42>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d140      	bne.n	80009c8 <SystemCoreClockUpdate+0xb4>
    {
        case 0x00:  /* HSI used as CK_SYS */
        SystemCoreClock = HSI_VALUE;
 8000946:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 8000948:	4a30      	ldr	r2, [pc, #192]	; (8000a0c <SystemCoreClockUpdate+0xf8>)
 800094a:	601a      	str	r2, [r3, #0]
        break;
 800094c:	e040      	b.n	80009d0 <SystemCoreClockUpdate+0xbc>
        case 0x04:  /* HSE used as CK_SYS */
        SystemCoreClock = HSE_VALUE;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 8000950:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <SystemCoreClockUpdate+0xfc>)
 8000952:	601a      	str	r2, [r3, #0]
        break;
 8000954:	e03c      	b.n	80009d0 <SystemCoreClockUpdate+0xbc>
            }
        }
    #else
        /* Get PLL clock source and multiplication factor ----------------------*/
        /* Get PLLMF[3:0] */
        pllmf = RCC->GCFGR & SYS_RCC_GCFGR_PLLMF_3_0;
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800095e:	613b      	str	r3, [r7, #16]
        /* Get PLLMF[4] */
        pllmf4 = RCC->GCFGR & RCC_GCFGR_PLLMF_4;
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000968:	60fb      	str	r3, [r7, #12]

        pllmf4 = (( pllmf4 >> 27)*15);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	0eda      	lsrs	r2, r3, #27
 800096e:	4613      	mov	r3, r2
 8000970:	011b      	lsls	r3, r3, #4
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
        pllmf = ( pllmf >> 18) + pllmf4+ 2;
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	0c9a      	lsrs	r2, r3, #18
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	3302      	adds	r3, #2
 8000980:	613b      	str	r3, [r7, #16]

                
        pllselect = RCC->GCFGR & RCC_GCFGR_PLLSEL;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800098a:	60bb      	str	r3, [r7, #8]
        if (pllselect == 0x00)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d106      	bne.n	80009a0 <SystemCoreClockUpdate+0x8c>
        {
            /* HSI clock divided by 2 selected as PLL clock source */
            SystemCoreClock = (HSI_VALUE >>SYS_HSI_CLOCK_DIVIDED_2) * pllmf;
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <SystemCoreClockUpdate+0x100>)
 8000996:	fb02 f303 	mul.w	r3, r2, r3
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 800099c:	6013      	str	r3, [r2, #0]
            {
                SystemCoreClock = HSE_VALUE * pllmf;
            }
        }
    #endif
        break;
 800099e:	e017      	b.n	80009d0 <SystemCoreClockUpdate+0xbc>
            /* HSI clock divided by 2 selected as PLL clock source */
            SystemCoreClock = (HSI_VALUE >>SYS_HSI_CLOCK_DIVIDED_2) * pllmf;
        }
        else
        {
            if((RCC->GCFGR & RCC_GCFGR_PLLPREDV) != (uint32_t)RESET )
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <SystemCoreClockUpdate+0xa6>
            {
                /* HSE clock divided by 2 */
                SystemCoreClock = (HSE_VALUE >> 1) * pllmf;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <SystemCoreClockUpdate+0x104>)
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 80009b6:	6013      	str	r3, [r2, #0]
            {
                SystemCoreClock = HSE_VALUE * pllmf;
            }
        }
    #endif
        break;
 80009b8:	e00a      	b.n	80009d0 <SystemCoreClockUpdate+0xbc>
                /* HSE clock divided by 2 */
                SystemCoreClock = (HSE_VALUE >> 1) * pllmf;
            }
            else
            {
                SystemCoreClock = HSE_VALUE * pllmf;
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <SystemCoreClockUpdate+0xfc>)
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 80009c4:	6013      	str	r3, [r2, #0]
            }
        }
    #endif
        break;
 80009c6:	e003      	b.n	80009d0 <SystemCoreClockUpdate+0xbc>
        default: /* HSI used as system clock */
        SystemCoreClock = HSI_VALUE;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <SystemCoreClockUpdate+0xf8>)
 80009cc:	601a      	str	r2, [r3, #0]
        break;
 80009ce:	bf00      	nop
    }

    /* Get AHB prescaler */
    temp = RCC->GCFGR & RCC_GCFGR_AHBPS;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009d8:	617b      	str	r3, [r7, #20]
    temp = temp >> 4;
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	617b      	str	r3, [r7, #20]
    presc = AHBPrescTableList[temp]; 
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <SystemCoreClockUpdate+0x108>)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	607b      	str	r3, [r7, #4]
    /* Get AHB clock frequency */
    SystemCoreClock = SystemCoreClock >> presc;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	fa22 f303 	lsr.w	r3, r2, r3
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 80009f8:	6013      	str	r3, [r2, #0]
}
 80009fa:	bf00      	nop
 80009fc:	371c      	adds	r7, #28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	007a1200 	.word	0x007a1200
 8000a10:	00b71b00 	.word	0x00b71b00
 8000a14:	003d0900 	.word	0x003d0900
 8000a18:	005b8d80 	.word	0x005b8d80
 8000a1c:	20000004 	.word	0x20000004

08000a20 <SetSysClock>:
  * @retval None
  */


static void SetSysClock(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000a24:	f000 f802 	bl	8000a2c <SetSysClockTo72>
  SetSysClockTo72HSI();
#elif defined SYSCLK_FREQ_108MHz_HSI
  SetSysClockTo108HSI();
#endif
 
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
  
  /* CK_SYS, AHB, APB2 and APB1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->GCCR |= ((uint32_t)RCC_GCCR_HSEEN);
 8000a3a:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a3c:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a44:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->GCCR & RCC_GCCR_HSESTB;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d104      	bne.n	8000a66 <SetSysClockTo72+0x3a>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d1ef      	bne.n	8000a46 <SetSysClockTo72+0x1a>

  if ((RCC->GCCR & RCC_GCCR_HSESTB) != RESET)
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <SetSysClockTo72+0x4c>
  {
    HSEStatus = (uint32_t)0x01;
 8000a72:	2301      	movs	r3, #1
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	e001      	b.n	8000a7c <SetSysClockTo72+0x50>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d13b      	bne.n	8000afa <SetSysClockTo72+0xce>
  {
    /* AHB = CK_SYS not divided */
    RCC->GCFGR |= (uint32_t)RCC_GCFGR_AHBPS_DIV1;
 8000a82:	4a20      	ldr	r2, [pc, #128]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	6053      	str	r3, [r2, #4]
      
    /* APB2 = AHB not divided */
    RCC->GCFGR |= (uint32_t)RCC_GCFGR_APB2PS_DIV1;
 8000a8a:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	6053      	str	r3, [r2, #4]
    
    /* APB1 = AHB is divided 2 */
    RCC->GCFGR |= (uint32_t)RCC_GCFGR_APB1PS_DIV2;
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9c:	6053      	str	r3, [r2, #4]
    {
    }

#else     
    /* PLL configuration: PLLCLK = HSE * 6 = 72 MHz */
    RCC->GCFGR &= (uint32_t)((uint32_t)~(RCC_GCFGR_PLLSEL | RCC_GCFGR_PLLPREDV | RCC_GCFGR_PLLMF));
 8000a9e:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f023 6303 	bic.w	r3, r3, #137363456	; 0x8300000
 8000aa8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000aac:	6053      	str	r3, [r2, #4]
    RCC->GCFGR |= (uint32_t)( RCC_GCFGR_PLLPREDV_HSE | RCC_GCFGR_PLLSEL_HSE | RCC_GCFGR_PLLMF6);
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f443 1388 	orr.w	r3, r3, #1114112	; 0x110000
 8000ab8:	6053      	str	r3, [r2, #4]

#endif /* GD32F10X_CL */

    /* Enable PLL */
    RCC->GCCR |= RCC_GCCR_PLLEN;
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac4:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->GCCR & RCC_GCCR_PLLSTB) == 0)
 8000ac6:	bf00      	nop
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0f9      	beq.n	8000ac8 <SetSysClockTo72+0x9c>
    {
    }

    /* Select PLL as system clock source */
    RCC->GCFGR &= (uint32_t)((uint32_t)~(RCC_GCFGR_SCS));
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f023 0303 	bic.w	r3, r3, #3
 8000ade:	6053      	str	r3, [r2, #4]
    RCC->GCFGR |= (uint32_t)RCC_GCFGR_SCS_PLL;    
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->GCFGR & (uint32_t)RCC_GCFGR_SCSS) != (uint32_t)0x08)
 8000aec:	bf00      	nop
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SetSysClockTo72+0xd8>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d1f9      	bne.n	8000aee <SetSysClockTo72+0xc2>
    }
  }
  else
  { 
  } 
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000

08000b08 <GPIO_DeInit>:
  * @brief  Reset the GPIOx peripheral.
  * @param  GPIOx: Specifies the GPIO peripheral which will be reset.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    if (GPIOx == GPIOA)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <GPIO_DeInit+0xc8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d108      	bne.n	8000b2a <GPIO_DeInit+0x22>
    {
        /* Enable GPIOA reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOA, ENABLE);
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f000 fe9c 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOA from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOA, DISABLE);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2004      	movs	r0, #4
 8000b24:	f000 fe98 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
    }
}
 8000b28:	e04e      	b.n	8000bc8 <GPIO_DeInit+0xc0>
        /* Enable GPIOA reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOA, ENABLE);
        /* Release GPIOA from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOA, DISABLE);
    }
    else if (GPIOx == GPIOB)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <GPIO_DeInit+0xcc>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d108      	bne.n	8000b44 <GPIO_DeInit+0x3c>
    {
        /* Enable GPIOB reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOB, ENABLE);
 8000b32:	2101      	movs	r1, #1
 8000b34:	2008      	movs	r0, #8
 8000b36:	f000 fe8f 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOB from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOB, DISABLE);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2008      	movs	r0, #8
 8000b3e:	f000 fe8b 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
    }
}
 8000b42:	e041      	b.n	8000bc8 <GPIO_DeInit+0xc0>
        /* Enable GPIOB reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOB, ENABLE);
        /* Release GPIOB from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOB, DISABLE);
    }
    else if (GPIOx == GPIOC)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a24      	ldr	r2, [pc, #144]	; (8000bd8 <GPIO_DeInit+0xd0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d108      	bne.n	8000b5e <GPIO_DeInit+0x56>
    {
        /* Enable GPIOC reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOC, ENABLE);
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2010      	movs	r0, #16
 8000b50:	f000 fe82 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOC from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOC, DISABLE);
 8000b54:	2100      	movs	r1, #0
 8000b56:	2010      	movs	r0, #16
 8000b58:	f000 fe7e 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
    }
}
 8000b5c:	e034      	b.n	8000bc8 <GPIO_DeInit+0xc0>
        /* Enable GPIOC reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOC, ENABLE);
        /* Release GPIOC from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOC, DISABLE);
    }
    else if (GPIOx == GPIOD)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <GPIO_DeInit+0xd4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d108      	bne.n	8000b78 <GPIO_DeInit+0x70>
    {
        /* Enable GPIOD reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOD, ENABLE);
 8000b66:	2101      	movs	r1, #1
 8000b68:	2020      	movs	r0, #32
 8000b6a:	f000 fe75 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOD from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOD, DISABLE);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2020      	movs	r0, #32
 8000b72:	f000 fe71 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
    }
}
 8000b76:	e027      	b.n	8000bc8 <GPIO_DeInit+0xc0>
        /* Enable GPIOD reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOD, ENABLE);
        /* Release GPIOD from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOD, DISABLE);
    }
    else if (GPIOx == GPIOE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <GPIO_DeInit+0xd8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d108      	bne.n	8000b92 <GPIO_DeInit+0x8a>
    {
        /* Enable GPIOE reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOE, ENABLE);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2040      	movs	r0, #64	; 0x40
 8000b84:	f000 fe68 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOE from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOE, DISABLE);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2040      	movs	r0, #64	; 0x40
 8000b8c:	f000 fe64 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
    }
}
 8000b90:	e01a      	b.n	8000bc8 <GPIO_DeInit+0xc0>
        /* Enable GPIOE reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOE, ENABLE);
        /* Release GPIOE from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOE, DISABLE);
    }
    else if (GPIOx == GPIOF)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <GPIO_DeInit+0xdc>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d108      	bne.n	8000bac <GPIO_DeInit+0xa4>
    {
        /* Enable GPIOF reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOF, ENABLE);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2080      	movs	r0, #128	; 0x80
 8000b9e:	f000 fe5b 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOF from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOF, DISABLE);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2080      	movs	r0, #128	; 0x80
 8000ba6:	f000 fe57 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
    }
}
 8000baa:	e00d      	b.n	8000bc8 <GPIO_DeInit+0xc0>
        /* Enable GPIOF reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOF, ENABLE);
        /* Release GPIOF from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOF, DISABLE);
    }
    else if(GPIOx == GPIOG)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <GPIO_DeInit+0xe0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d109      	bne.n	8000bc8 <GPIO_DeInit+0xc0>
    {
        /* Enable GPIOG reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, ENABLE);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bba:	f000 fe4d 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        /* Release GPIOG from reset state */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_GPIOG, DISABLE);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bc4:	f000 fe48 	bl	8001858 <RCC_APB2PeriphReset_Enable>
    }
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40011400 	.word	0x40011400
 8000be0:	40011800 	.word	0x40011800
 8000be4:	40011c00 	.word	0x40011c00
 8000be8:	40012000 	.word	0x40012000

08000bec <GPIO_AFDeInit>:
  *         and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFDeInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    /* Enable AFIO reset state */
    RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_AF, ENABLE);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 fe30 	bl	8001858 <RCC_APB2PeriphReset_Enable>
    /* Release AFIO from reset state */
    RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_AF, DISABLE);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 fe2c 	bl	8001858 <RCC_APB2PeriphReset_Enable>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <GPIO_Init>:
  * @param  GPIOx: Specifie the GPIO peripheral which will be initialized.
  * @param  GPIO_InitStruct: The structuer contains configuration information.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitPara* GPIO_InitStruct)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
    uint32_t tempreg = 0x00, pinmask = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]

    /* GPIO Mode Configuration */
    currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	78db      	ldrb	r3, [r3, #3]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	61fb      	str	r3, [r7, #28]
    if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	78db      	ldrb	r3, [r3, #3]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d005      	beq.n	8000c48 <GPIO_Init+0x44>
    {
        /* Output mode */
        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	461a      	mov	r2, r3
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61fb      	str	r3, [r7, #28]
    }
    /* GPIO CTLR1 Configuration */
    /* Configure the eight low port pins */
    if (((uint32_t)GPIO_InitStruct->GPIO_Pin & CTLR1_8BIT_FIELDS) != 0x00)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d044      	beq.n	8000cdc <GPIO_Init+0xd8>
    {
        tempreg = GPIOx->CTLR1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	617b      	str	r3, [r7, #20]
        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	e038      	b.n	8000cd0 <GPIO_Init+0xcc>
        {
            pos = ((uint32_t)0x01) << pinpos;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	60fb      	str	r3, [r7, #12]
            /* Get the port pins position */
            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
            if (currentpin == pos)
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d126      	bne.n	8000cca <GPIO_Init+0xc6>
            {
                pos = pinpos << 2;
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
                /* Clear the corresponding low control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 8000c82:	220f      	movs	r2, #15
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	60bb      	str	r3, [r7, #8]
                tempreg &= ~pinmask;
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	4013      	ands	r3, r2
 8000c94:	617b      	str	r3, [r7, #20]
                /* Write the mode configuration in the corresponding bits */
                tempreg |= (currentmode << pos);
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]
                /* Reset the corresponding ODR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_MODE_IPD)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	78db      	ldrb	r3, [r3, #3]
 8000ca8:	2b28      	cmp	r3, #40	; 0x28
 8000caa:	d105      	bne.n	8000cb8 <GPIO_Init+0xb4>
                {
                    GPIOx->BCR = (((uint32_t)0x01) << pinpos);
 8000cac:	2201      	movs	r2, #1
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	409a      	lsls	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	e008      	b.n	8000cca <GPIO_Init+0xc6>
                }
                else
                {
                    /* Set the corresponding ODR bit */
                    if (GPIO_InitStruct->GPIO_Mode == GPIO_MODE_IPU)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	78db      	ldrb	r3, [r3, #3]
 8000cbc:	2b48      	cmp	r3, #72	; 0x48
 8000cbe:	d104      	bne.n	8000cca <GPIO_Init+0xc6>
                    {
                        GPIOx->BOR = (((uint32_t)0x01) << pinpos);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	611a      	str	r2, [r3, #16]
    /* GPIO CTLR1 Configuration */
    /* Configure the eight low port pins */
    if (((uint32_t)GPIO_InitStruct->GPIO_Pin & CTLR1_8BIT_FIELDS) != 0x00)
    {
        tempreg = GPIOx->CTLR1;
        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b07      	cmp	r3, #7
 8000cd4:	d9c3      	bls.n	8000c5e <GPIO_Init+0x5a>
                        GPIOx->BOR = (((uint32_t)0x01) << pinpos);
                    }
                }
            }
        }
        GPIOx->CTLR1 = tempreg;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	601a      	str	r2, [r3, #0]
    }
    /* GPIO CTLR2 Configuration */
    /* Configure the eight high port pins */
    if (GPIO_InitStruct->GPIO_Pin > CTLR2_8BIT_FIELDS)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	2bff      	cmp	r3, #255	; 0xff
 8000ce2:	d946      	bls.n	8000d72 <GPIO_Init+0x16e>
    {
        tempreg = GPIOx->CTLR2;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	617b      	str	r3, [r7, #20]
        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	e03a      	b.n	8000d66 <GPIO_Init+0x162>
        {
            pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	60fb      	str	r3, [r7, #12]
            /* Get the port pins position */
            currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
            if (currentpin == pos)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d127      	bne.n	8000d60 <GPIO_Init+0x15c>
            {
                pos = pinpos << 2;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
                /* Clear the corresponding high control register bits */
                pinmask = ((uint32_t)0x0F) << pos;
 8000d16:	220f      	movs	r2, #15
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	60bb      	str	r3, [r7, #8]
                tempreg &= ~pinmask;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	4013      	ands	r3, r2
 8000d28:	617b      	str	r3, [r7, #20]
                /* Write the mode configuration in the corresponding bits */
                tempreg |= (currentmode << pos);
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
                /* Reset the corresponding DOR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_MODE_IPD)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	78db      	ldrb	r3, [r3, #3]
 8000d3c:	2b28      	cmp	r3, #40	; 0x28
 8000d3e:	d105      	bne.n	8000d4c <GPIO_Init+0x148>
                {
                    GPIOx->BCR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	3308      	adds	r3, #8
 8000d44:	2201      	movs	r2, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	615a      	str	r2, [r3, #20]
                }
                /* Set the corresponding DOR bit */
                if (GPIO_InitStruct->GPIO_Mode == GPIO_MODE_IPU)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	78db      	ldrb	r3, [r3, #3]
 8000d50:	2b48      	cmp	r3, #72	; 0x48
 8000d52:	d105      	bne.n	8000d60 <GPIO_Init+0x15c>
                {
                    GPIOx->BOR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	3308      	adds	r3, #8
 8000d58:	2201      	movs	r2, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	611a      	str	r2, [r3, #16]
    /* GPIO CTLR2 Configuration */
    /* Configure the eight high port pins */
    if (GPIO_InitStruct->GPIO_Pin > CTLR2_8BIT_FIELDS)
    {
        tempreg = GPIOx->CTLR2;
        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	3301      	adds	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2b07      	cmp	r3, #7
 8000d6a:	d9c1      	bls.n	8000cf0 <GPIO_Init+0xec>
                {
                    GPIOx->BOR = (((uint32_t)0x01) << (pinpos + 0x08));
                }
            }
        }
        GPIOx->CTLR2 = tempreg;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	605a      	str	r2, [r3, #4]
    }
}
 8000d72:	bf00      	nop
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <GPIO_ParaInit>:
  * @brief  Initial GPIO_InitParameter members.
  * @param  GPIO_InitParameter : pointer to a GPIO_InitPara structure.
  * @retval None
  */
void GPIO_ParaInit(GPIO_InitPara* GPIO_InitStruct)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    /* Reset GPIO init structure parameters values */
    GPIO_InitStruct->GPIO_Pin  = GPIO_PIN_ALL;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	801a      	strh	r2, [r3, #0]
    GPIO_InitStruct->GPIO_Speed = GPIO_SPEED_2MHZ;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2202      	movs	r2, #2
 8000d90:	709a      	strb	r2, [r3, #2]
    GPIO_InitStruct->GPIO_Mode = GPIO_MODE_IN_FLOATING;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2204      	movs	r2, #4
 8000d96:	70da      	strb	r2, [r3, #3]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <GPIO_ReadInputBit>:
  * @param  GPIOx: Select the GPIO peripheral.
  * @param  GPIO_Pin: Select the port.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
    uint8_t bitstatus = 0x00;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]

    if ((GPIOx->DIR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <GPIO_ReadInputBit+0x22>
    {
        bitstatus = (uint8_t)Bit_SET;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e001      	b.n	8000dca <GPIO_ReadInputBit+0x26>
    }
    else
    {
        bitstatus = (uint8_t)Bit_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    return ((uint16_t)GPIOx->DIR);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	b29b      	uxth	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <GPIO_ReadOutputBit>:
  * @param  GPIOx: Select the GPIO peripheral.
  * @param  GPIO_Pin: Select the port.
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
    uint8_t bitstatus = 0x00;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

    if ((GPIOx->DOR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <GPIO_ReadOutputBit+0x22>
    {
        bitstatus = (uint8_t)Bit_SET;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e001      	b.n	8000e16 <GPIO_ReadOutputBit+0x26>
    }
    else
    {
        bitstatus = (uint8_t)Bit_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]
    }
    return bitstatus;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <GPIO_ReadOutputData>:
  * @brief  Read the specified GPIO output data port.
  * @param  GPIOx: Select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    return ((uint16_t)GPIOx->DOR);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	b29b      	uxth	r3, r3
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <GPIO_SetBits>:
  * @param  GPIOx: Select the GPIO peripheral.
  * @param  GPIO_Pin: Select the port.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]
    GPIOx->BOR = GPIO_Pin;
 8000e48:	887a      	ldrh	r2, [r7, #2]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	611a      	str	r2, [r3, #16]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <GPIO_ResetBits>:
  * @param  GPIOx: Select the GPIO peripheral.
  * @param  GPIO_Pin: Select the port.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
    GPIOx->BCR = GPIO_Pin;
 8000e64:	887a      	ldrh	r2, [r7, #2]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	615a      	str	r2, [r3, #20]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <GPIO_WriteBit>:
  *   @arg Bit_RESET: clear the port pin
  *   @arg Bit_SET: set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitState BitVal)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
    if (BitVal != Bit_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <GPIO_WriteBit+0x1e>
    {
        GPIOx->BOR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
    }
    else
    {
        GPIOx->BCR = GPIO_Pin;
    }
}
 8000e90:	e002      	b.n	8000e98 <GPIO_WriteBit+0x24>
    {
        GPIOx->BOR = GPIO_Pin;
    }
    else
    {
        GPIOx->BCR = GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	615a      	str	r2, [r3, #20]
    }
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <GPIO_WritePort>:
  * @param  GPIOx: Select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port data output register.
  * @retval None
  */
void GPIO_WritePort(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
    GPIOx->DOR = PortVal;
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60da      	str	r2, [r3, #12]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <GPIO_PinLockConfig>:
  * @param  GPIOx: Select the GPIO peripheral.
  * @param  GPIO_Pin: Select the port.
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
    uint32_t temp = 0x00010000;
 8000ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed0:	60fb      	str	r3, [r7, #12]

    temp |= GPIO_Pin;
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
    /* Set LCKK bit */
    GPIOx->LOCKR = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	619a      	str	r2, [r3, #24]
    /* Reset LCKK bit */
    GPIOx->LOCKR =  GPIO_Pin;
 8000ee0:	887a      	ldrh	r2, [r7, #2]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
    /* Set LCKK bit */
    GPIOx->LOCKR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	619a      	str	r2, [r3, #24]
    /* Read LCKK bit*/
    temp = GPIOx->LOCKR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	60fb      	str	r3, [r7, #12]
    /* Read LCKK bit*/
    temp = GPIOx->LOCKR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	60fb      	str	r3, [r7, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
    uint32_t temp = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]

    temp = AFIO->AFIO_EVR;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <GPIO_EventOutputConfig+0x48>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	60fb      	str	r3, [r7, #12]
    /* Clear the PORT[6:4] and PIN[3:0] bits */
    temp &= ECR_PORTPINCONFIG_MASK;
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
    temp |= (uint32_t)GPIO_PortSource << 0x04;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
    temp |= GPIO_PinSource;
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
    AFIO->AFIO_EVR = temp;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <GPIO_EventOutputConfig+0x48>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40010000 	.word	0x40010000

08000f50 <GPIO_EventOutput_Enable>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutput_Enable(uint32_t AFIO_ECR_EVOE_ENABLE, TypeState NewState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
    /*  Enable or disable the Event Output */   
    if (NewState != DISABLE)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <GPIO_EventOutput_Enable+0x20>
    {
       AFIO->AFIO_EVR  |= AFIO_ECR_EVOE_SET;
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <GPIO_EventOutput_Enable+0x38>)
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <GPIO_EventOutput_Enable+0x38>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6c:	6013      	str	r3, [r2, #0]
    }
    else
    {
       AFIO->AFIO_EVR &= AFIO_ECR_EVOE_RESET;
    }
}
 8000f6e:	e005      	b.n	8000f7c <GPIO_EventOutput_Enable+0x2c>
    {
       AFIO->AFIO_EVR  |= AFIO_ECR_EVOE_SET;
    }
    else
    {
       AFIO->AFIO_EVR &= AFIO_ECR_EVOE_RESET;
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <GPIO_EventOutput_Enable+0x38>)
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <GPIO_EventOutput_Enable+0x38>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f7a:	6013      	str	r3, [r2, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40010000 	.word	0x40010000

08000f8c <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, TypeState NewState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
    uint32_t temp = 0x00, temp1 = 0x00, tempreg = 0x00, tempmask = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]

    if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da03      	bge.n	8000fb6 <GPIO_PinRemapConfig+0x2a>
    {
        tempreg = AFIO->AFIO_PCFR2;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <GPIO_PinRemapConfig+0xdc>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e002      	b.n	8000fbc <GPIO_PinRemapConfig+0x30>
    }
    else
    {
        tempreg = AFIO->AFIO_PCFR1;
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <GPIO_PinRemapConfig+0xdc>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	617b      	str	r3, [r7, #20]
    }

    tempmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	60bb      	str	r3, [r7, #8]
    temp = GPIO_Remap & LSB_MASK;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	613b      	str	r3, [r7, #16]

    if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000fd6:	d10a      	bne.n	8000fee <GPIO_PinRemapConfig+0x62>
    {
        tempreg &= DBGAFR_SWJCFG_MASK;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fde:	617b      	str	r3, [r7, #20]
        AFIO->AFIO_PCFR1 &= DBGAFR_SWJCFG_MASK;
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <GPIO_PinRemapConfig+0xdc>)
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <GPIO_PinRemapConfig+0xdc>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fea:	6053      	str	r3, [r2, #4]
 8000fec:	e021      	b.n	8001032 <GPIO_PinRemapConfig+0xa6>
    }
    else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00e      	beq.n	8001016 <GPIO_PinRemapConfig+0x8a>
    {
        temp1 = ((uint32_t)0x03) << tempmask;
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	60fb      	str	r3, [r7, #12]
        tempreg &= ~temp1;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
        tempreg |= ~DBGAFR_SWJCFG_MASK;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00d      	b.n	8001032 <GPIO_PinRemapConfig+0xa6>
    }
    else
    {
        tempreg &= ~(temp << ((GPIO_Remap >> 0x15)*0x10));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	0d5b      	lsrs	r3, r3, #21
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4013      	ands	r3, r2
 8001028:	617b      	str	r3, [r7, #20]
        tempreg |= ~DBGAFR_SWJCFG_MASK;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001030:	617b      	str	r3, [r7, #20]
    }
    if (NewState != DISABLE)
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <GPIO_PinRemapConfig+0xbe>
    {
        tempreg |= (temp << ((GPIO_Remap >> 0x15)*0x10));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0d5b      	lsrs	r3, r3, #21
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	4313      	orrs	r3, r2
 8001048:	617b      	str	r3, [r7, #20]
    }
    if((GPIO_Remap & AFIO_PCFR2_FIELDS) == AFIO_PCFR2_FIELDS)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da03      	bge.n	8001058 <GPIO_PinRemapConfig+0xcc>
    {
        AFIO->AFIO_PCFR2 = tempreg;
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <GPIO_PinRemapConfig+0xdc>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	61d3      	str	r3, [r2, #28]
    }
    else
    {
        AFIO->AFIO_PCFR1 = tempreg;
    }
}
 8001056:	e002      	b.n	800105e <GPIO_PinRemapConfig+0xd2>
    {
        AFIO->AFIO_PCFR2 = tempreg;
    }
    else
    {
        AFIO->AFIO_PCFR1 = tempreg;
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <GPIO_PinRemapConfig+0xdc>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	6053      	str	r3, [r2, #4]
    }
}
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40010000 	.word	0x40010000

0800106c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
    uint32_t temp = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]

    temp = ((uint32_t)0x0f) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03));
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	60fb      	str	r3, [r7, #12]
    /* Select EXTI0->EXTI3 bit */
    if(GPIO_PinSource < AFIO_ESSR1_BITS_FIELDS)
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	2b03      	cmp	r3, #3
 8001094:	d813      	bhi.n	80010be <GPIO_EXTILineConfig+0x52>
    {
        AFIO->AFIO_ESSR1 &= ~temp;  
 8001096:	492d      	ldr	r1, [pc, #180]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
        AFIO->AFIO_ESSR1 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03)));  
 80010a4:	4829      	ldr	r0, [pc, #164]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	79f9      	ldrb	r1, [r7, #7]
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	6083      	str	r3, [r0, #8]
    else
    {
        AFIO->AFIO_ESSR4 &= ~temp;  
        AFIO->AFIO_ESSR4 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03))); 
    }
}
 80010bc:	e040      	b.n	8001140 <GPIO_EXTILineConfig+0xd4>
    {
        AFIO->AFIO_ESSR1 &= ~temp;  
        AFIO->AFIO_ESSR1 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03)));  
    }
    /* Select EXTI4->EXTI7 bit */
    else if(GPIO_PinSource < AFIO_ESSR2_BITS_FIELDS)
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d813      	bhi.n	80010ec <GPIO_EXTILineConfig+0x80>
    {
        AFIO->AFIO_ESSR2 &= ~temp;  
 80010c4:	4921      	ldr	r1, [pc, #132]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4013      	ands	r3, r2
 80010d0:	60cb      	str	r3, [r1, #12]
        AFIO->AFIO_ESSR2 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03)));  
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	79f9      	ldrb	r1, [r7, #7]
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60c3      	str	r3, [r0, #12]
    else
    {
        AFIO->AFIO_ESSR4 &= ~temp;  
        AFIO->AFIO_ESSR4 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03))); 
    }
}
 80010ea:	e029      	b.n	8001140 <GPIO_EXTILineConfig+0xd4>
    {
        AFIO->AFIO_ESSR2 &= ~temp;  
        AFIO->AFIO_ESSR2 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03)));  
    }
    /* Select EXTI8->EXTI11 bit */
    else if(GPIO_PinSource < AFIO_ESSR3_BITS_FIELDS)
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	2b0b      	cmp	r3, #11
 80010f0:	d813      	bhi.n	800111a <GPIO_EXTILineConfig+0xae>
    {
        AFIO->AFIO_ESSR3 &= ~temp;  
 80010f2:	4916      	ldr	r1, [pc, #88]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	4013      	ands	r3, r2
 80010fe:	610b      	str	r3, [r1, #16]
        AFIO->AFIO_ESSR3 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03))); 
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	79f9      	ldrb	r1, [r7, #7]
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	6103      	str	r3, [r0, #16]
    else
    {
        AFIO->AFIO_ESSR4 &= ~temp;  
        AFIO->AFIO_ESSR4 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03))); 
    }
}
 8001118:	e012      	b.n	8001140 <GPIO_EXTILineConfig+0xd4>
        AFIO->AFIO_ESSR3 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03))); 
    }
    /* Select EXTI12->EXTI15 bit */
    else
    {
        AFIO->AFIO_ESSR4 &= ~temp;  
 800111a:	490c      	ldr	r1, [pc, #48]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	4013      	ands	r3, r2
 8001126:	614b      	str	r3, [r1, #20]
        AFIO->AFIO_ESSR4 |= (((uint32_t)GPIO_PortSource) << (AFIO_ESSR_PIN_FIELDS * (GPIO_PinSource & (uint8_t)0x03))); 
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <GPIO_EXTILineConfig+0xe0>)
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	79f9      	ldrb	r1, [r7, #7]
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	6143      	str	r3, [r0, #20]
    }
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000

08001150 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MEDIA_INTERFACE_MII: MII mode
  *     @arg GPIO_ETH_MEDIA_INTERFACE_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
    temp = AFIO->AFIO_PCFR1;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <GPIO_ETH_MediaInterfaceConfig+0x34>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60fb      	str	r3, [r7, #12]
    /* Clear MII_RMII_SEL bit */
    temp &= ~((uint32_t)AFIO_PCFR1_MII_RMII);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001168:	60fb      	str	r3, [r7, #12]
    /* Configure MII_RMII bit according to GPIO_ETH_MediaInterface value */
    temp |= GPIO_ETH_MediaInterface;
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4313      	orrs	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
    /* Store the new value */
    AFIO->AFIO_PCFR1 = temp;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <GPIO_ETH_MediaInterfaceConfig+0x34>)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6053      	str	r3, [r2, #4]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40010000 	.word	0x40010000

08001188 <RCC_DeInit>:
  * @brief  Reset the RCC clock configuration.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    /* Set RCC GCCR_HSIEN mask */
    RCC->GCCR |= GCCR_HSIEN_SET;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <RCC_DeInit+0x58>)
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <RCC_DeInit+0x58>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]
    
    /* Reset SCS[1:0], AHBPS[3:0], APB1PS[2:0],APB2PS[2:0], ADCPS[2:0],CKOTUSEL[2:0] bits */
#ifdef GD32F10X_CL
    RCC->GCFGR &= GCFGR_RESET_CL;
#else
    RCC->GCFGR &= GCFGR_RESET;
 8001198:	4911      	ldr	r1, [pc, #68]	; (80011e0 <RCC_DeInit+0x58>)
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <RCC_DeInit+0x58>)
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <RCC_DeInit+0x5c>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
#endif /* GD32F10X_CL */   
  
    /* Reset HSEEN, CKMEN and PLLEN bits */
    RCC->GCCR &= GCCR_HSEEN_CKMEN_PLLEN_RESET;
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <RCC_DeInit+0x58>)
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <RCC_DeInit+0x58>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]

    /* Reset HSEBPS bit */
    RCC->GCCR &= GCCR_HSEBPS_RESET;
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <RCC_DeInit+0x58>)
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <RCC_DeInit+0x58>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

    /* Reset PLLSEL, PLLPREDV and PLLMF[4:0] USBPS/OTGFSPS bits */
#ifdef GD32F10X_CL
    RCC->GCFGR &= GCFGR_PLLSEL_PLLPREDV_PLLMF_OTGFSPS_RESET_CL;
#else
    RCC->GCFGR &= GCFGR_PLLSEL_PLLPREDV_PLLMF_USBPS_RESET;
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <RCC_DeInit+0x58>)
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <RCC_DeInit+0x58>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 630f 	bic.w	r3, r3, #149946368	; 0x8f00000
 80011ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80011ce:	6053      	str	r3, [r2, #4]

    /* Disable all interrupts and clear flag bits */
    RCC->GCIR = GCIR_INT_FLAG_RESET_CL;
#else
    /* Disable all interrupts and clear flag bits */
    RCC->GCIR = GCIR_INT_FLAG_RESET;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <RCC_DeInit+0x58>)
 80011d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011d6:	609a      	str	r2, [r3, #8]
#endif /* GD32F10X_CL */   
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	e8ff0000 	.word	0xe8ff0000

080011e8 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn on the HSE
  *            @arg RCC_HSE_BYPASS: HSE bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    /* Reset HSEEN and HSEBPS bits ------------------*/
    RCC->GCCR &= GCCR_HSEEN_HSEBPS_RESET;
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <RCC_HSEConfig+0x2c>)
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <RCC_HSEConfig+0x2c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 80011fa:	6013      	str	r3, [r2, #0]
    /* Set the new state of HSE  -------------------------------------------*/
    RCC->GCCR |= RCC_HSE;
 80011fc:	4905      	ldr	r1, [pc, #20]	; (8001214 <RCC_HSEConfig+0x2c>)
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <RCC_HSEConfig+0x2c>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]

}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <RCC_WaitForHSEStartUp>:
  * @brief  Wait for HSE start-up.
  * @param  None
  * @retval The HSE start-up result(SUCCESS or ERROR)
  */
TypeState RCC_WaitForHSEStartUp(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    __IO uint32_t HSE_StartOk_Counter = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
    TypeState HSEState = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
    
    /* Wait until HSE is ready and if timeout to exit */
    while((HSE_StartOk_Counter != HSE_STARTUP_TIMEOUT) && (HSEState == RESET))
 8001226:	e007      	b.n	8001238 <RCC_WaitForHSEStartUp+0x20>
    {
        HSEState = RCC_GetBitState(RCC_FLAG_HSESTB);
 8001228:	2031      	movs	r0, #49	; 0x31
 800122a:	f000 fbcb 	bl	80019c4 <RCC_GetBitState>
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
        HSE_StartOk_Counter++;  
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	603b      	str	r3, [r7, #0]
{
    __IO uint32_t HSE_StartOk_Counter = 0;
    TypeState HSEState = RESET;
    
    /* Wait until HSE is ready and if timeout to exit */
    while((HSE_StartOk_Counter != HSE_STARTUP_TIMEOUT) && (HSEState == RESET))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123e:	4293      	cmp	r3, r2
 8001240:	d002      	beq.n	8001248 <RCC_WaitForHSEStartUp+0x30>
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ef      	beq.n	8001228 <RCC_WaitForHSEStartUp+0x10>
    {
        HSEState = RCC_GetBitState(RCC_FLAG_HSESTB);
        HSE_StartOk_Counter++;  
    }
    
    if(RCC_GetBitState(RCC_FLAG_HSESTB) != RESET)
 8001248:	2031      	movs	r0, #49	; 0x31
 800124a:	f000 fbbb 	bl	80019c4 <RCC_GetBitState>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <RCC_WaitForHSEStartUp+0x40>
    {
        return SUCCESS;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <RCC_WaitForHSEStartUp+0x42>
    }
    else
    {
        return ERROR;
 8001258:	2300      	movs	r3, #0
    }
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop

08001264 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: the HSI calibration value.
  *          This parameter must be between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_adjust = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
    
    temp_adjust = RCC->GCCR;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <RCC_AdjustHSICalibrationValue+0x38>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]
    
    /* Clear HSIADJ[4:0] bits */
    temp_adjust &= ~RCC_GCCR_HSIADJ;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800127e:	60fb      	str	r3, [r7, #12]
    
    /* Set HSIADJ[4:0] bits according to HSICalibrationValue value */
    temp_adjust |= (uint32_t)HSICalibrationValue << GCCR_HSIADJ_OFFSET ;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
    
    /* Store the calibration value */
    RCC->GCCR = temp_adjust;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <RCC_AdjustHSICalibrationValue+0x38>)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <RCC_HSI_Enable>:
  * @param  NewValue: new value of the HSI.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI_Enable(TypeState NewValue)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  
    if (NewValue != DISABLE)
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <RCC_HSI_Enable+0x1e>
    {
        RCC->GCCR |= RCC_GCCR_HSIEN;
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <RCC_HSI_Enable+0x34>)
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <RCC_HSI_Enable+0x34>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]
    }
    else
    {
        RCC->GCCR &= ~RCC_GCCR_HSIEN;
    }
}
 80012bc:	e005      	b.n	80012ca <RCC_HSI_Enable+0x2a>
    {
        RCC->GCCR |= RCC_GCCR_HSIEN;
    }
    else
    {
        RCC->GCCR &= ~RCC_GCCR_HSIEN;
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <RCC_HSI_Enable+0x34>)
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <RCC_HSI_Enable+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	6013      	str	r3, [r2, #0]
    }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000

080012d8 <RCC_PLLConfig>:
  *     For @b GD32_Connectivity_line_devices, this parameter can be RCC_PLLMUL_x where x:{[2,32], 6_5}
  *     For @b other_GD32_devices, this parameter can be RCC_PLLMUL_x where x:[2,32]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSelect, uint32_t RCC_PLLMF)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
    uint32_t temp = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]

    temp = RCC->GCFGR;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <RCC_PLLConfig+0x3c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
    /* Clear PLLSEL [16] and PLLMF[4:0] bits */
    temp &= ~(RCC_GCFGR_PLLMF | RCC_GCFGR_PLLSEL);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 6303 	bic.w	r3, r3, #137363456	; 0x8300000
 80012f2:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80012f6:	60fb      	str	r3, [r7, #12]
    /* Set the PLLSEL and PLLMF */
    temp |= RCC_PLLSelect | RCC_PLLMF;
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    RCC->GCFGR = temp;
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <RCC_PLLConfig+0x3c>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6053      	str	r3, [r2, #4]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40021000 	.word	0x40021000

08001318 <RCC_PLL_Enable>:
  * @param  NewValue: new value of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL_Enable(TypeState NewValue)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
    if (NewValue != DISABLE)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <RCC_PLL_Enable+0x1e>
    {
        RCC->GCCR |= RCC_GCCR_PLLEN;
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <RCC_PLL_Enable+0x34>)
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <RCC_PLL_Enable+0x34>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001332:	6013      	str	r3, [r2, #0]
    }
    else
    {
        RCC->GCCR &= ~RCC_GCCR_PLLEN;
    }
}
 8001334:	e005      	b.n	8001342 <RCC_PLL_Enable+0x2a>
    {
        RCC->GCCR |= RCC_GCCR_PLLEN;
    }
    else
    {
        RCC->GCCR &= ~RCC_GCCR_PLLEN;
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <RCC_PLL_Enable+0x34>)
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <RCC_PLL_Enable+0x34>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001340:	6013      	str	r3, [r2, #0]
    }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000

08001350 <RCC_CK_SYSConfig>:
  *            @arg RCC_SYSCLKSOURCE_HSE:    selecte HSE as CK_SYS source
  *            @arg RCC_SYSCLKSOURCE_PLLCLK: selecte PLL as CK_SYS source
  * @retval None
  */
void RCC_CK_SYSConfig(uint32_t RCC_SYSCLKSource)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
    
    temp = RCC->GCFGR;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <RCC_CK_SYSConfig+0x34>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
    
    /* Clear SCS[1:0] bits */
    temp &= ~RCC_GCFGR_SCS;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f023 0303 	bic.w	r3, r3, #3
 8001368:	60fb      	str	r3, [r7, #12]
    
    /* Set SCS[1:0] bits according to RCC_SYSCLKSource value */
    temp |= RCC_SYSCLKSource;
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
    
    /* Store the new value */
    RCC->GCFGR = temp;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <RCC_CK_SYSConfig+0x34>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6053      	str	r3, [r2, #4]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <RCC_GetCK_SYSSource>:
  *           - 0x00: HSI used as CK_SYS source
  *           - 0x04: HSE used as CK_SYS source  
  *           - 0x08: PLL used as CK_SYS source
  */
uint8_t RCC_GetCK_SYSSource(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
    return ((uint8_t)(RCC->GCFGR & RCC_GCFGR_SCSS));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <RCC_GetCK_SYSSource+0x18>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	b2db      	uxtb	r3, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000

080013a4 <RCC_AHBConfig>:
  *            @arg RCC_SYSCLK_DIV256: AHB clock = CK_SYS/256
  *            @arg RCC_SYSCLK_DIV512: AHB clock = CK_SYS/512
  * @retval None
  */
void RCC_AHBConfig(uint32_t RCC_CK_SYSDiv)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
    
    temp = RCC->GCFGR;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <RCC_AHBConfig+0x34>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60fb      	str	r3, [r7, #12]
    
    /* Clear AHBPS[3:0] bits */
    temp &= ~RCC_GCFGR_AHBPS;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013bc:	60fb      	str	r3, [r7, #12]
    
    /* Set AHBPS[3:0] bits according to RCC_CK_SYSDiv value */
    temp |= RCC_CK_SYSDiv;
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new value */
    RCC->GCFGR = temp;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <RCC_AHBConfig+0x34>)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6053      	str	r3, [r2, #4]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <RCC_APB1Config>:
  *            @arg RCC_APB1AHB_DIV8: APB1 clock = AHB/8
  *            @arg RCC_APB1AHB_DIV16: APB1 clock = AHB/16
  * @retval None
  */
void RCC_APB1Config(uint32_t RCC_APB1)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
    
    temp = RCC->GCFGR;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <RCC_APB1Config+0x34>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
    
    /* Clear APB1PS[2:0] bits */
    temp &= ~RCC_GCFGR_APB1PS;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f4:	60fb      	str	r3, [r7, #12]
    
    /* Set APB1PS[2:0] bits according to RCC_APB1 value */
    temp |= RCC_APB1;
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
    
    /* Store the new value */
    RCC->GCFGR = temp;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <RCC_APB1Config+0x34>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6053      	str	r3, [r2, #4]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <RCC_APB2Config>:
  *            @arg RCC_APB2AHB_DIV8: APB2 clock = AHB/8
  *            @arg RCC_APB2AHB_DIV16: APB2 clock = AHB/16
  * @retval None
  */
void RCC_APB2Config(uint32_t RCC_APB2)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
    
    temp = RCC->GCFGR;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <RCC_APB2Config+0x34>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	60fb      	str	r3, [r7, #12]
    
    /* Clear APB2PS[2:0] bits */
    temp &= ~RCC_GCFGR_APB2PS;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800142c:	60fb      	str	r3, [r7, #12]
    
    /* Set APB2PS[2:0] bits according to RCC_APB2 value */
    temp |= RCC_APB2;
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
    
    /* Store the new value */
    RCC->GCFGR = temp;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <RCC_APB2Config+0x34>)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6053      	str	r3, [r2, #4]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000

0800144c <RCC_USBCLKConfig>:
  *             @arg RCC_USBCLK_PLL_DIV2:   USB clock = PLL/2
  *             @arg RCC_USBCLK_PLL_DIV2_5: USB clock = PLL/2.5      
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
{ 
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    
    /* Clear USBPS bit */
    RCC->GCFGR &= ~RCC_GCFGR_USBPS;
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <RCC_USBCLKConfig+0x2c>)
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <RCC_USBCLKConfig+0x2c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800145e:	6053      	str	r3, [r2, #4]
    /* Set USBPS bits according to RCC_USBCLK value */
    RCC->GCFGR |= RCC_USBCLK;
 8001460:	4905      	ldr	r1, [pc, #20]	; (8001478 <RCC_USBCLKConfig+0x2c>)
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <RCC_USBCLKConfig+0x2c>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <RCC_ADCCLKConfig>:
  *             @arg RCC_ADCCLK_APB2_DIV12: ADC clock = APB2/12
  *             @arg RCC_ADCCLK_APB2_DIV16: ADC clock = APB2/16
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
{ 
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    
    /* Clear ADCPS bit */
    RCC->GCFGR &= ~RCC_GCFGR_ADCPS;
 8001484:	4a09      	ldr	r2, [pc, #36]	; (80014ac <RCC_ADCCLKConfig+0x30>)
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <RCC_ADCCLKConfig+0x30>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001492:	6053      	str	r3, [r2, #4]
    /* Set ADCPS bits according to RCC_APB2 value */
    RCC->GCFGR |= RCC_ADCCLK;
 8001494:	4905      	ldr	r1, [pc, #20]	; (80014ac <RCC_ADCCLKConfig+0x30>)
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <RCC_ADCCLKConfig+0x30>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <RCC_LSEConfig>:
  *            @arg RCC_LSE_EN: turn on the LSE 
  *            @arg RCC_LSE_BYPASS: LSE bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint32_t RCC_LSE)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 
    /* Reset LSEEN and LSEBPS bits before configuring the LSE ------------------*/
    RCC->BDCR &= ~(RCC_BDCR_LSEEN);
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <RCC_LSEConfig+0x38>)
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <RCC_LSEConfig+0x38>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
    RCC->BDCR &= ~(RCC_BDCR_LSEBPS);
 80014c4:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <RCC_LSEConfig+0x38>)
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <RCC_LSEConfig+0x38>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6213      	str	r3, [r2, #32]
    
    /* Configure LSE */
    RCC->BDCR |= RCC_LSE;
 80014d0:	4905      	ldr	r1, [pc, #20]	; (80014e8 <RCC_LSEConfig+0x38>)
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <RCC_LSEConfig+0x38>)
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	620b      	str	r3, [r1, #32]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <RCC_LSI_Enable>:
  * @param  NewValue: new value of the LSI.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSI_Enable(TypeState NewValue)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
    
    if (NewValue != DISABLE)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <RCC_LSI_Enable+0x1e>
    {
        RCC->GCSR |= RCC_GCSR_LSIEN;
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <RCC_LSI_Enable+0x34>)
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <RCC_LSI_Enable+0x34>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6253      	str	r3, [r2, #36]	; 0x24
    }
    else
    {
        RCC->GCSR &= ~RCC_GCSR_LSIEN;
    }
}
 8001508:	e005      	b.n	8001516 <RCC_LSI_Enable+0x2a>
    {
        RCC->GCSR |= RCC_GCSR_LSIEN;
    }
    else
    {
        RCC->GCSR &= ~RCC_GCSR_LSIEN;
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <RCC_LSI_Enable+0x34>)
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <RCC_LSI_Enable+0x34>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6253      	str	r3, [r2, #36]	; 0x24
    }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <RCC_RTCCLKConfig>:
  *            @arg RCC_RTCCLKSOURCE_HSE_DIV128: selecte HSE divided by 128 as RTC clock         
  * @note   if using HSE as RTC source, the maximum clock frequency for RTC is 2 MHz.                     
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    /* Clear RTCSEL bit */
    RCC->BDCR &= ~RCC_BDCR_RTCSEL;
 800152c:	4a08      	ldr	r2, [pc, #32]	; (8001550 <RCC_RTCCLKConfig+0x2c>)
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <RCC_RTCCLKConfig+0x2c>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001536:	6213      	str	r3, [r2, #32]
    /* Select the RTC clock source */
    RCC->BDCR |= RCC_RTCCLKSource;
 8001538:	4905      	ldr	r1, [pc, #20]	; (8001550 <RCC_RTCCLKConfig+0x2c>)
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <RCC_RTCCLKConfig+0x2c>)
 800153c:	6a1a      	ldr	r2, [r3, #32]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4313      	orrs	r3, r2
 8001542:	620b      	str	r3, [r1, #32]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <RCC_RTCCLK_Enable>:
  * @param  NewValue: new state of the RTC clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLK_Enable(TypeState NewValue)		
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  
    if (NewValue != DISABLE)
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <RCC_RTCCLK_Enable+0x1e>
    {
        RCC->BDCR |= RCC_BDCR_RTCEN;
 8001564:	4a08      	ldr	r2, [pc, #32]	; (8001588 <RCC_RTCCLK_Enable+0x34>)
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <RCC_RTCCLK_Enable+0x34>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156e:	6213      	str	r3, [r2, #32]
    }
    else
    {
        RCC->BDCR &= ~RCC_BDCR_RTCEN;
    }
}
 8001570:	e005      	b.n	800157e <RCC_RTCCLK_Enable+0x2a>
    {
        RCC->BDCR |= RCC_BDCR_RTCEN;
    }
    else
    {
        RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <RCC_RTCCLK_Enable+0x34>)
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <RCC_RTCCLK_Enable+0x34>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800157c:	6213      	str	r3, [r2, #32]
    }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <RCC_GetClocksFreq>:
/**
  * @brief  Get the frequencies of the CK_SYS, AHB, APB1, APB2, ADC clocks.    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksPara* RCC_Clocks)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0, pllmf = 0, pllmf4=0,pllselect = 0, presc = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
    uint32_t prediv1select = 0, prediv1factor = 0, prediv2factor = 0, pll2mf = 0;
#endif /* GD32F10X_CL */

    
    /* Get CK_SYS source -------------------------------------------------------*/
    temp = RCC->GCFGR & RCC_GCFGR_SCSS;
 80015a8:	4b76      	ldr	r3, [pc, #472]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	61fb      	str	r3, [r7, #28]
  
    switch (temp)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d007      	beq.n	80015c8 <RCC_GetClocksFreq+0x3c>
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d009      	beq.n	80015d0 <RCC_GetClocksFreq+0x44>
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d140      	bne.n	8001642 <RCC_GetClocksFreq+0xb6>
    {
        case 0x00:  /* HSI used as CK_SYS */
        RCC_Clocks->CK_SYS_Frequency = HSI_VALUE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a71      	ldr	r2, [pc, #452]	; (8001788 <RCC_GetClocksFreq+0x1fc>)
 80015c4:	601a      	str	r2, [r3, #0]
        break;
 80015c6:	e040      	b.n	800164a <RCC_GetClocksFreq+0xbe>
        case 0x04:  /* HSE used as CK_SYS */
        RCC_Clocks->CK_SYS_Frequency = HSE_VALUE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a70      	ldr	r2, [pc, #448]	; (800178c <RCC_GetClocksFreq+0x200>)
 80015cc:	601a      	str	r2, [r3, #0]
        break;
 80015ce:	e03c      	b.n	800164a <RCC_GetClocksFreq+0xbe>
            }
        }
    #else
        /* Get PLL clock source and multiplication factor ----------------------*/
        /* Get PLLMF[3:0] */
        pllmf = RCC->GCFGR & RCC_GCFGR_PLLMF_3_0;
 80015d0:	4b6c      	ldr	r3, [pc, #432]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015d8:	61bb      	str	r3, [r7, #24]
        /* Get PLLMF[4] */
        pllmf4 = RCC->GCFGR & RCC_GCFGR_PLLMF_4;
 80015da:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015e2:	617b      	str	r3, [r7, #20]

        pllmf4 = (( pllmf4 >> 27)*15);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	0eda      	lsrs	r2, r3, #27
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
        pllmf = ( pllmf >> 18) + pllmf4+ 2;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	0c9a      	lsrs	r2, r3, #18
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	4413      	add	r3, r2
 80015f8:	3302      	adds	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]

                
        pllselect = RCC->GCFGR & RCC_GCFGR_PLLSEL;
 80015fc:	4b61      	ldr	r3, [pc, #388]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	613b      	str	r3, [r7, #16]
        if (pllselect == 0x00)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d106      	bne.n	800161a <RCC_GetClocksFreq+0x8e>
        {
            /* HSI clock divided by 2 selected as PLL clock source */
            RCC_Clocks->CK_SYS_Frequency = (HSI_VALUE >>HSI_CLOCK_DIVIDED_2) * pllmf;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4a60      	ldr	r2, [pc, #384]	; (8001790 <RCC_GetClocksFreq+0x204>)
 8001610:	fb02 f203 	mul.w	r2, r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
            {
                RCC_Clocks->CK_SYS_Frequency = HSE_VALUE * pllmf;
            }
        }
    #endif/* GD32F10X_CL */
        break;
 8001618:	e017      	b.n	800164a <RCC_GetClocksFreq+0xbe>
            /* HSI clock divided by 2 selected as PLL clock source */
            RCC_Clocks->CK_SYS_Frequency = (HSI_VALUE >>HSI_CLOCK_DIVIDED_2) * pllmf;
        }
        else
        {
            if((RCC->GCFGR & RCC_GCFGR_PLLPREDV) != (uint32_t)RESET )
 800161a:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <RCC_GetClocksFreq+0xa8>
            {
                /* HSE clock divided by 2 */
                RCC_Clocks->CK_SYS_Frequency = (HSE_VALUE >> HSE_CLOCK_DIVIDED_2) * pllmf;
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <RCC_GetClocksFreq+0x208>)
 800162a:	fb02 f203 	mul.w	r2, r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	601a      	str	r2, [r3, #0]
            {
                RCC_Clocks->CK_SYS_Frequency = HSE_VALUE * pllmf;
            }
        }
    #endif/* GD32F10X_CL */
        break;
 8001632:	e00a      	b.n	800164a <RCC_GetClocksFreq+0xbe>
                /* HSE clock divided by 2 */
                RCC_Clocks->CK_SYS_Frequency = (HSE_VALUE >> HSE_CLOCK_DIVIDED_2) * pllmf;
            }
            else
            {
                RCC_Clocks->CK_SYS_Frequency = HSE_VALUE * pllmf;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4a55      	ldr	r2, [pc, #340]	; (800178c <RCC_GetClocksFreq+0x200>)
 8001638:	fb02 f203 	mul.w	r2, r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	601a      	str	r2, [r3, #0]
            }
        }
    #endif/* GD32F10X_CL */
        break;
 8001640:	e003      	b.n	800164a <RCC_GetClocksFreq+0xbe>
        default: /* HSI used as system clock */
        RCC_Clocks->CK_SYS_Frequency = HSI_VALUE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a50      	ldr	r2, [pc, #320]	; (8001788 <RCC_GetClocksFreq+0x1fc>)
 8001646:	601a      	str	r2, [r3, #0]
        break;
 8001648:	bf00      	nop
    }

    /* Get AHB prescaler */
    temp = RCC->GCFGR & RCC_GCFGR_AHBPS;
 800164a:	4b4e      	ldr	r3, [pc, #312]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001652:	61fb      	str	r3, [r7, #28]
    temp = temp >> 4;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	61fb      	str	r3, [r7, #28]
    presc = AHBPrescTable[temp]; 
 800165a:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <RCC_GetClocksFreq+0x20c>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	60fb      	str	r3, [r7, #12]
    /* Get AHB clock frequency */
    RCC_Clocks->AHB_Frequency = RCC_Clocks->CK_SYS_Frequency >> presc;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	40da      	lsrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]
    
    /* Get APB1 prescaler */
    temp = RCC->GCFGR & RCC_GCFGR_APB1PS;
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800167a:	61fb      	str	r3, [r7, #28]
    temp = temp >> 8;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	61fb      	str	r3, [r7, #28]
    presc = APBPrescTable[temp];
 8001682:	4a46      	ldr	r2, [pc, #280]	; (800179c <RCC_GetClocksFreq+0x210>)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	60fb      	str	r3, [r7, #12]
    /* Get APB1 clock frequency */
    RCC_Clocks->APB1_Frequency = RCC_Clocks->AHB_Frequency >> presc;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	40da      	lsrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
    
    /* Get APB2 prescaler */
    temp = RCC->GCFGR & RCC_GCFGR_APB2PS;
 800169a:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80016a2:	61fb      	str	r3, [r7, #28]
    temp = temp >> 11;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	0adb      	lsrs	r3, r3, #11
 80016a8:	61fb      	str	r3, [r7, #28]
    presc = APBPrescTable[temp];
 80016aa:	4a3c      	ldr	r2, [pc, #240]	; (800179c <RCC_GetClocksFreq+0x210>)
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	60fb      	str	r3, [r7, #12]
    /* Get APB2 clock frequency */
    RCC_Clocks->APB2_Frequency = RCC_Clocks->AHB_Frequency >> presc;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	40da      	lsrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60da      	str	r2, [r3, #12]
    
    /* Get ADCCLK clock frequency */
    temp = ((RCC->GCFGR & RCC_GCFGR_ADCPS_2) >>26);
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	0e9b      	lsrs	r3, r3, #26
 80016cc:	61fb      	str	r3, [r7, #28]
    temp += ((RCC->GCFGR & (RCC_GCFGR_ADCPS_0 | RCC_GCFGR_ADCPS_1)) >>14);
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <RCC_GetClocksFreq+0x1f8>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d6:	0b9b      	lsrs	r3, r3, #14
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	61fb      	str	r3, [r7, #28]
    switch (temp)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b07      	cmp	r3, #7
 80016e2:	d849      	bhi.n	8001778 <RCC_GetClocksFreq+0x1ec>
 80016e4:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <RCC_GetClocksFreq+0x160>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	0800170d 	.word	0x0800170d
 80016f0:	08001719 	.word	0x08001719
 80016f4:	08001725 	.word	0x08001725
 80016f8:	08001737 	.word	0x08001737
 80016fc:	08001743 	.word	0x08001743
 8001700:	0800174f 	.word	0x0800174f
 8001704:	08001761 	.word	0x08001761
 8001708:	0800176d 	.word	0x0800176d
    {
        case 0x00: /* ADC Clock is derived from APB2/2 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	085a      	lsrs	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]
        break;
 8001716:	e02f      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x01: /* ADC Clock is derived from APB2/4 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /4);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	089a      	lsrs	r2, r3, #2
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]
        break;
 8001722:	e029      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x02: /* ADC Clock is derived from APB2/6 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /6);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <RCC_GetClocksFreq+0x214>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	089a      	lsrs	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
        break;
 8001734:	e020      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x03: /* ADC Clock is derived from APB2/8 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /8);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
        break;
 8001740:	e01a      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x04: /* ADC Clock is derived from APB2/2 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /2);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	085a      	lsrs	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
        break;
 800174c:	e014      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x05: /* ADC Clock is derived from APB2/12 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /12);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <RCC_GetClocksFreq+0x214>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	611a      	str	r2, [r3, #16]
        break;
 800175e:	e00b      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x06: /* ADC Clock is derived from APB2/8 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /8);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]
        break;
 800176a:	e005      	b.n	8001778 <RCC_GetClocksFreq+0x1ec>
        case 0x07: /* ADC Clock is derived from APB2/16 */
        RCC_Clocks->ADCCLK_Frequency = (RCC_Clocks->APB2_Frequency /16);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	091a      	lsrs	r2, r3, #4
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]
        break;
 8001776:	bf00      	nop
    }
}
 8001778:	bf00      	nop
 800177a:	3724      	adds	r7, #36	; 0x24
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	007a1200 	.word	0x007a1200
 800178c:	00b71b00 	.word	0x00b71b00
 8001790:	003d0900 	.word	0x003d0900
 8001794:	005b8d80 	.word	0x005b8d80
 8001798:	20000014 	.word	0x20000014
 800179c:	20000024 	.word	0x20000024
 80017a0:	aaaaaaab 	.word	0xaaaaaaab

080017a4 <RCC_AHBPeriphClock_Enable>:
  * @param  NewValue: new state of the peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClock_Enable(uint32_t RCC_AHBPeriph, TypeState NewValue)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  
    if (NewValue != DISABLE)
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <RCC_AHBPeriphClock_Enable+0x20>
    {
        RCC->AHBCCR |= RCC_AHBPeriph;
 80017b6:	4909      	ldr	r1, [pc, #36]	; (80017dc <RCC_AHBPeriphClock_Enable+0x38>)
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <RCC_AHBPeriphClock_Enable+0x38>)
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4313      	orrs	r3, r2
 80017c0:	614b      	str	r3, [r1, #20]
    }
    else
    {
        RCC->AHBCCR &= ~RCC_AHBPeriph;
    }
}
 80017c2:	e006      	b.n	80017d2 <RCC_AHBPeriphClock_Enable+0x2e>
    {
        RCC->AHBCCR |= RCC_AHBPeriph;
    }
    else
    {
        RCC->AHBCCR &= ~RCC_AHBPeriph;
 80017c4:	4905      	ldr	r1, [pc, #20]	; (80017dc <RCC_AHBPeriphClock_Enable+0x38>)
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <RCC_AHBPeriphClock_Enable+0x38>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4013      	ands	r3, r2
 80017d0:	614b      	str	r3, [r1, #20]
    }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40021000 	.word	0x40021000

080017e0 <RCC_APB2PeriphClock_Enable>:
  * @param  NewValue: new state of the peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClock_Enable(uint32_t RCC_APB2Periph, TypeState NewValue)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <RCC_APB2PeriphClock_Enable+0x20>
    {
        RCC->APB2CCR |= RCC_APB2Periph;
 80017f2:	4909      	ldr	r1, [pc, #36]	; (8001818 <RCC_APB2PeriphClock_Enable+0x38>)
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <RCC_APB2PeriphClock_Enable+0x38>)
 80017f6:	699a      	ldr	r2, [r3, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	618b      	str	r3, [r1, #24]
    }
    else
    {
        RCC->APB2CCR &= ~RCC_APB2Periph;
    }
}
 80017fe:	e006      	b.n	800180e <RCC_APB2PeriphClock_Enable+0x2e>
    {
        RCC->APB2CCR |= RCC_APB2Periph;
    }
    else
    {
        RCC->APB2CCR &= ~RCC_APB2Periph;
 8001800:	4905      	ldr	r1, [pc, #20]	; (8001818 <RCC_APB2PeriphClock_Enable+0x38>)
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <RCC_APB2PeriphClock_Enable+0x38>)
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	43db      	mvns	r3, r3
 800180a:	4013      	ands	r3, r2
 800180c:	618b      	str	r3, [r1, #24]
    }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40021000 	.word	0x40021000

0800181c <RCC_APB1PeriphClock_Enable>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClock_Enable(uint32_t RCC_APB1Periph, TypeState NewValue)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <RCC_APB1PeriphClock_Enable+0x20>
    {
        RCC->APB1CCR |= RCC_APB1Periph;
 800182e:	4909      	ldr	r1, [pc, #36]	; (8001854 <RCC_APB1PeriphClock_Enable+0x38>)
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <RCC_APB1PeriphClock_Enable+0x38>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4313      	orrs	r3, r2
 8001838:	61cb      	str	r3, [r1, #28]
    }
    else
    {
        RCC->APB1CCR &= ~RCC_APB1Periph;
    }
}
 800183a:	e006      	b.n	800184a <RCC_APB1PeriphClock_Enable+0x2e>
    {
        RCC->APB1CCR |= RCC_APB1Periph;
    }
    else
    {
        RCC->APB1CCR &= ~RCC_APB1Periph;
 800183c:	4905      	ldr	r1, [pc, #20]	; (8001854 <RCC_APB1PeriphClock_Enable+0x38>)
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <RCC_APB1PeriphClock_Enable+0x38>)
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	43db      	mvns	r3, r3
 8001846:	4013      	ands	r3, r2
 8001848:	61cb      	str	r3, [r1, #28]
    }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000

08001858 <RCC_APB2PeriphReset_Enable>:
  * @param  NewValue: new state of the peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphReset_Enable(uint32_t RCC_APB2PeriphRST, TypeState NewValue)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]

    if (NewValue != DISABLE)
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <RCC_APB2PeriphReset_Enable+0x20>
    {
        RCC->APB2RCR |= RCC_APB2PeriphRST;
 800186a:	4909      	ldr	r1, [pc, #36]	; (8001890 <RCC_APB2PeriphReset_Enable+0x38>)
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <RCC_APB2PeriphReset_Enable+0x38>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
    }
    else
    {
        RCC->APB2RCR &= ~RCC_APB2PeriphRST;
    }
}
 8001876:	e006      	b.n	8001886 <RCC_APB2PeriphReset_Enable+0x2e>
    {
        RCC->APB2RCR |= RCC_APB2PeriphRST;
    }
    else
    {
        RCC->APB2RCR &= ~RCC_APB2PeriphRST;
 8001878:	4905      	ldr	r1, [pc, #20]	; (8001890 <RCC_APB2PeriphReset_Enable+0x38>)
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <RCC_APB2PeriphReset_Enable+0x38>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	43db      	mvns	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]
    }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000

08001894 <RCC_APB1PeriphReset_Enable>:
  *     @arg RCC_APB1PERIPH_DACRST
  * @param  NewValue: new state of the peripheral clock (ENABLE or DISABLE).
  * @retval None
  */
void RCC_APB1PeriphReset_Enable(uint32_t RCC_APB1PeriphRST, TypeState NewValue)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <RCC_APB1PeriphReset_Enable+0x20>
    {
        RCC->APB1RCR |= RCC_APB1PeriphRST;
 80018a6:	4909      	ldr	r1, [pc, #36]	; (80018cc <RCC_APB1PeriphReset_Enable+0x38>)
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <RCC_APB1PeriphReset_Enable+0x38>)
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	610b      	str	r3, [r1, #16]
    }
    else
    {
        RCC->APB1RCR &= ~RCC_APB1PeriphRST;
    }
}
 80018b2:	e006      	b.n	80018c2 <RCC_APB1PeriphReset_Enable+0x2e>
    {
        RCC->APB1RCR |= RCC_APB1PeriphRST;
    }
    else
    {
        RCC->APB1RCR &= ~RCC_APB1PeriphRST;
 80018b4:	4905      	ldr	r1, [pc, #20]	; (80018cc <RCC_APB1PeriphReset_Enable+0x38>)
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <RCC_APB1PeriphReset_Enable+0x38>)
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4013      	ands	r3, r2
 80018c0:	610b      	str	r3, [r1, #16]
    }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000

080018d0 <RCC_BackupReset_Enable>:
  * @brief  Force or release the Backup domain reset.
  * @param  NewValue: new state of the Backup domain reset (ENABLE or DISABLE).
  * @retval None
  */
void RCC_BackupReset_Enable(TypeState NewValue)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  
    if (NewValue != DISABLE)
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <RCC_BackupReset_Enable+0x1e>
    {
        RCC->BDCR |= RCC_BDCR_BKPRST;
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <RCC_BackupReset_Enable+0x34>)
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <RCC_BackupReset_Enable+0x34>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	6213      	str	r3, [r2, #32]
    }
    else
    {
        RCC->BDCR &= ~RCC_BDCR_BKPRST;
    }
}
 80018ec:	e005      	b.n	80018fa <RCC_BackupReset_Enable+0x2a>
    {
        RCC->BDCR |= RCC_BDCR_BKPRST;
    }
    else
    {
        RCC->BDCR &= ~RCC_BDCR_BKPRST;
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <RCC_BackupReset_Enable+0x34>)
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <RCC_BackupReset_Enable+0x34>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	6213      	str	r3, [r2, #32]
    }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000

08001908 <RCC_HSEClockMonitor_Enable>:
  * @param  NewValue: new value of the Clock Security System.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSEClockMonitor_Enable(TypeState NewValue)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
    if (NewValue != DISABLE)
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <RCC_HSEClockMonitor_Enable+0x1e>
    {
        RCC->GCCR |= RCC_GCCR_CKMEN;
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <RCC_HSEClockMonitor_Enable+0x34>)
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <RCC_HSEClockMonitor_Enable+0x34>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001922:	6013      	str	r3, [r2, #0]
    }
    else
    {
        RCC->GCCR &= ~RCC_GCCR_CKMEN;
    }
}
 8001924:	e005      	b.n	8001932 <RCC_HSEClockMonitor_Enable+0x2a>
    {
        RCC->GCCR |= RCC_GCCR_CKMEN;
    }
    else
    {
        RCC->GCCR &= ~RCC_GCCR_CKMEN;
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <RCC_HSEClockMonitor_Enable+0x34>)
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <RCC_HSEClockMonitor_Enable+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001930:	6013      	str	r3, [r2, #0]
    }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000

08001940 <RCC_CKOUTSRCConfig>:
  *     @arg RCC_CKOUTSRC_PLLCLK_DIV2: PLL clock divided by 2 selected
  * @retval None
  */

void RCC_CKOUTSRCConfig(uint32_t RCC_CKOUTSRC)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
    
    temp = RCC->GCFGR;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <RCC_CKOUTSRCConfig+0x34>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
    /* Clear CKOUTSRC[2:0] bits */
    temp &= ~(RCC_GCFGR_CKOUTSEL);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001958:	60fb      	str	r3, [r7, #12]
    /* Set the RCC_CKOUTSRC */
    temp |= RCC_CKOUTSRC;
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
    /* Store the new value */
    RCC->GCFGR = temp;
 8001962:	4a04      	ldr	r2, [pc, #16]	; (8001974 <RCC_CKOUTSRCConfig+0x34>)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6053      	str	r3, [r2, #4]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <RCC_INTConfig>:
  *     @arg RCC_INT_PLLSTB: PLL ready interrupt
  * @param  NewValue: new state of the RCC interrupts (ENABLE or DISABLE).
  * @retval None
  */
void RCC_INTConfig(uint8_t RCC_INT, TypeState NewValue)
{  
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	71bb      	strb	r3, [r7, #6]
    if (NewValue != DISABLE)
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <RCC_INTConfig+0x28>
    {
        /* Perform Byte access to RCC_GCIR[14:8] bits to enable the selected interrupts */
        *(__IO uint8_t *) GCIR_BYTE1_ADDRESS |= RCC_INT;
 800198e:	490c      	ldr	r1, [pc, #48]	; (80019c0 <RCC_INTConfig+0x48>)
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <RCC_INTConfig+0x48>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4313      	orrs	r3, r2
 800199a:	b2db      	uxtb	r3, r3
 800199c:	700b      	strb	r3, [r1, #0]
    else
    {
        /* Perform Byte access to RCC_GCIR bits to disable the selected interrupts */
        *(__IO uint8_t *) GCIR_BYTE1_ADDRESS &= (uint8_t)~RCC_INT;
    }
}
 800199e:	e009      	b.n	80019b4 <RCC_INTConfig+0x3c>
        *(__IO uint8_t *) GCIR_BYTE1_ADDRESS |= RCC_INT;
    }
    else
    {
        /* Perform Byte access to RCC_GCIR bits to disable the selected interrupts */
        *(__IO uint8_t *) GCIR_BYTE1_ADDRESS &= (uint8_t)~RCC_INT;
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <RCC_INTConfig+0x48>)
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <RCC_INTConfig+0x48>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4013      	ands	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	700b      	strb	r3, [r1, #0]
    }
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021009 	.word	0x40021009

080019c4 <RCC_GetBitState>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
TypeState RCC_GetBitState(uint8_t RCC_FLAG)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
    uint32_t temp = 0;                    
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
    uint32_t statusreg = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]

    /* Get the RCC register index */
    temp = RCC_FLAG >> 5;
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	60bb      	str	r3, [r7, #8]
    if (temp == 1)               /* The flag to check is in GCCR register */
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d103      	bne.n	80019ec <RCC_GetBitState+0x28>
    {
        statusreg = RCC->GCCR;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <RCC_GetBitState+0x68>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e009      	b.n	8001a00 <RCC_GetBitState+0x3c>
    }
    else if (temp == 2)          /* The flag to check is in BDCR register */
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d103      	bne.n	80019fa <RCC_GetBitState+0x36>
    {
        statusreg = RCC->BDCR;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <RCC_GetBitState+0x68>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e002      	b.n	8001a00 <RCC_GetBitState+0x3c>
    }
    else                       /* The flag to check is in GCSR register */
    {
        statusreg = RCC->GCSR;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <RCC_GetBitState+0x68>)
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	60fb      	str	r3, [r7, #12]
    }

    /* Get the flag position */
    temp = RCC_FLAG & FLAG_MASK;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	60bb      	str	r3, [r7, #8]
    if ((statusreg & ((uint32_t)(1 << temp))) != (uint32_t)RESET)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <RCC_GetBitState+0x5a>
    {
        return SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <RCC_GetBitState+0x5c>
    }
    else
    {
        return RESET;
 8001a1e:	2300      	movs	r3, #0
    }

}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <RCC_ClearBitState>:
  * @brief  Clear the RCC all reset flags.
  * @param  None
  * @retval None
  */
void RCC_ClearBitState(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
    /* Set RSTFC bit to clear all reset flags */
    RCC->GCSR |= RCC_GCSR_RSTFC;
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <RCC_ClearBitState+0x18>)
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <RCC_ClearBitState+0x18>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000

08001a4c <RCC_GetIntBitState>:
  *             @arg RCC_INT_PLLSTB: the flag of PLL ready interrupt
  *             @arg RCC_INT_CKM: the flag of Clock Security System interrupt
  * @retval The new state of RCC_INT (SET or RESET).
  */
TypeState RCC_GetIntBitState(uint8_t RCC_INT)
{  
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  /* Check the status of the RCC interrupt */
    if ((RCC->GCIR & RCC_INT) != (uint32_t)RESET)
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <RCC_GetIntBitState+0x28>)
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <RCC_GetIntBitState+0x1a>
    {
        return SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <RCC_GetIntBitState+0x1c>
    }
    else
    {
        return RESET;
 8001a66:	2300      	movs	r3, #0
    }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000

08001a78 <RCC_ClearIntBitState>:
  *     @arg RCC_INT_CKM: Clock Security System interrupt
  * @retval None
  */

void RCC_ClearIntBitState(uint8_t RCC_INT)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
 
  
    /* Perform RCC_GCIR[23:16] bits to clear the selected interrupt bits */
    *(__IO uint8_t *) GCIR_BYTE2_ADDRESS = RCC_INT;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <RCC_ClearIntBitState+0x1c>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	7013      	strb	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	4002100a 	.word	0x4002100a

08001a98 <RCC_KERNELVOLConfig>:
  *     @arg RCC_KERNEL_VOL1_0: The kernel voltage in Deep-sleep mode is 1.0V
  *     @arg RCC_KERNEL_VOL0_9: The kernel voltage in Deep-sleep mode is 0.9V
  * @retval None
  */
void RCC_KERNELVOLConfig(uint32_t RCC_KERNEL_VOL) 
{ 
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    /* Clear DEEPSLEEP_VC bit */
    RCC->RCC_DEEPSLEEP_VC &= ~RCC_DEEPSLEEP_VC_CLEAR;
 8001aa0:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <RCC_KERNELVOLConfig+0x2c>)
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <RCC_KERNELVOLConfig+0x2c>)
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	6353      	str	r3, [r2, #52]	; 0x34
    /* Set DEEPSLEEP_VC bits according to RCC_KERNEL_VOL value */
    RCC->RCC_DEEPSLEEP_VC |= RCC_KERNEL_VOL;
 8001aac:	4905      	ldr	r1, [pc, #20]	; (8001ac4 <RCC_KERNELVOLConfig+0x2c>)
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <RCC_KERNELVOLConfig+0x2c>)
 8001ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	634b      	str	r3, [r1, #52]	; 0x34
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <USART_DeInit>:
  * @param  NewValue: new value of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
    if (USARTx == USART1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <USART_DeInit+0xa4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d10a      	bne.n	8001aee <USART_DeInit+0x26>
    {
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_USART1, ENABLE);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ade:	f7ff febb 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_USART1, DISABLE);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ae8:	f7ff feb6 	bl	8001858 <RCC_APB2PeriphReset_Enable>
        {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, ENABLE);
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, DISABLE);
        }
    }
}
 8001aec:	e03a      	b.n	8001b64 <USART_DeInit+0x9c>
    if (USARTx == USART1)
    {
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_USART1, ENABLE);
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_USART1, DISABLE);
    }
    else if (USARTx == USART2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <USART_DeInit+0xa8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10a      	bne.n	8001b0c <USART_DeInit+0x44>
    {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART2, ENABLE);
 8001af6:	2101      	movs	r1, #1
 8001af8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001afc:	f7ff feca 	bl	8001894 <RCC_APB1PeriphReset_Enable>
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART2, DISABLE);
 8001b00:	2100      	movs	r1, #0
 8001b02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b06:	f7ff fec5 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, ENABLE);
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, DISABLE);
        }
    }
}
 8001b0a:	e02b      	b.n	8001b64 <USART_DeInit+0x9c>
    else if (USARTx == USART2)
    {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART2, ENABLE);
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART2, DISABLE);
    }
    else if (USARTx == USART3)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <USART_DeInit+0xac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10a      	bne.n	8001b2a <USART_DeInit+0x62>
    {
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART3, ENABLE);
 8001b14:	2101      	movs	r1, #1
 8001b16:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b1a:	f7ff febb 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART3, DISABLE);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001b24:	f7ff feb6 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, ENABLE);
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, DISABLE);
        }
    }
}
 8001b28:	e01c      	b.n	8001b64 <USART_DeInit+0x9c>
    else if (USARTx == USART3)
    {
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART3, ENABLE);
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_USART3, DISABLE);
    }    
    else if (USARTx == UART4)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <USART_DeInit+0xb0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10a      	bne.n	8001b48 <USART_DeInit+0x80>
    {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART4, ENABLE);
 8001b32:	2101      	movs	r1, #1
 8001b34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b38:	f7ff feac 	bl	8001894 <RCC_APB1PeriphReset_Enable>
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART4, DISABLE);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b42:	f7ff fea7 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, ENABLE);
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, DISABLE);
        }
    }
}
 8001b46:	e00d      	b.n	8001b64 <USART_DeInit+0x9c>
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART4, ENABLE);
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART4, DISABLE);
    }
    else
    {
        if (USARTx == UART5)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <USART_DeInit+0xb4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d109      	bne.n	8001b64 <USART_DeInit+0x9c>
        {
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, ENABLE);
 8001b50:	2101      	movs	r1, #1
 8001b52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b56:	f7ff fe9d 	bl	8001894 <RCC_APB1PeriphReset_Enable>
         RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_UART5, DISABLE);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b60:	f7ff fe98 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        }
    }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40004400 	.word	0x40004400
 8001b74:	40004800 	.word	0x40004800
 8001b78:	40004c00 	.word	0x40004c00
 8001b7c:	40005000 	.word	0x40005000

08001b80 <USART_Init>:
  *     @arg UART5
  * @param  USART_InitParaStruct: the struct USART_InitPara pointer.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitPara* USART_InitParaStruct)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    uint32_t divider = 0, apbclock = 0, temp = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    RCC_ClocksPara RCC_ClocksState;
    
    USARTx->CTLR1 &= ~((uint32_t)USART_CTLR1_UEN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	899b      	ldrh	r3, [r3, #12]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	819a      	strh	r2, [r3, #12]
    /* Initialize CTLR2 */ 
    temp = USARTx->CTLR2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	8a1b      	ldrh	r3, [r3, #16]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	61fb      	str	r3, [r7, #28]
    /* Reset stop bits then set it use USART_STBits */
    temp &= ~((uint32_t)USART_CTLR2_STB);
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb4:	61fb      	str	r3, [r7, #28]
    temp |= (uint32_t)USART_InitParaStruct->USART_STBits;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	88db      	ldrh	r3, [r3, #6]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61fb      	str	r3, [r7, #28]
    
    USARTx->CTLR2 = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	821a      	strh	r2, [r3, #16]
    
    /*Initialize CTLR1*/
    temp = USARTx->CTLR1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	899b      	ldrh	r3, [r3, #12]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	61fb      	str	r3, [r7, #28]
    /* Reset WL, PCEN, PM, TEN and REN bits */
    temp &= ~((uint32_t)CTLR1_CLEAR_MASK);
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bd8:	f023 030c 	bic.w	r3, r3, #12
 8001bdc:	61fb      	str	r3, [r7, #28]
    
    /* According to USART_WL,USART_Parity,USART_RxorTx to configure the CTLR1 */
    temp |= (uint32_t)USART_InitParaStruct->USART_WL | USART_InitParaStruct->USART_Parity |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	889a      	ldrh	r2, [r3, #4]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	891b      	ldrh	r3, [r3, #8]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b29a      	uxth	r2, r3
    USART_InitParaStruct->USART_RxorTx;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	895b      	ldrh	r3, [r3, #10]
    temp = USARTx->CTLR1;
    /* Reset WL, PCEN, PM, TEN and REN bits */
    temp &= ~((uint32_t)CTLR1_CLEAR_MASK);
    
    /* According to USART_WL,USART_Parity,USART_RxorTx to configure the CTLR1 */
    temp |= (uint32_t)USART_InitParaStruct->USART_WL | USART_InitParaStruct->USART_Parity |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61fb      	str	r3, [r7, #28]
    USART_InitParaStruct->USART_RxorTx;
    USARTx->CTLR1 = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	819a      	strh	r2, [r3, #12]
    
    /*Initialize CTLR3*/
    temp = USARTx->CTLR3;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8a9b      	ldrh	r3, [r3, #20]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	61fb      	str	r3, [r7, #28]
    /* Reset CTSEN and RTSEN bits */
    temp &= ~((uint32_t)CTLR3_CLEAR_MASK);
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c10:	61fb      	str	r3, [r7, #28]
    
    /* According to USART_HardwareFlowControl to configure the CTLR3 */
    temp |= USART_InitParaStruct->USART_HardwareFlowControl;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	899b      	ldrh	r3, [r3, #12]
 8001c16:	461a      	mov	r2, r3
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61fb      	str	r3, [r7, #28]
    USARTx->CTLR3 = temp;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	829a      	strh	r2, [r3, #20]
    
    /*Initialize USART BRR*/
    RCC_GetClocksFreq(&RCC_ClocksState);
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fcae 	bl	800158c <RCC_GetClocksFreq>
    
    if (USARTx == USART1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <USART_Init+0x104>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d102      	bne.n	8001c3e <USART_Init+0xbe>
    {
        apbclock = RCC_ClocksState.APB2_Frequency;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	623b      	str	r3, [r7, #32]
 8001c3c:	e001      	b.n	8001c42 <USART_Init+0xc2>
    }
    else
    {
        apbclock = RCC_ClocksState.APB1_Frequency;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	623b      	str	r3, [r7, #32]
    }
    
    /* Get integer of baud-rate divide and raction of baud-rate divider */
    divider = (uint32_t)((apbclock) / ((USART_InitParaStruct->USART_BRR)));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a3a      	ldr	r2, [r7, #32]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    temp    = (uint32_t)((apbclock) % ((USART_InitParaStruct->USART_BRR)));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c58:	fb02 f201 	mul.w	r2, r2, r1
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	61fb      	str	r3, [r7, #28]
   
    /* Round the divider : if fractional part i greater than 0.5 increment divider */
    if (temp >=  (USART_InitParaStruct->USART_BRR) / 2)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	085a      	lsrs	r2, r3, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d802      	bhi.n	8001c72 <USART_Init+0xf2>
    {
        divider++;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3301      	adds	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    } 
     
    USARTx->BRR = (uint16_t)divider;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	811a      	strh	r2, [r3, #8]
}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40013800 	.word	0x40013800

08001c88 <USART_ParaInit>:
  * @brief  Initial the struct USART_InitPara
  * @param  USART_InitParaStruct: the struct USART_InitPara pointer
  * @retval None
  */
void USART_ParaInit(USART_InitPara* USART_InitParaStruct)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    /* USART_InitStruct members default value */
    USART_InitParaStruct->USART_BRR = 9600;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c96:	601a      	str	r2, [r3, #0]
    USART_InitParaStruct->USART_WL   =USART_WL_8B;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	809a      	strh	r2, [r3, #4]
    USART_InitParaStruct->USART_STBits =USART_STBITS_1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	80da      	strh	r2, [r3, #6]
    USART_InitParaStruct->USART_Parity =USART_PARITY_RESET;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	811a      	strh	r2, [r3, #8]
    USART_InitParaStruct->USART_RxorTx =USART_RXORTX_RX | USART_RXORTX_TX;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	220c      	movs	r2, #12
 8001cae:	815a      	strh	r2, [r3, #10]
    USART_InitParaStruct->USART_HardwareFlowControl =USART_HARDWAREFLOWCONTROL_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	819a      	strh	r2, [r3, #12]
}   
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <USART_ClockInit>:
  *   structure that contains the configuration information for the specified 
  *   USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitPara* USART_ClockInitStruct)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    uint32_t temp = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
    
    temp = USARTx->CTLR2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8a1b      	ldrh	r3, [r3, #16]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	60fb      	str	r3, [r7, #12]
    /* Clear CKEN, CPL, CPH, LBCP and SSM bits */
    temp &= ~(CTLR2_CLOCK_CLEAR_MASK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cdc:	60fb      	str	r3, [r7, #12]
    
    /* Reset hen set it usethe USART Clock, CPL, CPH, LBCP */
    temp |= (uint32_t)(USART_ClockInitStruct->USART_CKEN | USART_ClockInitStruct->USART_CPL | 
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	885b      	ldrh	r3, [r3, #2]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b29a      	uxth	r2, r3
                       USART_ClockInitStruct->USART_CPH | USART_ClockInitStruct->USART_LBCP);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	889b      	ldrh	r3, [r3, #4]
    temp = USARTx->CTLR2;
    /* Clear CKEN, CPL, CPH, LBCP and SSM bits */
    temp &= ~(CTLR2_CLOCK_CLEAR_MASK);
    
    /* Reset hen set it usethe USART Clock, CPL, CPH, LBCP */
    temp |= (uint32_t)(USART_ClockInitStruct->USART_CKEN | USART_ClockInitStruct->USART_CPL | 
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
                       USART_ClockInitStruct->USART_CPH | USART_ClockInitStruct->USART_LBCP);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	88db      	ldrh	r3, [r3, #6]
    temp = USARTx->CTLR2;
    /* Clear CKEN, CPL, CPH, LBCP and SSM bits */
    temp &= ~(CTLR2_CLOCK_CLEAR_MASK);
    
    /* Reset hen set it usethe USART Clock, CPL, CPH, LBCP */
    temp |= (uint32_t)(USART_ClockInitStruct->USART_CKEN | USART_ClockInitStruct->USART_CPL | 
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
                       USART_ClockInitStruct->USART_CPH | USART_ClockInitStruct->USART_LBCP);
    /* Write to USART CTLR2 */
    USARTx->CTLR2 = (uint16_t)temp;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	821a      	strh	r2, [r3, #16]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <USART_ClockStructInit>:
  * @brief  Initial the struct USART_ClockInitPara.
  * @param  USART_ClockInitParaStruct: the struct USART_ClockInitPara pointer
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitPara* USART_ClockInitParaStruct)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    /*Reset USART_ClockInitStruct members default value */
    USART_ClockInitParaStruct->USART_CKEN = USART_CKEN_RESET;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]
    USART_ClockInitParaStruct->USART_CPL  = USART_CPL_LOW;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	805a      	strh	r2, [r3, #2]
    USART_ClockInitParaStruct->USART_CPH  = USART_CPH_1EDGE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	809a      	strh	r2, [r3, #4]
    USART_ClockInitParaStruct->USART_LBCP = USART_LBCP_DISABLE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	80da      	strh	r2, [r3, #6]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <USART_Enable>:
  * @param  NewValue: new value of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Enable(USART_TypeDef* USARTx, TypeState NewValue)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
    /* Enable or disable the specified USART peripheral by setting the UEN bit in the CTLR1 register */ 
    if (NewValue!= DISABLE)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <USART_Enable+0x24>
    {
        USARTx->CTLR1 |= USART_CTLR1_UEN;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	899b      	ldrh	r3, [r3, #12]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	819a      	strh	r2, [r3, #12]
    }
    else
    {
        USARTx->CTLR1 &= ~((uint16_t)USART_CTLR1_UEN);
    }
}
 8001d62:	e007      	b.n	8001d74 <USART_Enable+0x34>
    {
        USARTx->CTLR1 |= USART_CTLR1_UEN;
    }
    else
    {
        USARTx->CTLR1 &= ~((uint16_t)USART_CTLR1_UEN);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	899b      	ldrh	r3, [r3, #12]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	819a      	strh	r2, [r3, #12]
    }
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop

08001d80 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   This function has to be called before calling USART_Enable() function.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
    /* Clear and set the USART prescaler */
    USARTx->GTPR &= ~((uint16_t)USART_GTPR_PSC);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	8b1b      	ldrh	r3, [r3, #24]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	831a      	strh	r2, [r3, #24]
    
    USARTx->GTPR |= USART_Prescaler;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8b1b      	ldrh	r3, [r3, #24]
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	831a      	strh	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <USART_DataSend>:
  *     @arg UART5
  * @param  Data: the data will be sent.
  * @retval None
  */
void USART_DataSend(USART_TypeDef* USARTx,uint16_t Data)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
    USARTx->DR = (Data & (uint16_t)0x01FF);
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	809a      	strh	r2, [r3, #4]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <USART_DataReceive>:
  *     @arg UART4
  *     @arg UART5
  * @retval The received data.
  */
uint16_t USART_DataReceive(USART_TypeDef* USARTx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
    return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dee:	b29b      	uxth	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop

08001dfc <USART_Address>:
  *     @arg UART5
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_Address(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
    /* Clear the USART address and Set the USART terminal*/
    USARTx->CTLR2 &= ~USART_CTLR2_ADD;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8a1b      	ldrh	r3, [r3, #16]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f023 030f 	bic.w	r3, r3, #15
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	821a      	strh	r2, [r3, #16]
    
    USARTx->CTLR2 |=USART_Address;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	8a1b      	ldrh	r3, [r3, #16]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	821a      	strh	r2, [r3, #16]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <USART_MuteMode_Enable>:
  * @param  NewValue: the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteMode_Enable(USART_TypeDef* USARTx, TypeState NewValue)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
    /* By setting the MEN bit in the CTLR1 register enable or disable the USART's mute mode*/
    if (NewValue != DISABLE)
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <USART_MuteMode_Enable+0x24>
    {
        USARTx->CTLR1 |= USART_CTLR1_RWU;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	899b      	ldrh	r3, [r3, #12]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	819a      	strh	r2, [r3, #12]
    }
    else
    {
        USARTx->CTLR1 &=~USART_CTLR1_RWU;
    }
}
 8001e56:	e007      	b.n	8001e68 <USART_MuteMode_Enable+0x34>
    {
        USARTx->CTLR1 |= USART_CTLR1_RWU;
    }
    else
    {
        USARTx->CTLR1 &=~USART_CTLR1_RWU;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	899b      	ldrh	r3, [r3, #12]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f023 0302 	bic.w	r3, r3, #2
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	819a      	strh	r2, [r3, #12]
    }
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <USART_MuteModeWakeUp_Set>:
  *     @arg UART5
  * @param  USART_WakeUp: This parameter can be: USART_WAKEUP_IDLELINE or USART_WAKEUP_ADDRESSMARK.
  * @retval None
  */
void USART_MuteModeWakeUp_Set(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
    USARTx->CTLR1 &= ~((uint16_t)USART_CTLR1_WM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	899b      	ldrh	r3, [r3, #12]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	819a      	strh	r2, [r3, #12]
    USARTx->CTLR1 |= USART_WakeUp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	899b      	ldrh	r3, [r3, #12]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	819a      	strh	r2, [r3, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <USART_SetLINBDLength>:
  * @param  USART_LINBreakDetectLength: This parameter can be:USART_LINBREAKDETECTLENGTH_10B
                                                           or USART_LINBREAKDETECTLENGTH_11B.
  * @retval None
  */
void USART_SetLINBDLength(USART_TypeDef* USARTx,uint16_t USART_LINBreakDetectLength)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
    USARTx->CTLR2 &= ~((uint16_t)USART_CTLR2_LBDL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8a1b      	ldrh	r3, [r3, #16]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f023 0320 	bic.w	r3, r3, #32
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	821a      	strh	r2, [r3, #16]
    USARTx->CTLR2 |= USART_LINBreakDetectLength;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8a1b      	ldrh	r3, [r3, #16]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	821a      	strh	r2, [r3, #16]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop

08001ee4 <USART_LIN_Enable>:
  * @param  NewValue: the USART LIN mode value.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LIN_Enable(USART_TypeDef* USARTx,TypeState NewValue)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
    /* By setting the LINEN bit in the CTLR2 register enable or disable the USART's LIN mode */
    if (NewValue != DISABLE)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <USART_LIN_Enable+0x24>
    {
        USARTx->CTLR2 |= USART_CTLR2_LMEN;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8a1b      	ldrh	r3, [r3, #16]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	821a      	strh	r2, [r3, #16]
    }
    else
    {
        USARTx->CTLR2 &=~((uint16_t)USART_CTLR2_LMEN);
    }
}
 8001f06:	e007      	b.n	8001f18 <USART_LIN_Enable+0x34>
    {
        USARTx->CTLR2 |= USART_CTLR2_LMEN;
    }
    else
    {
        USARTx->CTLR2 &=~((uint16_t)USART_CTLR2_LMEN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	8a1b      	ldrh	r3, [r3, #16]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	821a      	strh	r2, [r3, #16]
    }
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop

08001f24 <USART_HalfDuplex_Enable>:
  * @param  NewValue: the USART Half-duplex mode value.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplex_Enable(USART_TypeDef* USARTx, TypeState NewValue)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
    /* By setting the HDEN bit in the CTLR3 register enable or disable the Half-duplex mode */ 
    if (NewValue  != DISABLE)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <USART_HalfDuplex_Enable+0x24>
    {
        USARTx->CTLR3 |= USART_CTLR3_HDEN;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	8a9b      	ldrh	r3, [r3, #20]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f043 0308 	orr.w	r3, r3, #8
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	829a      	strh	r2, [r3, #20]
    }
    else
    {
        USARTx->CTLR3 &= ~USART_CTLR3_HDEN;
    }
}
 8001f46:	e007      	b.n	8001f58 <USART_HalfDuplex_Enable+0x34>
    {
        USARTx->CTLR3 |= USART_CTLR3_HDEN;
    }
    else
    {
        USARTx->CTLR3 &= ~USART_CTLR3_HDEN;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8a9b      	ldrh	r3, [r3, #20]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f023 0308 	bic.w	r3, r3, #8
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	829a      	strh	r2, [r3, #20]
    }
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop

08001f64 <USART_GuardTime_Set>:
  *     @arg USART3
  * @param  USART_GuardTime: the USART guard time.
  * @retval None
  */
void USART_GuardTime_Set(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
    /* Set the USART guard time */
    USARTx->GTPR &= ~((uint16_t)USART_GTPR_GT);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8b1b      	ldrh	r3, [r3, #24]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	831a      	strh	r2, [r3, #24]
    
    USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	8b1b      	ldrh	r3, [r3, #24]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	831a      	strh	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop

08001fa0 <USART_SmartCard_Enable>:
  * @param  NewValue: the Smart Card mode value.
  *   This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void USART_SmartCard_Enable(USART_TypeDef* USARTx,TypeState NewValue)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
    /* By setting the SCEN bit in the CTLR3 register enable or disable the USART's Smart Card mode */
    if (NewValue != DISABLE)
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <USART_SmartCard_Enable+0x24>
    {
        USARTx->CTLR3 |= USART_CTLR3_SCEN;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8a9b      	ldrh	r3, [r3, #20]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f043 0320 	orr.w	r3, r3, #32
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	829a      	strh	r2, [r3, #20]
    }
    else
    {
        USARTx->CTLR3 &= ~((uint16_t)USART_CTLR3_SCEN);
    }
}
 8001fc2:	e007      	b.n	8001fd4 <USART_SmartCard_Enable+0x34>
    {
        USARTx->CTLR3 |= USART_CTLR3_SCEN;
    }
    else
    {
        USARTx->CTLR3 &= ~((uint16_t)USART_CTLR3_SCEN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	8a9b      	ldrh	r3, [r3, #20]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f023 0320 	bic.w	r3, r3, #32
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	829a      	strh	r2, [r3, #20]
    }
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop

08001fe0 <USART_SmartCardNACK_Enable>:
  * @param  NewValue: the NACK transmission state.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_SmartCardNACK_Enable(USART_TypeDef* USARTx,TypeState NewValue)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
    /* By setting the NACK bit in the CTLR3 register Enable or disable NACK transmission */
    if (NewValue != DISABLE)
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <USART_SmartCardNACK_Enable+0x24>
    {
        USARTx->CTLR3 |= USART_CTLR3_NACK;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8a9b      	ldrh	r3, [r3, #20]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f043 0310 	orr.w	r3, r3, #16
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	829a      	strh	r2, [r3, #20]
    }
    else
    {
        USARTx->CTLR3 &= ~((uint32_t)USART_CTLR3_NACK);
    }
}
 8002002:	e007      	b.n	8002014 <USART_SmartCardNACK_Enable+0x34>
    {
        USARTx->CTLR3 |= USART_CTLR3_NACK;
    }
    else
    {
        USARTx->CTLR3 &= ~((uint32_t)USART_CTLR3_NACK);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8a9b      	ldrh	r3, [r3, #20]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f023 0310 	bic.w	r3, r3, #16
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	829a      	strh	r2, [r3, #20]
    }
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <USART_DMA_Enable>:
  * @param  NewValue: the DMA Request sources state.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_DMA_Enable(USART_TypeDef* USARTx, uint16_t USART_DMAEnable, TypeState NewValue)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
    /* Enable or disable the DMA transfer for transmission or reception by setting the DENT and/or
    DENR bits in the USART CTLR3 register */
    if (NewValue != DISABLE)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <USART_DMA_Enable+0x28>
    {
        USARTx->CTLR3 |= USART_DMAEnable;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	8a9b      	ldrh	r3, [r3, #20]
 800203a:	b29a      	uxth	r2, r3
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4313      	orrs	r3, r2
 8002040:	b29a      	uxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	829a      	strh	r2, [r3, #20]
    }
    else
    {
        USARTx->CTLR3 &= ~USART_DMAEnable;
    }
}
 8002046:	e00c      	b.n	8002062 <USART_DMA_Enable+0x42>
    {
        USARTx->CTLR3 |= USART_DMAEnable;
    }
    else
    {
        USARTx->CTLR3 &= ~USART_DMAEnable;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8a9b      	ldrh	r3, [r3, #20]
 800204c:	b29b      	uxth	r3, r3
 800204e:	b21a      	sxth	r2, r3
 8002050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002054:	43db      	mvns	r3, r3
 8002056:	b21b      	sxth	r3, r3
 8002058:	4013      	ands	r3, r2
 800205a:	b21b      	sxth	r3, r3
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	829a      	strh	r2, [r3, #20]
    }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <USART_IrDA_Set>:
  *     @arg UART5
  * @param  USART_IrDAMode: This parameter can be:USART_IRDAMODE_LOWPOWER or USART_IRDAMODE_NORMAL.
  * @retval None
  */
void USART_IrDA_Set(USART_TypeDef* USARTx,uint16_t USART_IrDAMode)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
    USARTx->CTLR3 &= ~((uint16_t)USART_CTLR3_IRLP);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8a9b      	ldrh	r3, [r3, #20]
 800207c:	b29b      	uxth	r3, r3
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	b29a      	uxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	829a      	strh	r2, [r3, #20]
    USARTx->CTLR3 |= USART_IrDAMode;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	8a9b      	ldrh	r3, [r3, #20]
 800208c:	b29a      	uxth	r2, r3
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	4313      	orrs	r3, r2
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	829a      	strh	r2, [r3, #20]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop

080020a4 <USART_IrDA_Enable>:
  * @param  NewValue: the IrDA mode value.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDA_Enable(USART_TypeDef* USARTx,TypeState NewValue)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
    /* By setting the IREN bit in the CTLR3 register enable or disable the USART's IrDA interface */
    if (NewValue != DISABLE)
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <USART_IrDA_Enable+0x24>
    {
        USARTx->CTLR3 |= USART_CTLR3_IREN;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8a9b      	ldrh	r3, [r3, #20]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	829a      	strh	r2, [r3, #20]
    }
    else
    {
        USARTx->CTLR3 &= ~((uint16_t)USART_CTLR3_IREN);
    }
}
 80020c6:	e007      	b.n	80020d8 <USART_IrDA_Enable+0x34>
    {
        USARTx->CTLR3 |= USART_CTLR3_IREN;
    }
    else
    {
        USARTx->CTLR3 &= ~((uint16_t)USART_CTLR3_IREN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8a9b      	ldrh	r3, [r3, #20]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f023 0302 	bic.w	r3, r3, #2
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	829a      	strh	r2, [r3, #20]
    }
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <USART_GetBitState>:
  *     @arg USART_FLAG_FE:   Framing Error flag.
  *     @arg USART_FLAG_PE:   Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
TypeState USART_GetBitState(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
    if ((USARTx->STR & USART_FLAG) != (uint16_t)RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <USART_GetBitState+0x20>
    {
        return  SET;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <USART_GetBitState+0x22>
    }
    else
    {
        return  RESET;
 8002104:	2300      	movs	r3, #0
    }
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <USART_INT_Set>:
  * @param  NewValue: the USART interrupt State.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_INT_Set(USART_TypeDef* USARTx, uint16_t USART_INT, TypeState NewValue)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	807b      	strh	r3, [r7, #2]
 800211c:	4613      	mov	r3, r2
 800211e:	707b      	strb	r3, [r7, #1]
    uint32_t  intpos=0 , usartreg=0;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
    uint32_t  usartxbase = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
    
    usartxbase = (uint32_t)USARTx;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	617b      	str	r3, [r7, #20]
    
    /* Get the USART register index and the interrupt position */
    usartreg = ((uint8_t)(USART_INT) >> 0x05); 
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	b2db      	uxtb	r3, r3
 8002138:	60fb      	str	r3, [r7, #12]
    intpos = USART_INT & INT_MASK;
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	613b      	str	r3, [r7, #16]
    
    /* Get the interrupt from which register: CTLR1,CTLR2 OR CTLR3 */
    if (usartreg == 0x01) 
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d103      	bne.n	8002150 <USART_INT_Set+0x40>
    {
        usartxbase += 0x0C;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	330c      	adds	r3, #12
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e009      	b.n	8002164 <USART_INT_Set+0x54>
    }
    else if (usartreg == 0x02) 
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d103      	bne.n	800215e <USART_INT_Set+0x4e>
    {
        usartxbase += 0x10;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3310      	adds	r3, #16
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e002      	b.n	8002164 <USART_INT_Set+0x54>
    }
    else 
    {
       usartxbase += 0x14;       
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3314      	adds	r3, #20
 8002162:	617b      	str	r3, [r7, #20]
    }
    if (NewValue != DISABLE)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <USART_INT_Set+0x6e>
    {
        *(__IO uint32_t*)usartxbase  |= (((uint32_t)0x01) << intpos);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	6811      	ldr	r1, [r2, #0]
 8002170:	2001      	movs	r0, #1
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	fa00 f202 	lsl.w	r2, r0, r2
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *(__IO uint32_t*)usartxbase &= ~(((uint32_t)0x01) << intpos);
    }
}
 800217c:	e009      	b.n	8002192 <USART_INT_Set+0x82>
    {
        *(__IO uint32_t*)usartxbase  |= (((uint32_t)0x01) << intpos);
    }
    else
    {
        *(__IO uint32_t*)usartxbase &= ~(((uint32_t)0x01) << intpos);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	6811      	ldr	r1, [r2, #0]
 8002184:	2001      	movs	r0, #1
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	fa00 f202 	lsl.w	r2, r0, r2
 800218c:	43d2      	mvns	r2, r2
 800218e:	400a      	ands	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
    }
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <USART_ClearBitState>:
  *   - TBE flag bit is cleared only by a write to the USART_DR register 
  *     (USART_DataSend()).
  * @retval None
  */
void USART_ClearBitState(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
    USARTx->STR =(uint16_t)~ USART_FLAG;
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	801a      	strh	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <USART_GetINTBitState>:
  *     @arg USART_INT_NE                                                   
  *     @arg USART_INT_FE
  * @retval The new state of USART_INT (SET or RESET).
  */
TypeState USART_GetINTBitState(USART_TypeDef* USARTx, uint16_t USART_INT)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
    uint16_t bitpos = 0, itmask = 0, usartreg = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	81bb      	strh	r3, [r7, #12]
 80021cc:	2300      	movs	r3, #0
 80021ce:	81fb      	strh	r3, [r7, #14]
 80021d0:	2300      	movs	r3, #0
 80021d2:	817b      	strh	r3, [r7, #10]
    
    /* Get the USART register index and the interrupt position */
    usartreg = (((uint8_t)USART_INT) >> 0x05);
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	817b      	strh	r3, [r7, #10]
    
    itmask = (USART_INT)&(INT_MASK);
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	81fb      	strh	r3, [r7, #14]
    
    itmask = (uint16_t)0x01 << itmask;
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	2201      	movs	r2, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	81fb      	strh	r3, [r7, #14]
    
    if (usartreg == 0x01)
 80021f0:	897b      	ldrh	r3, [r7, #10]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d106      	bne.n	8002204 <USART_GetINTBitState+0x48>
    {
        itmask &= USARTx->CTLR1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	899b      	ldrh	r3, [r3, #12]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	4013      	ands	r3, r2
 8002200:	81fb      	strh	r3, [r7, #14]
 8002202:	e00f      	b.n	8002224 <USART_GetINTBitState+0x68>
    }
    else
    {
        if (usartreg == 0x02) 
 8002204:	897b      	ldrh	r3, [r7, #10]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d106      	bne.n	8002218 <USART_GetINTBitState+0x5c>
        {
            itmask &= USARTx->CTLR2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8a1b      	ldrh	r3, [r3, #16]
 800220e:	b29a      	uxth	r2, r3
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	4013      	ands	r3, r2
 8002214:	81fb      	strh	r3, [r7, #14]
 8002216:	e005      	b.n	8002224 <USART_GetINTBitState+0x68>
        }
        else 
        {
            itmask &= USARTx->CTLR3;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8a9b      	ldrh	r3, [r3, #20]
 800221c:	b29a      	uxth	r2, r3
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	4013      	ands	r3, r2
 8002222:	81fb      	strh	r3, [r7, #14]
        }
    }
    
    bitpos = USART_INT >> 0x08;
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	81bb      	strh	r3, [r7, #12]
    bitpos = (uint32_t)0x01 << bitpos;
 800222a:	89bb      	ldrh	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	81bb      	strh	r3, [r7, #12]
    bitpos &= USARTx->STR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b29a      	uxth	r2, r3
 800223a:	89bb      	ldrh	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	81bb      	strh	r3, [r7, #12]
    if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002240:	89fb      	ldrh	r3, [r7, #14]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <USART_GetINTBitState+0x94>
 8002246:	89bb      	ldrh	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <USART_GetINTBitState+0x94>
    {
        return  SET;
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <USART_GetINTBitState+0x96>
    }
    else
    {
        return  RESET;
 8002250:	2300      	movs	r3, #0
    }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <USART_ClearINTBitState>:
  *   - TBE interrupt bit is cleared only by a write to the USART_DR register 
  *     (USART_DataSend()).
  * @retval None
  */
void USART_ClearINTBitState(USART_TypeDef* USARTx, uint16_t USART_INT)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
    uint16_t bitpos = 0, itmask = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	81fb      	strh	r3, [r7, #14]
 800226c:	2300      	movs	r3, #0
 800226e:	81bb      	strh	r3, [r7, #12]
    
    bitpos = USART_INT >> 0x08;
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	81fb      	strh	r3, [r7, #14]
    itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	2201      	movs	r2, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	81bb      	strh	r3, [r7, #12]
    USARTx->STR = (uint16_t)~itmask;
 8002280:	89bb      	ldrh	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	801a      	strh	r2, [r3, #0]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <USART_SendBreak>:
  *     @arg UART4
  *     @arg UART5
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  
  /* Send break command */
  USARTx->CTLR1 |= USART_CTLR1_SBKCMD;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	899b      	ldrh	r3, [r3, #12]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	819a      	strh	r2, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <USB_Mouse_Init>:
  * @brief  Main routine will construct a USB mouse
  * @param  None
  * @retval None
  */
void USB_Mouse_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
    print("enter\n");
 80022bc:	4813      	ldr	r0, [pc, #76]	; (800230c <USB_Mouse_Init+0x54>)
 80022be:	f7fe f96b 	bl	8000598 <print>
    /* Hardware platform initialization */
    USB_HWP_Init();
 80022c2:	f000 f8d9 	bl	8002478 <USB_HWP_Init>
    print("%d\n", __LINE__);
 80022c6:	211e      	movs	r1, #30
 80022c8:	4811      	ldr	r0, [pc, #68]	; (8002310 <USB_Mouse_Init+0x58>)
 80022ca:	f7fe f965 	bl	8000598 <print>
    /* Configure usb clock */
    USB_HWP_ClockConfig();
 80022ce:	f000 f92d 	bl	800252c <USB_HWP_ClockConfig>
    print("%d\n", __LINE__);
 80022d2:	2121      	movs	r1, #33	; 0x21
 80022d4:	480e      	ldr	r0, [pc, #56]	; (8002310 <USB_Mouse_Init+0x58>)
 80022d6:	f7fe f95f 	bl	8000598 <print>
    /* Configure USB interrupt */
    USB_HWP_USBINTConfig();
 80022da:	f000 f933 	bl	8002544 <USB_HWP_USBINTConfig>
  
    print("%d\n", __LINE__);
 80022de:	2125      	movs	r1, #37	; 0x25
 80022e0:	480b      	ldr	r0, [pc, #44]	; (8002310 <USB_Mouse_Init+0x58>)
 80022e2:	f7fe f959 	bl	8000598 <print>

    /* USB device configuration */
    USBD_Init(&USB_Device_dev,
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <USB_Mouse_Init+0x5c>)
 80022e8:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <USB_Mouse_Init+0x60>)
 80022ea:	490c      	ldr	r1, [pc, #48]	; (800231c <USB_Mouse_Init+0x64>)
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <USB_Mouse_Init+0x68>)
 80022ee:	f002 f86d 	bl	80043cc <USBD_Init>
              &USER_desc,
              &USBD_HID_cb,
              &USER_cb);
    print("%d\n", __LINE__);
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <USB_Mouse_Init+0x58>)
 80022f6:	f7fe f94f 	bl	8000598 <print>

    /* Connect the USB device */
    USBD_Connect(&USB_Device_dev);
 80022fa:	4809      	ldr	r0, [pc, #36]	; (8002320 <USB_Mouse_Init+0x68>)
 80022fc:	f002 f848 	bl	8004390 <USBD_Connect>
    print("%d\n", __LINE__);
 8002300:	2130      	movs	r1, #48	; 0x30
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <USB_Mouse_Init+0x58>)
 8002304:	f7fe f948 	bl	8000598 <print>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	08007420 	.word	0x08007420
 8002310:	08007428 	.word	0x08007428
 8002314:	20000050 	.word	0x20000050
 8002318:	200000fc 	.word	0x200000fc
 800231c:	2000002c 	.word	0x2000002c
 8002320:	20000150 	.word	0x20000150

08002324 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void  NMI_Handler (void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void  HardFault_Handler (void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
    /* Go to infinite loop when Hard Fault exception occurs */
    while (1)
    {
    }
 8002334:	e7fe      	b.n	8002334 <HardFault_Handler+0x4>
 8002336:	bf00      	nop

08002338 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void  SVC_Handler (void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void  PendSV_Handler (void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <SysTick_Handler>:
  * @brief  This function sends the input report repeatedly.
  * @param  None
  * @retval None
  */
void  SysTick_Handler (void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
    uint8_t *buf;

    /* Get usb mouse position */
    buf = USBD_MOUSE_GetPos();
 8002356:	f000 f861 	bl	800241c <USBD_MOUSE_GetPos>
 800235a:	6078      	str	r0, [r7, #4]

    /* Change the cursor position */
    if((buf[0] != 0) || (buf[1] != 0))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d104      	bne.n	800236e <SysTick_Handler+0x1e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <SysTick_Handler+0x28>
    {
        /* Send mouse report */
        USBD_HID_SendReport (&USB_Device_dev, buf, 2);
 800236e:	2202      	movs	r2, #2
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4803      	ldr	r0, [pc, #12]	; (8002380 <SysTick_Handler+0x30>)
 8002374:	f003 fada 	bl	800592c <USBD_HID_SendReport>
    }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000150 	.word	0x20000150

08002384 <USB_LP_CAN1_RX0_IRQHandler>:
  * @brief  This function handles USB FS Handler.
  * @param  None
  * @retval None
  */
void  USB_LP_CAN1_RX0_IRQHandler (void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
    USB_Ifr();
 8002388:	f001 ff58 	bl	800423c <USB_Ifr>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI14_15_IRQ Handler.
  * @param  None
  * @retval None
  */
void  EXTI15_10_IRQHandler (void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
    if (EXTI_GetIntBitState(TAMPER_KEY_EXTI_LINE) != RESET)
 8002394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002398:	f000 ffd0 	bl	800333c <EXTI_GetIntBitState>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <EXTI15_10_IRQHandler+0x36>
    {
        /* Check if the remote wakeup feature is enabled */
        if (USB_Device_dev.dev.DevRemoteWakeup)
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <EXTI15_10_IRQHandler+0x3c>)
 80023a4:	795b      	ldrb	r3, [r3, #5]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <EXTI15_10_IRQHandler+0x2e>
        {
            /* Exit low power mode and re-configure clocks */
            USBD_Resume(RESUME_INTERNAL);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f003 f97a 	bl	80056a4 <USBD_Resume>
            USB_Device_dev.dev.device_cur_status = USB_Device_dev.dev.device_old_status;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <EXTI15_10_IRQHandler+0x3c>)
 80023b2:	791a      	ldrb	r2, [r3, #4]
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <EXTI15_10_IRQHandler+0x3c>)
 80023b6:	70da      	strb	r2, [r3, #3]

            /*Disable Remote wakeup Feature*/
            USB_Device_dev.dev.DevRemoteWakeup = 0;
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <EXTI15_10_IRQHandler+0x3c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	715a      	strb	r2, [r3, #5]
        }

        /* Clear the EXTI line pending bit */
        EXTI_ClearIntBitState(TAMPER_KEY_EXTI_LINE);
 80023be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023c2:	f000 ffd5 	bl	8003370 <EXTI_ClearIntBitState>
    }
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000150 	.word	0x20000150

080023d0 <USBWakeUp_IRQHandler>:
  * @brief  This function handles USB WakeUp interrupt request.
  * @param  None
  * @retval None
  */
void  USBWakeUp_IRQHandler (void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
    EXTI_ClearIntBitState(EXTI_LINE18);
 80023d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80023d8:	f000 ffca 	bl	8003370 <EXTI_ClearIntBitState>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}

080023e0 <MouseState>:
  * @brief  To get usb mouse state
  * @param  None
  * @retval The direction value
*/
uint8_t  MouseState (void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
    /* Have pressed "right" key */
    if (!GD_EVAL_KeyGetState(KEY_RIGHT))
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 fae7 	bl	80029b8 <GD_EVAL_KeyGetState>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <MouseState+0x14>
    {
        return MOUSE_RIGHT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e010      	b.n	8002416 <MouseState+0x36>
    }

    /* Have pressed "left" key */
    if (!GD_EVAL_KeyGetState(KEY_LEFT))
 80023f4:	2002      	movs	r0, #2
 80023f6:	f000 fadf 	bl	80029b8 <GD_EVAL_KeyGetState>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <MouseState+0x24>
    {
        return MOUSE_LEFT;
 8002400:	2302      	movs	r3, #2
 8002402:	e008      	b.n	8002416 <MouseState+0x36>
    }

    /* Have pressed "down" key */
    if (!GD_EVAL_KeyGetState(KEY_DOWN))
 8002404:	2003      	movs	r0, #3
 8002406:	f000 fad7 	bl	80029b8 <GD_EVAL_KeyGetState>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <MouseState+0x34>
    {
        return MOUSE_DOWN;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <MouseState+0x36>
        return MOUSE_UP;
    }
#endif

    /* No pressed any key */
    return 0;
 8002414:	2300      	movs	r3, #0

}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop

0800241c <USBD_MOUSE_GetPos>:
  * @brief  Get usb mouse position
  * @param  None
  * @retval Pointer to report buffer
*/
static uint8_t  *USBD_MOUSE_GetPos (void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
    int8_t x = 0, y = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	2300      	movs	r3, #0
 8002428:	71bb      	strb	r3, [r7, #6]
    static uint8_t MOUSE_Buffer[2];

    switch (MouseState())
 800242a:	f7ff ffd9 	bl	80023e0 <MouseState>
 800242e:	4603      	mov	r3, r0
 8002430:	2b02      	cmp	r3, #2
 8002432:	d004      	beq.n	800243e <USBD_MOUSE_GetPos+0x22>
 8002434:	2b03      	cmp	r3, #3
 8002436:	d007      	beq.n	8002448 <USBD_MOUSE_GetPos+0x2c>
 8002438:	2b01      	cmp	r3, #1
 800243a:	d00a      	beq.n	8002452 <USBD_MOUSE_GetPos+0x36>
            y -= CURSOR_STEP;
            break;
#endif

        default:
            break;
 800243c:	e00e      	b.n	800245c <USBD_MOUSE_GetPos+0x40>
    static uint8_t MOUSE_Buffer[2];

    switch (MouseState())
    {
        case MOUSE_LEFT:
            x -= CURSOR_STEP;
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	3b06      	subs	r3, #6
 8002442:	b2db      	uxtb	r3, r3
 8002444:	71fb      	strb	r3, [r7, #7]
            break;
 8002446:	e009      	b.n	800245c <USBD_MOUSE_GetPos+0x40>

        case MOUSE_RIGHT:
            x += CURSOR_STEP;
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	3306      	adds	r3, #6
 800244c:	b2db      	uxtb	r3, r3
 800244e:	71fb      	strb	r3, [r7, #7]
            break;
 8002450:	e004      	b.n	800245c <USBD_MOUSE_GetPos+0x40>

        case MOUSE_DOWN:
            y += CURSOR_STEP;
 8002452:	79bb      	ldrb	r3, [r7, #6]
 8002454:	3306      	adds	r3, #6
 8002456:	b2db      	uxtb	r3, r3
 8002458:	71bb      	strb	r3, [r7, #6]
            break;
 800245a:	bf00      	nop

        default:
            break;
    }

    MOUSE_Buffer[0] = x;
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <USBD_MOUSE_GetPos+0x58>)
 8002460:	701a      	strb	r2, [r3, #0]
    MOUSE_Buffer[1] = y;
 8002462:	79ba      	ldrb	r2, [r7, #6]
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <USBD_MOUSE_GetPos+0x58>)
 8002466:	705a      	strb	r2, [r3, #1]

    return MOUSE_Buffer; 
 8002468:	4b02      	ldr	r3, [pc, #8]	; (8002474 <USBD_MOUSE_GetPos+0x58>)
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000138 	.word	0x20000138

08002478 <USB_HWP_Init>:
  * @brief  Initialize hardware platform
  * @param  None
  * @retval None
  */
void  USB_HWP_Init (void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_LOW_PWR_MODE_SUPPORT
    EXTI_InitPara EXTI_InitStructure;
#endif

    /* Keys Configuration*/  
    GD_EVAL_KeyInit(KEY_RIGHT, KEY_MODE_GPIO);
 800247e:	2100      	movs	r1, #0
 8002480:	2001      	movs	r0, #1
 8002482:	f000 fa2b 	bl	80028dc <GD_EVAL_KeyInit>
    GD_EVAL_KeyInit(KEY_LEFT,  KEY_MODE_GPIO);
 8002486:	2100      	movs	r1, #0
 8002488:	2002      	movs	r0, #2
 800248a:	f000 fa27 	bl	80028dc <GD_EVAL_KeyInit>
    GD_EVAL_KeyInit(KEY_DOWN,  KEY_MODE_GPIO);
 800248e:	2100      	movs	r1, #0
 8002490:	2003      	movs	r0, #3
 8002492:	f000 fa23 	bl	80028dc <GD_EVAL_KeyInit>

    GD_EVAL_KeyInit(KEY_TAMPER, KEY_MODE_EXTI);
 8002496:	2101      	movs	r1, #1
 8002498:	2000      	movs	r0, #0
 800249a:	f000 fa1f 	bl	80028dc <GD_EVAL_KeyInit>

    /* Enable usb pull-up pin clock */ 
    RCC_APB2PeriphClock_Enable(RCC_APB2Periph_GPIO_PULLUP, ENABLE);
 800249e:	2101      	movs	r1, #1
 80024a0:	2010      	movs	r0, #16
 80024a2:	f7ff f99d 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

    /* Configure usb pull-up pin */
    GPIO_InitStructure.GPIO_Pin = USB_PULLUP_PIN;
 80024a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024aa:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_OUT_PP;
 80024ac:	2310      	movs	r3, #16
 80024ae:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 80024b0:	2303      	movs	r3, #3
 80024b2:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(USB_PULLUP, &GPIO_InitStructure);
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4619      	mov	r1, r3
 80024ba:	480e      	ldr	r0, [pc, #56]	; (80024f4 <USB_HWP_Init+0x7c>)
 80024bc:	f7fe fba2 	bl	8000c04 <GPIO_Init>

#ifdef USB_DEVICE_LOW_PWR_MODE_SUPPORT

    /* Enable the power clock */
    RCC_APB1PeriphClock_Enable(RCC_APB1PERIPH_PWR, ENABLE);
 80024c0:	2101      	movs	r1, #1
 80024c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80024c6:	f7ff f9a9 	bl	800181c <RCC_APB1PeriphClock_Enable>

    /* USB wakeup EXTI line configuration */
    EXTI_ClearIntBitState(EXTI_LINE18);
 80024ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80024ce:	f000 ff4f 	bl	8003370 <EXTI_ClearIntBitState>
    EXTI_InitStructure.EXTI_LINE = EXTI_LINE18; 
 80024d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024d6:	607b      	str	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80024d8:	2308      	movs	r3, #8
 80024da:	727b      	strb	r3, [r7, #9]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80024dc:	2300      	movs	r3, #0
 80024de:	723b      	strb	r3, [r7, #8]
    EXTI_InitStructure.EXTI_LINEEnable = ENABLE;
 80024e0:	2301      	movs	r3, #1
 80024e2:	72bb      	strb	r3, [r7, #10]
    EXTI_Init(&EXTI_InitStructure);
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fe82 	bl	80031f0 <EXTI_Init>

#endif
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40011000 	.word	0x40011000

080024f8 <USB_Cable_Config>:
  * @brief  Configure usb cable
  * @param  NewState: cable state
  * @Retval None
  */
void  USB_Cable_Config (TypeState NewState)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
    if (NewState == ENABLE)
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <USB_Cable_Config+0x1c>
    {
        GPIO_SetBits(USB_PULLUP, USB_PULLUP_PIN);
 8002508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250c:	4806      	ldr	r0, [pc, #24]	; (8002528 <USB_Cable_Config+0x30>)
 800250e:	f7fe fc95 	bl	8000e3c <GPIO_SetBits>
    }
    else
    {
        GPIO_ResetBits(USB_PULLUP, USB_PULLUP_PIN);
    }
}
 8002512:	e004      	b.n	800251e <USB_Cable_Config+0x26>
    {
        GPIO_SetBits(USB_PULLUP, USB_PULLUP_PIN);
    }
    else
    {
        GPIO_ResetBits(USB_PULLUP, USB_PULLUP_PIN);
 8002514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002518:	4803      	ldr	r0, [pc, #12]	; (8002528 <USB_Cable_Config+0x30>)
 800251a:	f7fe fc9d 	bl	8000e58 <GPIO_ResetBits>
    }
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40011000 	.word	0x40011000

0800252c <USB_HWP_ClockConfig>:
  * @brief  Enable usb clock
  * @param  None
  * @retval None
  */
void  USB_HWP_ClockConfig (void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
    /* Configure USB model clock from PLL clock */
    RCC_USBCLKConfig(RCC_USBCLK_PLL_DIV1_5);
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe ff8b 	bl	800144c <RCC_USBCLKConfig>

    /* Enable USB APB1 clock */
    RCC_APB1PeriphClock_Enable(RCC_APB1PERIPH_USB, ENABLE);
 8002536:	2101      	movs	r1, #1
 8002538:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800253c:	f7ff f96e 	bl	800181c <RCC_APB1PeriphClock_Enable>
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <USB_HWP_USBINTConfig>:
  * @brief  Configure usb global interrupt
  * @param  None
  * @retval None
  */
void  USB_HWP_USBINTConfig (void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
    NVIC_InitPara NVIC_InitStructure;

    /* 1 bit for pre-emption priority, 3 bits for subpriority */
    NVIC_PRIGroup_Enable(NVIC_PRIGROUP_1);
 800254a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800254e:	f000 ff1d 	bl	800338c <NVIC_PRIGroup_Enable>

    /* Enable the USB low priority interrupt */
    NVIC_InitStructure.NVIC_IRQ = USB_LP_CAN1_RX0_IRQn;
 8002552:	2314      	movs	r3, #20
 8002554:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQPreemptPriority = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQSubPriority = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQEnable = ENABLE;
 800255e:	2301      	movs	r3, #1
 8002560:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	4618      	mov	r0, r3
 8002566:	f000 ff23 	bl	80033b0 <NVIC_Init>

#ifdef USB_DEVICE_LOW_PWR_MODE_SUPPORT

    /* Enable the USB Wake-up interrupt */
    NVIC_InitStructure.NVIC_IRQ = USBWakeUp_IRQn;
 800256a:	232a      	movs	r3, #42	; 0x2a
 800256c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQPreemptPriority = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQSubPriority = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQEnable = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	4618      	mov	r0, r3
 800257e:	f000 ff17 	bl	80033b0 <NVIC_Init>

#endif
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <USBD_USER_DevDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_DevDesc (uint8_t USBSpeed, uint16_t *len)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	71fb      	strb	r3, [r7, #7]
    *len = sizeof(USBD_DeviceDesc);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2212      	movs	r2, #18
 800259c:	801a      	strh	r2, [r3, #0]

    return (uint8_t*)USBD_DeviceDesc;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <USBD_USER_DevDesc+0x20>)
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	0800742c 	.word	0x0800742c

080025b0 <USBD_USER_LANGIDStrDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_LANGIDStrDesc (uint8_t USBSpeed, uint16_t *len)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
    *len = sizeof(USBD_LANGIDDesc);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2204      	movs	r2, #4
 80025c0:	801a      	strh	r2, [r3, #0]

    return (uint8_t*)USBD_LANGIDDesc;
 80025c2:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <USBD_USER_LANGIDStrDesc+0x20>)
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	08007440 	.word	0x08007440

080025d4 <USBD_USER_ProdStrDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_ProdStrDesc (uint8_t USBSpeed, uint16_t *len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
    USBD_GetUnicodeString((uint8_t*)USBD_PRODUCT_STRING, USBD_StrDesc, len);
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4904      	ldr	r1, [pc, #16]	; (80025f4 <USBD_USER_ProdStrDesc+0x20>)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <USBD_USER_ProdStrDesc+0x24>)
 80025e6:	f002 fca3 	bl	8004f30 <USBD_GetUnicodeString>

    return USBD_StrDesc;
 80025ea:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <USBD_USER_ProdStrDesc+0x20>)
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200001cc 	.word	0x200001cc
 80025f8:	08007444 	.word	0x08007444

080025fc <USBD_USER_MFCStrDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_MFCStrDesc (uint8_t USBSpeed, uint16_t *len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	71fb      	strb	r3, [r7, #7]
    USBD_GetUnicodeString((uint8_t*)USBD_MFC_STRING, USBD_StrDesc, len);
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4904      	ldr	r1, [pc, #16]	; (800261c <USBD_USER_MFCStrDesc+0x20>)
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <USBD_USER_MFCStrDesc+0x24>)
 800260e:	f002 fc8f 	bl	8004f30 <USBD_GetUnicodeString>

    return USBD_StrDesc;
 8002612:	4b02      	ldr	r3, [pc, #8]	; (800261c <USBD_USER_MFCStrDesc+0x20>)
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200001cc 	.word	0x200001cc
 8002620:	08007460 	.word	0x08007460

08002624 <USBD_USER_SerialStrDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_SerialStrDesc (uint8_t USBSpeed, uint16_t *len)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
    *len = USB_SERIAL_STRING_SIZE;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2206      	movs	r2, #6
 8002634:	801a      	strh	r2, [r3, #0]

    return USBD_SerialString;
 8002636:	4b03      	ldr	r3, [pc, #12]	; (8002644 <USBD_USER_SerialStrDesc+0x20>)
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20000048 	.word	0x20000048

08002648 <USBD_USER_ConfigStrDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_ConfigStrDesc (uint8_t USBSpeed, uint16_t *len)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
    USBD_GetUnicodeString((uint8_t*)USBD_CONFIGURATION_STRING, USBD_StrDesc, len);
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	4904      	ldr	r1, [pc, #16]	; (8002668 <USBD_USER_ConfigStrDesc+0x20>)
 8002658:	4804      	ldr	r0, [pc, #16]	; (800266c <USBD_USER_ConfigStrDesc+0x24>)
 800265a:	f002 fc69 	bl	8004f30 <USBD_GetUnicodeString>

    return USBD_StrDesc;  
 800265e:	4b02      	ldr	r3, [pc, #8]	; (8002668 <USBD_USER_ConfigStrDesc+0x20>)
}
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001cc 	.word	0x200001cc
 800266c:	08007478 	.word	0x08007478

08002670 <USBD_USER_ItfStrDesc>:
  * @param  USBSpeed: usb device speed
  * @param  len: data length pointer
  * @retval Descriptor buffer pointer
  */
uint8_t *  USBD_USER_ItfStrDesc (uint8_t USBSpeed, uint16_t *len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
    USBD_GetUnicodeString((uint8_t*)USBD_INTERFACE_STRING, USBD_StrDesc, len);
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	4904      	ldr	r1, [pc, #16]	; (8002690 <USBD_USER_ItfStrDesc+0x20>)
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <USBD_USER_ItfStrDesc+0x24>)
 8002682:	f002 fc55 	bl	8004f30 <USBD_GetUnicodeString>

    return USBD_StrDesc;
 8002686:	4b02      	ldr	r3, [pc, #8]	; (8002690 <USBD_USER_ItfStrDesc+0x20>)
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200001cc 	.word	0x200001cc
 8002694:	0800748c 	.word	0x0800748c

08002698 <Get_SerialString>:
  * @brief  Create the serial number string descriptor 
  * @param  None
  * @retval None
  */
void  Get_SerialString (void)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
      uint32_t DeviceSerial = *(uint32_t*)DEVICE_ID;
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <Get_SerialString+0x44>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	607b      	str	r3, [r7, #4]

      if(DeviceSerial != 0)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <Get_SerialString+0x38>
      {
          USBD_SerialString[2] = (uint8_t)DeviceSerial;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <Get_SerialString+0x48>)
 80026b0:	709a      	strb	r2, [r3, #2]
          USBD_SerialString[3] = (uint8_t)(DeviceSerial >> 8);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <Get_SerialString+0x48>)
 80026ba:	70da      	strb	r2, [r3, #3]
          USBD_SerialString[4] = (uint8_t)(DeviceSerial >> 16);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0c1b      	lsrs	r3, r3, #16
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <Get_SerialString+0x48>)
 80026c4:	711a      	strb	r2, [r3, #4]
          USBD_SerialString[5] = (uint8_t)(DeviceSerial >> 24);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0e1b      	lsrs	r3, r3, #24
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <Get_SerialString+0x48>)
 80026ce:	715a      	strb	r2, [r3, #5]
      }
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40022100 	.word	0x40022100
 80026e0:	20000048 	.word	0x20000048

080026e4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da0b      	bge.n	8002710 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80026f8:	490d      	ldr	r1, [pc, #52]	; (8002730 <NVIC_SetPriority+0x4c>)
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	3b04      	subs	r3, #4
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800270e:	e009      	b.n	8002724 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002710:	4908      	ldr	r1, [pc, #32]	; (8002734 <NVIC_SetPriority+0x50>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00
 8002734:	e000e100 	.word	0xe000e100

08002738 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d301      	bcc.n	800274e <SysTick_Config+0x16>
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <SysTick_Config+0x40>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8002756:	210f      	movs	r1, #15
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f7ff ffc2 	bl	80026e4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <SysTick_Config+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SysTick_Config+0x40>)
 8002768:	2207      	movs	r2, #7
 800276a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <USBD_USER_DeviceInit>:
  * @brief  Device initialization for user
  * @param  None
  * @retval None
  */
void  USBD_USER_DeviceInit (void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    /* Systick used for periodic check(10ms) mouse position */
    SysTick_Config(SystemCoreClock / 100);
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <USBD_USER_DeviceInit+0x1c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <USBD_USER_DeviceInit+0x20>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ffd3 	bl	8002738 <SysTick_Config>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	51eb851f 	.word	0x51eb851f

080027a0 <USBD_USER_DeviceReset>:
  * @brief  Device reset handle for user
  * @param  USBSpeed: usb device speed
  * @retval None
  */
void  USBD_USER_DeviceReset (uint8_t USBSpeed)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <USBD_USER_DeviceConfigured>:
  * @brief  Device configuration for user
  * @param  None
  * @retval None
  */
void  USBD_USER_DeviceConfigured (void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <USBD_USER_DeviceSuspended>:
  * @brief  Device suspend handle for user
  * @param  None
  * @retval None
  */
void  USBD_USER_DeviceSuspended (void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <USBD_USER_DeviceResumed>:
  * @brief  Device resume handle for user
  * @param  None
  * @retval None
  */
void  USBD_USER_DeviceResumed (void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <GD_EVAL_LEDInit>:
  * @brief  Configures LED GPIO
  * @param  LedNum: Specifies the Led to be configured
  * @retval None
  */
void  GD_EVAL_LEDInit (Led_TypeDef LedNum)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitPara  GPIO_InitStructure;

    /* Enable the LED Clock */
    RCC_APB2PeriphClock_Enable(GPIO_CLK[LedNum], ENABLE);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4a13      	ldr	r2, [pc, #76]	; (8002834 <GD_EVAL_LEDInit+0x5c>)
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fff7 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

    /* Configure the LED pin */
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN[LedNum];
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4a10      	ldr	r2, [pc, #64]	; (8002838 <GD_EVAL_LEDInit+0x60>)
 80027f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027fa:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_OUT_PP;
 80027fc:	2310      	movs	r3, #16
 80027fe:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 8002800:	2303      	movs	r3, #3
 8002802:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIO_PORT[LedNum], &GPIO_InitStructure);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4a0d      	ldr	r2, [pc, #52]	; (800283c <GD_EVAL_LEDInit+0x64>)
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	f107 020c 	add.w	r2, r7, #12
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe f9f6 	bl	8000c04 <GPIO_Init>
    GPIO_PORT[LedNum]->BCR = GPIO_PIN[LedNum];
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4a08      	ldr	r2, [pc, #32]	; (800283c <GD_EVAL_LEDInit+0x64>)
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	4905      	ldr	r1, [pc, #20]	; (8002838 <GD_EVAL_LEDInit+0x60>)
 8002824:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002828:	615a      	str	r2, [r3, #20]
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	080074a8 	.word	0x080074a8
 8002838:	080074a0 	.word	0x080074a0
 800283c:	20000064 	.word	0x20000064

08002840 <GD_EVAL_LEDOn>:
  * @brief  Turn on selected LED 
  * @param  LedNum: Specifies the Led to be turn on
  * @retval None
  */
void GD_EVAL_LEDOn(Led_TypeDef LedNum)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
    GPIO_PORT[LedNum]->BOR = GPIO_PIN[LedNum];
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <GD_EVAL_LEDOn+0x28>)
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	4905      	ldr	r1, [pc, #20]	; (800286c <GD_EVAL_LEDOn+0x2c>)
 8002856:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800285a:	611a      	str	r2, [r3, #16]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000064 	.word	0x20000064
 800286c:	080074a0 	.word	0x080074a0

08002870 <GD_EVAL_LEDOff>:
  * @brief  Turn off selected LED
  * @param  Led: Specifies the Led to be turn off 
  * @retval None
  */
void GD_EVAL_LEDOff(Led_TypeDef LedNum)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
    GPIO_PORT[LedNum]->BCR = GPIO_PIN[LedNum];
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	4a06      	ldr	r2, [pc, #24]	; (8002898 <GD_EVAL_LEDOff+0x28>)
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	79fa      	ldrb	r2, [r7, #7]
 8002884:	4905      	ldr	r1, [pc, #20]	; (800289c <GD_EVAL_LEDOff+0x2c>)
 8002886:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800288a:	615a      	str	r2, [r3, #20]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000064 	.word	0x20000064
 800289c:	080074a0 	.word	0x080074a0

080028a0 <GD_EVAL_LEDToggle>:
  * @brief  Toggle the selected LED.
  * @param  Led: Specifies the Led to be toggled
  * @retval None
  */
void GD_EVAL_LEDToggle(Led_TypeDef LedNum)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
    GPIO_PORT[LedNum]->DOR ^= GPIO_PIN[LedNum];
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <GD_EVAL_LEDToggle+0x34>)
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	79fa      	ldrb	r2, [r7, #7]
 80028b4:	4907      	ldr	r1, [pc, #28]	; (80028d4 <GD_EVAL_LEDToggle+0x34>)
 80028b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028ba:	68d2      	ldr	r2, [r2, #12]
 80028bc:	79f9      	ldrb	r1, [r7, #7]
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <GD_EVAL_LEDToggle+0x38>)
 80028c0:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80028c4:	404a      	eors	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000064 	.word	0x20000064
 80028d8:	080074a0 	.word	0x080074a0

080028dc <GD_EVAL_KeyInit>:
  *            @arg KEY_MODE_EXTI: Key will be connected to EXTI line with interrupt
  *                                generation capability
  * @retval None
  */
void GD_EVAL_KeyInit(Key_TypeDef KeyNum, KeyMode_TypeDef Key_Mode)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	460a      	mov	r2, r1
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	4613      	mov	r3, r2
 80028ea:	71bb      	strb	r3, [r7, #6]
    GPIO_InitPara GPIO_InitStructure;
    EXTI_InitPara EXTI_InitStructure;
    NVIC_InitPara NVIC_InitStructure;

    /* Enable the KEY Clock */
    RCC_APB2PeriphClock_Enable(KEY_CLK[KeyNum] | RCC_APB2PERIPH_AF, ENABLE);
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	4a2b      	ldr	r2, [pc, #172]	; (800299c <GD_EVAL_KeyInit+0xc0>)
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	2101      	movs	r1, #1
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe ff70 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

    /* Configure Button pin as input */
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IPD;
 8002900:	2328      	movs	r3, #40	; 0x28
 8002902:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Pin = KEY_PIN[KeyNum];
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4a26      	ldr	r2, [pc, #152]	; (80029a0 <GD_EVAL_KeyInit+0xc4>)
 8002908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800290c:	82bb      	strh	r3, [r7, #20]
    GPIO_Init(KEY_PORT[KeyNum], &GPIO_InitStructure);
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <GD_EVAL_KeyInit+0xc8>)
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	f107 0214 	add.w	r2, r7, #20
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe f971 	bl	8000c04 <GPIO_Init>

    if (Key_Mode == KEY_MODE_EXTI)
 8002922:	79bb      	ldrb	r3, [r7, #6]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d134      	bne.n	8002992 <GD_EVAL_KeyInit+0xb6>
    {
        /* Connect Button EXTI Line to Button GPIO Pin */
        GPIO_EXTILineConfig(KEY_PORT_SOURCE[KeyNum], KEY_PIN_SOURCE[KeyNum]);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <GD_EVAL_KeyInit+0xcc>)
 800292c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002930:	b2d8      	uxtb	r0, r3
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <GD_EVAL_KeyInit+0xd0>)
 8002936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe fb95 	bl	800106c <GPIO_EXTILineConfig>

        /* Enable and set key EXTI Interrupt to the lowest priority */
        NVIC_InitStructure.NVIC_IRQ = KEY_IRQn[KeyNum];
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <GD_EVAL_KeyInit+0xd4>)
 8002946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	723b      	strb	r3, [r7, #8]
        NVIC_InitStructure.NVIC_IRQPreemptPriority = 2;
 800294e:	2302      	movs	r3, #2
 8002950:	727b      	strb	r3, [r7, #9]
        NVIC_InitStructure.NVIC_IRQSubPriority = 0;
 8002952:	2300      	movs	r3, #0
 8002954:	72bb      	strb	r3, [r7, #10]
        NVIC_InitStructure.NVIC_IRQEnable = ENABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	72fb      	strb	r3, [r7, #11]
        NVIC_Init(&NVIC_InitStructure);
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd26 	bl	80033b0 <NVIC_Init>

        /* Configure key EXTI line */
        EXTI_InitStructure.EXTI_LINE = KEY_EXTI_LINE[KeyNum];
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <GD_EVAL_KeyInit+0xd8>)
 8002968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296c:	60fb      	str	r3, [r7, #12]
        EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800296e:	2300      	movs	r3, #0
 8002970:	743b      	strb	r3, [r7, #16]
        EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 8002972:	230c      	movs	r3, #12
 8002974:	747b      	strb	r3, [r7, #17]
        EXTI_InitStructure.EXTI_LINEEnable = ENABLE;
 8002976:	2301      	movs	r3, #1
 8002978:	74bb      	strb	r3, [r7, #18]
        EXTI_Init(&EXTI_InitStructure);
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fc36 	bl	80031f0 <EXTI_Init>

        EXTI_ClearIntBitState(KEY_EXTI_LINE[KeyNum]);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <GD_EVAL_KeyInit+0xd8>)
 8002988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fcef 	bl	8003370 <EXTI_ClearIntBitState>
    }
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	080074c0 	.word	0x080074c0
 80029a0:	080074b8 	.word	0x080074b8
 80029a4:	20000074 	.word	0x20000074
 80029a8:	080074d8 	.word	0x080074d8
 80029ac:	080074e0 	.word	0x080074e0
 80029b0:	080074e8 	.word	0x080074e8
 80029b4:	080074d0 	.word	0x080074d0

080029b8 <GD_EVAL_KeyGetState>:
  *            @arg KEY_LEFT: Left key
  *            @arg KEY_DOWN: Down key
  * @retval The Button GPIO pin value.
  */
uint8_t GD_EVAL_KeyGetState(Key_TypeDef Button)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
    return GPIO_ReadInputBit(KEY_PORT[Button], KEY_PIN[Button]);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <GD_EVAL_KeyGetState+0x2c>)
 80029c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <GD_EVAL_KeyGetState+0x30>)
 80029ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029d2:	4619      	mov	r1, r3
 80029d4:	f7fe f9e6 	bl	8000da4 <GPIO_ReadInputBit>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000074 	.word	0x20000074
 80029e8:	080074b8 	.word	0x080074b8

080029ec <GD_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *         contains the configuration information for the specified USART peripheral
  * @retval None
  */
void GD_EVAL_COMInit(COM_TypeDef ComNum, USART_InitPara *USART_InitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
    GPIO_InitPara GPIO_InitStructure;
    NVIC_InitPara NVIC_InitStructure;

    /* Enable GPIO clock */
    RCC_APB2PeriphClock_Enable(COM_TX_PORT_CLK[ComNum] | COM_RX_PORT_CLK[ComNum] | RCC_APB2PERIPH_AF, ENABLE);
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	4a39      	ldr	r2, [pc, #228]	; (8002ae0 <GD_EVAL_COMInit+0xf4>)
 80029fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	4938      	ldr	r1, [pc, #224]	; (8002ae4 <GD_EVAL_COMInit+0xf8>)
 8002a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fee5 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

    /* Connect PXx to USARTx_Tx */
    if(ComNum == COM1)
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <GD_EVAL_COMInit+0x3c>
    {
        /* Enable USART1 clock */
        RCC_APB2PeriphClock_Enable(EVAL_COM1_CLK, ENABLE); 
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a22:	f7fe fedd 	bl	80017e0 <RCC_APB2PeriphClock_Enable>
 8002a26:	e007      	b.n	8002a38 <GD_EVAL_COMInit+0x4c>
    }
    else if(ComNum == COM2)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d104      	bne.n	8002a38 <GD_EVAL_COMInit+0x4c>
    {
        /* Enable USART2 clock */
        RCC_APB1PeriphClock_Enable(EVAL_COM2_CLK, ENABLE);
 8002a2e:	2101      	movs	r1, #1
 8002a30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a34:	f7fe fef2 	bl	800181c <RCC_APB1PeriphClock_Enable>
    }

    /* Configure USART Tx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[ComNum];
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ae8 <GD_EVAL_COMInit+0xfc>)
 8002a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a40:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_AF_PP;
 8002a42:	2318      	movs	r3, #24
 8002a44:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;;
 8002a46:	2303      	movs	r3, #3
 8002a48:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(COM_TX_PORT[ComNum], &GPIO_InitStructure);
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <GD_EVAL_COMInit+0x100>)
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	f107 020c 	add.w	r2, r7, #12
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe f8d3 	bl	8000c04 <GPIO_Init>

    /* Configure USART Rx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[ComNum];
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <GD_EVAL_COMInit+0x104>)
 8002a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a66:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IN_FLOATING;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	73fb      	strb	r3, [r7, #15]
    GPIO_Init(COM_RX_PORT[ComNum], &GPIO_InitStructure);
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <GD_EVAL_COMInit+0x108>)
 8002a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a74:	f107 020c 	add.w	r2, r7, #12
 8002a78:	4611      	mov	r1, r2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f8c2 	bl	8000c04 <GPIO_Init>

    /* USART configuration */
    USART_Init(COM_USART[ComNum], USART_InitStruct);
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <GD_EVAL_COMInit+0x10c>)
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f878 	bl	8001b80 <USART_Init>

    /* Enable USART */
    USART_Enable(COM_USART[ComNum], ENABLE);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <GD_EVAL_COMInit+0x10c>)
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f950 	bl	8001d40 <USART_Enable>

    /* Enable the usart1 receive interrupt */
    USART_INT_Set(COM_USART[ComNum], USART_INT_RBNE, ENABLE);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <GD_EVAL_COMInit+0x10c>)
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f240 5125 	movw	r1, #1317	; 0x525
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fb2e 	bl	8002110 <USART_INT_Set>

    /* Configure usart1 receive interrupt */
    NVIC_InitStructure.NVIC_IRQ = COM_IRQn[ComNum];
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <GD_EVAL_COMInit+0x110>)
 8002ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQPreemptPriority = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQSubPriority = 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQEnable = ENABLE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
 8002acc:	f107 0308 	add.w	r3, r7, #8
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fc6d 	bl	80033b0 <NVIC_Init>
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	080074f8 	.word	0x080074f8
 8002ae4:	08007500 	.word	0x08007500
 8002ae8:	08007508 	.word	0x08007508
 8002aec:	2000008c 	.word	0x2000008c
 8002af0:	0800750c 	.word	0x0800750c
 8002af4:	20000094 	.word	0x20000094
 8002af8:	20000084 	.word	0x20000084
 8002afc:	08007510 	.word	0x08007510

08002b00 <SD_LowLevel_DeInit>:
  * @brief  DeInitializes the SDIO interface.
  * @param  None
  * @retval None
  */
void  SD_LowLevel_DeInit (void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
    GPIO_InitPara  GPIO_InitStructure;

    /*!< Disable SDIO Clock */
    SDIO_Clock_Enable(DISABLE);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 fdaa 	bl	8003660 <SDIO_Clock_Enable>

    /*!< Set Power State to OFF */
    SDIO_SetPWRState(SDIO_PWRSTATE_OFF);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f000 fdc5 	bl	800369c <SDIO_SetPWRState>

    /*!< DeInitializes the SDIO peripheral */
    SDIO_DeInit();
 8002b12:	f000 fd35 	bl	8003580 <SDIO_DeInit>

    /*!< Disable the SDIO AHB Clock */
    RCC_AHBPeriphClock_Enable(RCC_AHBPERIPH_SDIO, DISABLE);
 8002b16:	2100      	movs	r1, #0
 8002b18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b1c:	f7fe fe42 	bl	80017a4 <RCC_AHBPeriphClock_Enable>

    /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002b20:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002b24:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IN_FLOATING;
 8002b26:	2304      	movs	r3, #4
 8002b28:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4807      	ldr	r0, [pc, #28]	; (8002b4c <SD_LowLevel_DeInit+0x4c>)
 8002b30:	f7fe f868 	bl	8000c04 <GPIO_Init>

    /*!< Configure PD.02 CMD line */
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_2;
 8002b34:	2304      	movs	r3, #4
 8002b36:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b38:	1d3b      	adds	r3, r7, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4804      	ldr	r0, [pc, #16]	; (8002b50 <SD_LowLevel_DeInit+0x50>)
 8002b3e:	f7fe f861 	bl	8000c04 <GPIO_Init>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	40011400 	.word	0x40011400

08002b54 <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void  SD_LowLevel_Init (void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
    GPIO_InitPara  GPIO_InitStructure;

    /*!< GPIOC and GPIOD Periph clock enable */
    RCC_APB2PeriphClock_Enable(RCC_APB2PERIPH_GPIOC | RCC_APB2PERIPH_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	20b0      	movs	r0, #176	; 0xb0
 8002b5e:	f7fe fe3f 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

    /*!< Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8002b62:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002b66:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_AF_PP;
 8002b6c:	2318      	movs	r3, #24
 8002b6e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <SD_LowLevel_Init+0x64>)
 8002b76:	f7fe f845 	bl	8000c04 <GPIO_Init>

    /*!< Configure PD.02 CMD line */
    GPIO_InitStructure.GPIO_Pin = GPIO_PIN_2;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	80bb      	strh	r3, [r7, #4]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	480e      	ldr	r0, [pc, #56]	; (8002bbc <SD_LowLevel_Init+0x68>)
 8002b84:	f7fe f83e 	bl	8000c04 <GPIO_Init>

    /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
    GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 8002b88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b8c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IPU;
 8002b8e:	2348      	movs	r3, #72	; 0x48
 8002b90:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <SD_LowLevel_Init+0x6c>)
 8002b98:	f7fe f834 	bl	8000c04 <GPIO_Init>

    /*!< Enable the SDIO AHB Clock */
    RCC_AHBPeriphClock_Enable(RCC_AHBPERIPH_SDIO, ENABLE);
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ba2:	f7fe fdff 	bl	80017a4 <RCC_AHBPeriphClock_Enable>

    /*!< Enable the DMA2 Clock */
    RCC_AHBPeriphClock_Enable(SD_SDIO_DMA_CLK, ENABLE);
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f7fe fdfb 	bl	80017a4 <RCC_AHBPeriphClock_Enable>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40011400 	.word	0x40011400
 8002bc0:	40011c00 	.word	0x40011c00

08002bc4 <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void  SD_LowLevel_DMA_TxConfig (uint32_t *BufferSRC, uint32_t BufferSize)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08e      	sub	sp, #56	; 0x38
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
    DMA_InitPara DMA_InitStructure;

    DMA_ClearBitState(SD_SDIO_DMA_FLAG_TC | SD_SDIO_DMA_FLAG_TE | SD_SDIO_DMA_FLAG_HT | SD_SDIO_DMA_FLAG_GL);
 8002bce:	481a      	ldr	r0, [pc, #104]	; (8002c38 <SD_LowLevel_DMA_TxConfig+0x74>)
 8002bd0:	f000 fa8e 	bl	80030f0 <DMA_ClearBitState>

    /*!< DMA2 Channel4 disable */
    DMA_Enable(SD_SDIO_DMA_CHANNEL, DISABLE);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4819      	ldr	r0, [pc, #100]	; (8002c3c <SD_LowLevel_DMA_TxConfig+0x78>)
 8002bd8:	f000 fa12 	bl	8003000 <DMA_Enable>

    /*!< SDIO DMA CHANNEL Config */
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <SD_LowLevel_DMA_TxConfig+0x7c>)
 8002bde:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PERIPHERALDST;
 8002be4:	2310      	movs	r3, #16
 8002be6:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PERIPHERALINC_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_MemoryInc = DMA_MEMORYINC_ENABLE;
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PERIPHERALDATASIZE_WORD;
 8002bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MEMORYDATASIZE_WORD;
 8002bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStructure.DMA_Mode = DMA_MODE_NORMAL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStructure.DMA_Priority = DMA_PRIORITY_HIGH;
 8002c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_InitStructure.DMA_MTOM = DMA_MEMTOMEM_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
    DMA_Init(SD_SDIO_DMA_CHANNEL, &DMA_InitStructure);
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	4619      	mov	r1, r3
 8002c16:	4809      	ldr	r0, [pc, #36]	; (8002c3c <SD_LowLevel_DMA_TxConfig+0x78>)
 8002c18:	f000 f98a 	bl	8002f30 <DMA_Init>

    DMA_INTConfig(SD_SDIO_DMA_CHANNEL, DMA_INT_TC, ENABLE);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4806      	ldr	r0, [pc, #24]	; (8002c3c <SD_LowLevel_DMA_TxConfig+0x78>)
 8002c22:	f000 fa09 	bl	8003038 <DMA_INTConfig>

    /*!< SDIO DMA CHANNEL enable */
    DMA_Enable(SD_SDIO_DMA_CHANNEL, ENABLE);
 8002c26:	2101      	movs	r1, #1
 8002c28:	4804      	ldr	r0, [pc, #16]	; (8002c3c <SD_LowLevel_DMA_TxConfig+0x78>)
 8002c2a:	f000 f9e9 	bl	8003000 <DMA_Enable>
}
 8002c2e:	bf00      	nop
 8002c30:	3738      	adds	r7, #56	; 0x38
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	1000f000 	.word	0x1000f000
 8002c3c:	40020444 	.word	0x40020444
 8002c40:	40018080 	.word	0x40018080

08002c44 <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void  SD_LowLevel_DMA_RxConfig (uint32_t *BufferDST, uint32_t BufferSize)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    DMA_InitPara DMA_InitStructure;

    DMA_ClearBitState(SD_SDIO_DMA_FLAG_TC | SD_SDIO_DMA_FLAG_TE | SD_SDIO_DMA_FLAG_HT | SD_SDIO_DMA_FLAG_GL);
 8002c4e:	481a      	ldr	r0, [pc, #104]	; (8002cb8 <SD_LowLevel_DMA_RxConfig+0x74>)
 8002c50:	f000 fa4e 	bl	80030f0 <DMA_ClearBitState>

    /*!< SDIO DMA CHANNEL disable */
    DMA_Enable(SD_SDIO_DMA_CHANNEL, DISABLE);
 8002c54:	2100      	movs	r1, #0
 8002c56:	4819      	ldr	r0, [pc, #100]	; (8002cbc <SD_LowLevel_DMA_RxConfig+0x78>)
 8002c58:	f000 f9d2 	bl	8003000 <DMA_Enable>

    /*!< SDIO DMA CHANNEL Config */
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <SD_LowLevel_DMA_RxConfig+0x7c>)
 8002c5e:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PERIPHERALSRC;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PERIPHERALINC_DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_MemoryInc = DMA_MEMORYINC_ENABLE;
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PERIPHERALDATASIZE_WORD;
 8002c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MEMORYDATASIZE_WORD;
 8002c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStructure.DMA_Mode = DMA_MODE_NORMAL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStructure.DMA_Priority = DMA_PRIORITY_HIGH;
 8002c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8a:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_InitStructure.DMA_MTOM = DMA_MEMTOMEM_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
    DMA_Init(SD_SDIO_DMA_CHANNEL, &DMA_InitStructure);
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	4619      	mov	r1, r3
 8002c96:	4809      	ldr	r0, [pc, #36]	; (8002cbc <SD_LowLevel_DMA_RxConfig+0x78>)
 8002c98:	f000 f94a 	bl	8002f30 <DMA_Init>

    DMA_INTConfig(SD_SDIO_DMA_CHANNEL, DMA_INT_TC, ENABLE);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	4806      	ldr	r0, [pc, #24]	; (8002cbc <SD_LowLevel_DMA_RxConfig+0x78>)
 8002ca2:	f000 f9c9 	bl	8003038 <DMA_INTConfig>

    /*!< SDIO DMA CHANNEL enable */
    DMA_Enable(SD_SDIO_DMA_CHANNEL, ENABLE);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <SD_LowLevel_DMA_RxConfig+0x78>)
 8002caa:	f000 f9a9 	bl	8003000 <DMA_Enable>
}
 8002cae:	bf00      	nop
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	1000f000 	.word	0x1000f000
 8002cbc:	40020444 	.word	0x40020444
 8002cc0:	40018080 	.word	0x40018080

08002cc4 <SD_DMAEndOfTransferStatus>:
  * @brief  Returns the DMA End Of Transfer Status.
  * @param  None
  * @retval DMA SDIO Channel Status.
  */
uint32_t SD_DMAEndOfTransferStatus(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
    return (uint32_t)DMA_GetBitState(DMA2_FLAG_TC4);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <SD_DMAEndOfTransferStatus+0x10>)
 8002cca:	f000 f9ed 	bl	80030a8 <DMA_GetBitState>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	10002000 	.word	0x10002000

08002cd8 <sFLASH_LowLevel_DeInit>:
  * @brief  DeInitializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_LowLevel_DeInit(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  GPIO_InitPara GPIO_InitStructure;

  /*!< Disable the sFLASH_SPI  */
  SPI_Enable(sFLASH_SPI, DISABLE);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4816      	ldr	r0, [pc, #88]	; (8002d3c <sFLASH_LowLevel_DeInit+0x64>)
 8002ce2:	f001 f8c1 	bl	8003e68 <SPI_Enable>
  
  /*!< DeInitializes the sFLASH_SPI */
  SPI_I2S_DeInit(sFLASH_SPI);
 8002ce6:	4815      	ldr	r0, [pc, #84]	; (8002d3c <sFLASH_LowLevel_DeInit+0x64>)
 8002ce8:	f000 ff48 	bl	8003b7c <SPI_I2S_DeInit>
  
  /*!< sFLASH_SPI Periph clock disable */
  RCC_APB2PeriphClock_Enable(sFLASH_SPI_CLK, DISABLE);
 8002cec:	2100      	movs	r1, #0
 8002cee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cf2:	f7fe fd75 	bl	80017e0 <RCC_APB2PeriphClock_Enable>
  
  /*!< Configure sFLASH_SPI pins: SCK */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IN_FLOATING;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	480f      	ldr	r0, [pc, #60]	; (8002d40 <sFLASH_LowLevel_DeInit+0x68>)
 8002d04:	f7fd ff7e 	bl	8000c04 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MISO */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
 8002d08:	2340      	movs	r3, #64	; 0x40
 8002d0a:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	4619      	mov	r1, r3
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <sFLASH_LowLevel_DeInit+0x68>)
 8002d12:	f7fd ff77 	bl	8000c04 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MOSI */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4808      	ldr	r0, [pc, #32]	; (8002d40 <sFLASH_LowLevel_DeInit+0x68>)
 8002d20:	f7fd ff70 	bl	8000c04 <GPIO_Init>

  /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
  GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
 8002d24:	2308      	movs	r3, #8
 8002d26:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4805      	ldr	r0, [pc, #20]	; (8002d44 <sFLASH_LowLevel_DeInit+0x6c>)
 8002d2e:	f7fd ff69 	bl	8000c04 <GPIO_Init>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40013000 	.word	0x40013000
 8002d40:	40010800 	.word	0x40010800
 8002d44:	40011800 	.word	0x40011800

08002d48 <sFLASH_LowLevel_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_LowLevel_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
  GPIO_InitPara GPIO_InitStructure;

  /*!< sFLASH_SPI_CS_GPIO, sFLASH_SPI_MOSI_GPIO, sFLASH_SPI_MISO_GPIO 
       and sFLASH_SPI_SCK_GPIO Periph clock enable */
  RCC_APB2PeriphClock_Enable(sFLASH_CS_GPIO_CLK | sFLASH_SPI_MOSI_GPIO_CLK | sFLASH_SPI_MISO_GPIO_CLK |
 8002d4e:	2101      	movs	r1, #1
 8002d50:	2044      	movs	r0, #68	; 0x44
 8002d52:	f7fe fd45 	bl	80017e0 <RCC_APB2PeriphClock_Enable>
                         sFLASH_SPI_SCK_GPIO_CLK, ENABLE);

  /*!< sFLASH_SPI Periph clock enable */
  RCC_APB2PeriphClock_Enable(sFLASH_SPI_CLK, ENABLE);
 8002d56:	2101      	movs	r1, #1
 8002d58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d5c:	f7fe fd40 	bl	80017e0 <RCC_APB2PeriphClock_Enable>

  /*!< Configure sFLASH_SPI pins: SCK */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN;
 8002d60:	2320      	movs	r3, #32
 8002d62:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_SPEED_50MHZ;
 8002d64:	2303      	movs	r3, #3
 8002d66:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_MODE_AF_PP;
 8002d68:	2318      	movs	r3, #24
 8002d6a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sFLASH_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	480f      	ldr	r0, [pc, #60]	; (8002db0 <sFLASH_LowLevel_Init+0x68>)
 8002d72:	f7fd ff47 	bl	8000c04 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MOSI */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MOSI_PIN;
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(sFLASH_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480c      	ldr	r0, [pc, #48]	; (8002db0 <sFLASH_LowLevel_Init+0x68>)
 8002d80:	f7fd ff40 	bl	8000c04 <GPIO_Init>

  /*!< Configure sFLASH_SPI pins: MISO */
  GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_MISO_PIN;
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_MODE_IN_FLOATING;  
 8002d88:	2304      	movs	r3, #4
 8002d8a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sFLASH_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4807      	ldr	r0, [pc, #28]	; (8002db0 <sFLASH_LowLevel_Init+0x68>)
 8002d92:	f7fd ff37 	bl	8000c04 <GPIO_Init>

  /*!< Configure sFLASH_CS_PIN pin: sFLASH Card CS pin */
  GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
 8002d96:	2308      	movs	r3, #8
 8002d98:	80bb      	strh	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Mode = GPIO_MODE_OUT_PP;
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4804      	ldr	r0, [pc, #16]	; (8002db4 <sFLASH_LowLevel_Init+0x6c>)
 8002da4:	f7fd ff2e 	bl	8000c04 <GPIO_Init>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40010800 	.word	0x40010800
 8002db4:	40011800 	.word	0x40011800

08002db8 <DMA_DeInit>:
  * @brief  Deinitialize the DMAy Channelx registers
  * @param  DMAy_Channelx: where y:[1,2] to select the DMA , x:[1,7] for DMA1 and x:[1,5] for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CTLR &= (uint16_t)(~DMA_CTLR_CHEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
    
    /* Reset DMAy Channelx control register */
    DMAy_Channelx->CTLR  = DMA_REGISTERS_RESET;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
    
    /* Reset DMAy Channelx remaining bytes register */
    DMAy_Channelx->RCNT = DMA_REGISTERS_RESET;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	605a      	str	r2, [r3, #4]
    
    /* Reset DMAy Channelx peripheral address register */
    DMAy_Channelx->PBAR  = DMA_REGISTERS_RESET;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
    
    /* Reset DMAy Channelx memory address register */
    DMAy_Channelx->MBAR = DMA_REGISTERS_RESET;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
    
    if (DMAy_Channelx == DMA1_CHANNEL1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <DMA_DeInit+0x140>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d106      	bne.n	8002dfc <DMA_DeInit+0x44>
    {
        /* Reset interrupt pending bits for DMA1 Channel1 */
        DMA1->ICR |= DMA1_Channel1_INT_Mask;
 8002dee:	4a43      	ldr	r2, [pc, #268]	; (8002efc <DMA_DeInit+0x144>)
 8002df0:	4b42      	ldr	r3, [pc, #264]	; (8002efc <DMA_DeInit+0x144>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f043 030f 	orr.w	r3, r3, #15
 8002df8:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002dfa:	e077      	b.n	8002eec <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA1_CHANNEL1)
    {
        /* Reset interrupt pending bits for DMA1 Channel1 */
        DMA1->ICR |= DMA1_Channel1_INT_Mask;
    }
    else if (DMAy_Channelx == DMA1_CHANNEL2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <DMA_DeInit+0x148>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d106      	bne.n	8002e12 <DMA_DeInit+0x5a>
    {
        /* Reset interrupt pending bits for DMA1 Channel2 */
        DMA1->ICR |= DMA1_Channel2_INT_Mask;
 8002e04:	4a3d      	ldr	r2, [pc, #244]	; (8002efc <DMA_DeInit+0x144>)
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <DMA_DeInit+0x144>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002e0e:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e10:	e06c      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA1_CHANNEL2)
    {
        /* Reset interrupt pending bits for DMA1 Channel2 */
        DMA1->ICR |= DMA1_Channel2_INT_Mask;
    }
    else if (DMAy_Channelx == DMA1_CHANNEL3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <DMA_DeInit+0x14c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d106      	bne.n	8002e28 <DMA_DeInit+0x70>
    {
        /* Reset interrupt pending bits for DMA1 Channel3 */
        DMA1->ICR |= DMA1_Channel3_INT_Mask;
 8002e1a:	4a38      	ldr	r2, [pc, #224]	; (8002efc <DMA_DeInit+0x144>)
 8002e1c:	4b37      	ldr	r3, [pc, #220]	; (8002efc <DMA_DeInit+0x144>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002e24:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e26:	e061      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA1_CHANNEL3)
    {
        /* Reset interrupt pending bits for DMA1 Channel3 */
        DMA1->ICR |= DMA1_Channel3_INT_Mask;
    }
    else if (DMAy_Channelx == DMA1_CHANNEL4)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a37      	ldr	r2, [pc, #220]	; (8002f08 <DMA_DeInit+0x150>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d106      	bne.n	8002e3e <DMA_DeInit+0x86>
    {
        /* Reset interrupt pending bits for DMA1 Channel4 */
        DMA1->ICR |= DMA1_Channel4_INT_Mask;
 8002e30:	4a32      	ldr	r2, [pc, #200]	; (8002efc <DMA_DeInit+0x144>)
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <DMA_DeInit+0x144>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8002e3a:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e3c:	e056      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA1_CHANNEL4)
    {
        /* Reset interrupt pending bits for DMA1 Channel4 */
        DMA1->ICR |= DMA1_Channel4_INT_Mask;
    }
    else if (DMAy_Channelx == DMA1_CHANNEL5)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <DMA_DeInit+0x154>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d106      	bne.n	8002e54 <DMA_DeInit+0x9c>
    {
        /* Reset interrupt pending bits for DMA1 Channel5 */
        DMA1->ICR |= DMA1_Channel5_INT_Mask;
 8002e46:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <DMA_DeInit+0x144>)
 8002e48:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <DMA_DeInit+0x144>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002e50:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e52:	e04b      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA1_CHANNEL5)
    {
        /* Reset interrupt pending bits for DMA1 Channel5 */
        DMA1->ICR |= DMA1_Channel5_INT_Mask;
    }
    else if (DMAy_Channelx == DMA1_CHANNEL6)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <DMA_DeInit+0x158>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d106      	bne.n	8002e6a <DMA_DeInit+0xb2>
    {
        /* Reset interrupt pending bits for DMA1 Channel6 */
        DMA1->ICR |= DMA1_Channel6_INT_Mask;
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <DMA_DeInit+0x144>)
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <DMA_DeInit+0x144>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e66:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e68:	e040      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA1_CHANNEL6)
    {
        /* Reset interrupt pending bits for DMA1 Channel6 */
        DMA1->ICR |= DMA1_Channel6_INT_Mask;
    }
    else if (DMAy_Channelx == DMA1_CHANNEL7)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <DMA_DeInit+0x15c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d106      	bne.n	8002e80 <DMA_DeInit+0xc8>
    {
        /* Reset interrupt pending bits for DMA1 Channel7 */
        DMA1->ICR |= DMA1_Channel7_INT_Mask;
 8002e72:	4a22      	ldr	r2, [pc, #136]	; (8002efc <DMA_DeInit+0x144>)
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <DMA_DeInit+0x144>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002e7c:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e7e:	e035      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA1_CHANNEL7)
    {
        /* Reset interrupt pending bits for DMA1 Channel7 */
        DMA1->ICR |= DMA1_Channel7_INT_Mask;
    }
    else if (DMAy_Channelx == DMA2_CHANNEL1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <DMA_DeInit+0x160>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d106      	bne.n	8002e96 <DMA_DeInit+0xde>
    {
        /* Reset interrupt pending bits for DMA2 Channel1 */
        DMA2->ICR |= DMA2_Channel1_INT_Mask;
 8002e88:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <DMA_DeInit+0x164>)
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <DMA_DeInit+0x164>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f043 030f 	orr.w	r3, r3, #15
 8002e92:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002e94:	e02a      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA2_CHANNEL1)
    {
        /* Reset interrupt pending bits for DMA2 Channel1 */
        DMA2->ICR |= DMA2_Channel1_INT_Mask;
    }
    else if (DMAy_Channelx == DMA2_CHANNEL2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <DMA_DeInit+0x168>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d106      	bne.n	8002eac <DMA_DeInit+0xf4>
    {
        /* Reset interrupt pending bits for DMA2 Channel2 */
        DMA2->ICR |= DMA2_Channel2_INT_Mask;
 8002e9e:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <DMA_DeInit+0x164>)
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <DMA_DeInit+0x164>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002ea8:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002eaa:	e01f      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA2_CHANNEL2)
    {
        /* Reset interrupt pending bits for DMA2 Channel2 */
        DMA2->ICR |= DMA2_Channel2_INT_Mask;
    }
    else if (DMAy_Channelx == DMA2_CHANNEL3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <DMA_DeInit+0x16c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d106      	bne.n	8002ec2 <DMA_DeInit+0x10a>
    {
        /* Reset interrupt pending bits for DMA2 Channel3 */
        DMA2->ICR |= DMA2_Channel3_INT_Mask;
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <DMA_DeInit+0x164>)
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <DMA_DeInit+0x164>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002ebe:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002ec0:	e014      	b.n	8002eec <DMA_DeInit+0x134>
    else if (DMAy_Channelx == DMA2_CHANNEL3)
    {
        /* Reset interrupt pending bits for DMA2 Channel3 */
        DMA2->ICR |= DMA2_Channel3_INT_Mask;
    }
    else if (DMAy_Channelx == DMA2_CHANNEL4)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <DMA_DeInit+0x170>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d106      	bne.n	8002ed8 <DMA_DeInit+0x120>
    {
        /* Reset interrupt pending bits for DMA2 Channel4 */
        DMA2->ICR |= DMA2_Channel4_INT_Mask;
 8002eca:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <DMA_DeInit+0x164>)
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <DMA_DeInit+0x164>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8002ed4:	6053      	str	r3, [r2, #4]
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
    }
    }
}
 8002ed6:	e009      	b.n	8002eec <DMA_DeInit+0x134>
        /* Reset interrupt pending bits for DMA2 Channel4 */
        DMA2->ICR |= DMA2_Channel4_INT_Mask;
    }
    else
    { 
    if (DMAy_Channelx == DMA2_CHANNEL5)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <DMA_DeInit+0x174>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d105      	bne.n	8002eec <DMA_DeInit+0x134>
    {
        /* Reset interrupt pending bits for DMA2 Channel5 */
        DMA2->ICR |= DMA2_Channel5_INT_Mask;
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <DMA_DeInit+0x164>)
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <DMA_DeInit+0x164>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8002eea:	6053      	str	r3, [r2, #4]
    }
    }
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40020008 	.word	0x40020008
 8002efc:	40020000 	.word	0x40020000
 8002f00:	4002001c 	.word	0x4002001c
 8002f04:	40020030 	.word	0x40020030
 8002f08:	40020044 	.word	0x40020044
 8002f0c:	40020058 	.word	0x40020058
 8002f10:	4002006c 	.word	0x4002006c
 8002f14:	40020080 	.word	0x40020080
 8002f18:	40020408 	.word	0x40020408
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	4002041c 	.word	0x4002041c
 8002f24:	40020430 	.word	0x40020430
 8002f28:	40020444 	.word	0x40020444
 8002f2c:	40020458 	.word	0x40020458

08002f30 <DMA_Init>:
  * @param  DMAy_Channelx: where y:[1:2] to select the DMA , x:[1,7] for DMA1 and x:[1,5] for DMA2 to select the DMA Channel.
  * @param  DMA_InitParaStruct: contain the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitPara* DMA_InitParaStruct)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
    uint32_t temp = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Get the DMAy_Channelx CCR value */
    temp = DMAy_Channelx->CTLR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

    /* Clear MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits */
    temp &= CTLR_CLEAR_MASK;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
    /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
    /* Set MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits according to DMA_InitParaStruct */
    temp |= DMA_InitParaStruct->DMA_DIR | DMA_InitParaStruct->DMA_Mode |
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	431a      	orrs	r2, r3
            DMA_InitParaStruct->DMA_PeripheralInc | DMA_InitParaStruct->DMA_MemoryInc |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]

    /* Clear MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits */
    temp &= CTLR_CLEAR_MASK;
    /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
    /* Set MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits according to DMA_InitParaStruct */
    temp |= DMA_InitParaStruct->DMA_DIR | DMA_InitParaStruct->DMA_Mode |
 8002f5e:	431a      	orrs	r2, r3
            DMA_InitParaStruct->DMA_PeripheralInc | DMA_InitParaStruct->DMA_MemoryInc |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	431a      	orrs	r2, r3
            DMA_InitParaStruct->DMA_PeripheralDataSize | DMA_InitParaStruct->DMA_MemoryDataSize |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
    /* Clear MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits */
    temp &= CTLR_CLEAR_MASK;
    /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
    /* Set MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits according to DMA_InitParaStruct */
    temp |= DMA_InitParaStruct->DMA_DIR | DMA_InitParaStruct->DMA_Mode |
            DMA_InitParaStruct->DMA_PeripheralInc | DMA_InitParaStruct->DMA_MemoryInc |
 8002f6a:	431a      	orrs	r2, r3
            DMA_InitParaStruct->DMA_PeripheralDataSize | DMA_InitParaStruct->DMA_MemoryDataSize |
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	431a      	orrs	r2, r3
            DMA_InitParaStruct->DMA_Priority | DMA_InitParaStruct->DMA_MTOM;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    temp &= CTLR_CLEAR_MASK;
    /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
    /* Set MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits according to DMA_InitParaStruct */
    temp |= DMA_InitParaStruct->DMA_DIR | DMA_InitParaStruct->DMA_Mode |
            DMA_InitParaStruct->DMA_PeripheralInc | DMA_InitParaStruct->DMA_MemoryInc |
            DMA_InitParaStruct->DMA_PeripheralDataSize | DMA_InitParaStruct->DMA_MemoryDataSize |
 8002f76:	431a      	orrs	r2, r3
            DMA_InitParaStruct->DMA_Priority | DMA_InitParaStruct->DMA_MTOM;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	4313      	orrs	r3, r2

    /* Clear MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits */
    temp &= CTLR_CLEAR_MASK;
    /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
    /* Set MEMTOMEM, PRIO, MSIZE, PSIZE, MNAGA, PNAGA, CIRC and DIR bits according to DMA_InitParaStruct */
    temp |= DMA_InitParaStruct->DMA_DIR | DMA_InitParaStruct->DMA_Mode |
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
            DMA_InitParaStruct->DMA_PeripheralInc | DMA_InitParaStruct->DMA_MemoryInc |
            DMA_InitParaStruct->DMA_PeripheralDataSize | DMA_InitParaStruct->DMA_MemoryDataSize |
            DMA_InitParaStruct->DMA_Priority | DMA_InitParaStruct->DMA_MTOM;

    /* Write to DMAy Channelx CTLR */
    DMAy_Channelx->CTLR = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	601a      	str	r2, [r3, #0]

    /* Write to DMAy Channelx RCNT */
    DMAy_Channelx->RCNT = DMA_InitParaStruct->DMA_BufferSize;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	605a      	str	r2, [r3, #4]
    
    /* Write to DMAy Channelx PBAR */
    DMAy_Channelx->PBAR = DMA_InitParaStruct->DMA_PeripheralBaseAddr;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
    
    /* Write to DMAy Channelx MBAR */
    DMAy_Channelx->MBAR = DMA_InitParaStruct->DMA_MemoryBaseAddr;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60da      	str	r2, [r3, #12]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <DMA_ParaInit>:
  * @brief  Set each DMA_InitParaStruct member to its default value.
  * @param  DMA_InitParaStruct: The structure pointer to DMA_InitParaStruct will be initialized.
  * @retval None
  */
void DMA_ParaInit(DMA_InitPara* DMA_InitParaStruct)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
    /*-------------- Reset DMA init structure parameters values ------------------*/
    DMA_InitParaStruct->DMA_PeripheralBaseAddr = DMA_INT_RESET;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    
    DMA_InitParaStruct->DMA_MemoryBaseAddr = DMA_INT_RESET;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
    
    DMA_InitParaStruct->DMA_DIR = DMA_DIR_PERIPHERALSRC;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
    
    DMA_InitParaStruct->DMA_BufferSize = DMA_INT_RESET;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
    
    DMA_InitParaStruct->DMA_PeripheralInc = DMA_PERIPHERALINC_DISABLE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
    
    DMA_InitParaStruct->DMA_MemoryInc = DMA_MEMORYINC_DISABLE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
    
    DMA_InitParaStruct->DMA_PeripheralDataSize = DMA_PERIPHERALDATASIZE_BYTE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
    
    DMA_InitParaStruct->DMA_MemoryDataSize = DMA_MEMORYDATASIZE_BYTE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
    
    DMA_InitParaStruct->DMA_Mode = DMA_MODE_NORMAL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
    
    DMA_InitParaStruct->DMA_Priority = DMA_PRIORITY_LOW;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
    
    DMA_InitParaStruct->DMA_MTOM = DMA_MEMTOMEM_DISABLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <DMA_Enable>:
  * @param  NewValue: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Enable(DMA_Channel_TypeDef* DMAy_Channelx, TypeState NewValue)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <DMA_Enable+0x20>
    {
        /* Enable the DMAy Channelx */
        DMAy_Channelx->CTLR |= DMA_CTLR_CHEN;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable the DMAy Channelx */
        DMAy_Channelx->CTLR &= (uint16_t)(~DMA_CTLR_CHEN);
    }
}
 800301e:	e006      	b.n	800302e <DMA_Enable+0x2e>
        DMAy_Channelx->CTLR |= DMA_CTLR_CHEN;
    }
    else
    {
        /* Disable the DMAy Channelx */
        DMAy_Channelx->CTLR &= (uint16_t)(~DMA_CTLR_CHEN);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
    }
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <DMA_INTConfig>:
  * @param  NewValue: new state of the DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_INTConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_INT, TypeState NewValue)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	71fb      	strb	r3, [r7, #7]
    if (NewValue != DISABLE)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <DMA_INTConfig+0x22>
    {
        /* Enable the DMA interrupts */
        DMAy_Channelx->CTLR |= DMA_INT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	431a      	orrs	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable the DMA interrupts */
        DMAy_Channelx->CTLR &= ~DMA_INT;
    }
}
 8003058:	e006      	b.n	8003068 <DMA_INTConfig+0x30>
        DMAy_Channelx->CTLR |= DMA_INT;
    }
    else
    {
        /* Disable the DMA interrupts */
        DMAy_Channelx->CTLR &= ~DMA_INT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]
    }
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <DMA_SetCurrDataCounter>:
  * @param  DMAy_Channelx: where y:[1:2] to select the DMA , x:[1,7] for DMA1 and x:[1,5] for DMA2 to select the DMA Channel.
  * @param  DataNumber: The number of the remaining counter in the current DMAy Channelx transfer.
  * @retval None.
  */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	807b      	strh	r3, [r7, #2]
    /* Write to DMAy Channelx RCNT */
    DMAy_Channelx->RCNT = DataNumber;
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	605a      	str	r2, [r3, #4]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <DMA_GetCurrDataCounter>:
  * @brief  Return the number of remaining counter in the current DMAy Channelx transfer.
  * @param  DMAy_Channelx: where y:[1:2] to select the DMA , x:[1,7] for DMA1 and x:[1,5] for DMA2 to select the DMA Channel.
  * @retval The number of remaining counter in the current DMAy Channelx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    /* Return the number of remaining counter for DMAy Channelx */
    return ((uint16_t)(DMAy_Channelx->RCNT));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b29b      	uxth	r3, r3
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <DMA_GetBitState>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
TypeState DMA_GetBitState(uint32_t DMAy_FLAG)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the used DMAy */
  if ((DMAy_FLAG & DMA2_FLAG_Mask) != (uint32_t)RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <DMA_GetBitState+0x1e>
  {
    /* Get DMA2 ISR register value */
    temp = DMA2->IFR ;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <DMA_GetBitState+0x40>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e002      	b.n	80030cc <DMA_GetBitState+0x24>
  }
  else
  {
    /* Get DMA1 ISR register value */
    temp = DMA1->IFR ;
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <DMA_GetBitState+0x44>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]
  }

    /* Check the status of the DMAy flag */
  if ((temp & DMAy_FLAG) != (uint32_t)RESET)
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <DMA_GetBitState+0x32>
    {
        /* DMAy_FLAG is set */
        return SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <DMA_GetBitState+0x34>
    }
    else
    {
        /* DMAy_FLAG is reset */
        return RESET;
 80030da:	2300      	movs	r3, #0
    }
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020000 	.word	0x40020000

080030f0 <DMA_ClearBitState>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearBitState(uint32_t DMAy_FLAG)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the used DMAy */
  if ((DMAy_FLAG & DMA2_FLAG_Mask) != (uint32_t)RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <DMA_ClearBitState+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->ICR = DMAy_FLAG;
 8003102:	4a06      	ldr	r2, [pc, #24]	; (800311c <DMA_ClearBitState+0x2c>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->ICR = DMAy_FLAG;
  }
}
 8003108:	e002      	b.n	8003110 <DMA_ClearBitState+0x20>
    DMA2->ICR = DMAy_FLAG;
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->ICR = DMAy_FLAG;
 800310a:	4a05      	ldr	r2, [pc, #20]	; (8003120 <DMA_ClearBitState+0x30>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6053      	str	r3, [r2, #4]
  }
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40020400 	.word	0x40020400
 8003120:	40020000 	.word	0x40020000

08003124 <DMA_GetIntBitState>:
  *     @arg DMA2_INT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_INT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMAy_IT (SET or RESET).
  */
TypeState DMA_GetIntBitState(uint32_t DMAy_INT)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]

    /* Calculate the used DMA */
    if ((DMAy_INT & DMA2_FLAG_Mask) != (uint32_t)RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <DMA_GetIntBitState+0x1e>
    {
        /* Get DMA2 IFR register value */
        temp = DMA2->IFR;
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <DMA_GetIntBitState+0x40>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e002      	b.n	8003148 <DMA_GetIntBitState+0x24>
    }
    else
    {
        /* Get DMA1 IFR register value */
        temp = DMA1->IFR;
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <DMA_GetIntBitState+0x44>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
    }

    /* Check the status of the DMAy interrupt */
    if ((temp & DMAy_INT) != (uint32_t)RESET)
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <DMA_GetIntBitState+0x32>
    {
        /* DMA_INT is set */
        return SET;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <DMA_GetIntBitState+0x34>
    }
    else
    {
        /* DMA_INT is reset */
        return RESET;
 8003156:	2300      	movs	r3, #0
    }
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40020400 	.word	0x40020400
 8003168:	40020000 	.word	0x40020000

0800316c <DMA_ClearIntBitState>:
  *     @arg DMA2_INT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_INT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearIntBitState(uint32_t DMAy_INT)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

    /* Check the used DMAy */
    if ((DMAy_INT & DMA2_FLAG_Mask) != (uint32_t)RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <DMA_ClearIntBitState+0x1a>
    {
        /* Clear the DMA2 interrupt bits */
        DMA2->ICR = DMAy_INT;
 800317e:	4a06      	ldr	r2, [pc, #24]	; (8003198 <DMA_ClearIntBitState+0x2c>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6053      	str	r3, [r2, #4]
    else
    {
        /* Clear the DMA1 interrupt bits */
        DMA1->ICR = DMAy_INT;
    }
}
 8003184:	e002      	b.n	800318c <DMA_ClearIntBitState+0x20>
        DMA2->ICR = DMAy_INT;
    }
    else
    {
        /* Clear the DMA1 interrupt bits */
        DMA1->ICR = DMAy_INT;
 8003186:	4a05      	ldr	r2, [pc, #20]	; (800319c <DMA_ClearIntBitState+0x30>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6053      	str	r3, [r2, #4]
    }
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40020400 	.word	0x40020400
 800319c:	40020000 	.word	0x40020000

080031a0 <EXTI_DeInit>:
  * @brief  Reset the EXTI peripheral registers and the struct EXTI_InitPara.
  * @param  EXTI_InitParaStruct: the struct EXTI_InitPara pointer.
  * @retval None
  */
void EXTI_DeInit(EXTI_InitPara* EXTI_InitParaStruct)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    /* Reset the EXTI peripheral registers */
    EXTI->IER = EXTI_IER_RST;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <EXTI_DeInit+0x48>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    EXTI->EER = EXTI_EER_RST;
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <EXTI_DeInit+0x48>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	605a      	str	r2, [r3, #4]
    EXTI->RTE = EXTI_RTE_RST;
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <EXTI_DeInit+0x48>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
    EXTI->FTE = EXTI_FTE_RST;
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <EXTI_DeInit+0x48>)
 80031bc:	2200      	movs	r2, #0
 80031be:	60da      	str	r2, [r3, #12]
    EXTI->PD = EXTI_PD_RST;
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <EXTI_DeInit+0x48>)
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <EXTI_DeInit+0x4c>)
 80031c4:	615a      	str	r2, [r3, #20]
    
    /* Reset the struct EXTI_InitPara */
    EXTI_InitParaStruct->EXTI_LINE = EXTI_LINE_NULL;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
    EXTI_InitParaStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	711a      	strb	r2, [r3, #4]
    EXTI_InitParaStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	220c      	movs	r2, #12
 80031d6:	715a      	strb	r2, [r3, #5]
    EXTI_InitParaStruct->EXTI_LINEEnable = DISABLE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	719a      	strb	r2, [r3, #6]
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40010400 	.word	0x40010400
 80031ec:	000fffff 	.word	0x000fffff

080031f0 <EXTI_Init>:
  * @brief  Initialize the EXTI peripheral registers.
  * @param  EXTI_InitParaStruct: the struct EXTI_InitPara pointer.
  * @retval None
  */
void EXTI_Init(EXTI_InitPara* EXTI_InitParaStruct)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
    
    temp = (uint32_t)EXTI_BASE;
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <EXTI_Init+0xe0>)
 80031fe:	60fb      	str	r3, [r7, #12]
    
    if (EXTI_InitParaStruct->EXTI_LINEEnable != DISABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	799b      	ldrb	r3, [r3, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d04f      	beq.n	80032a8 <EXTI_Init+0xb8>
    {
        /* Clear Interrupt and Event from EXTI Lines */
        EXTI->IER &= ~EXTI_InitParaStruct->EXTI_LINE;
 8003208:	4931      	ldr	r1, [pc, #196]	; (80032d0 <EXTI_Init+0xe0>)
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <EXTI_Init+0xe0>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	43db      	mvns	r3, r3
 8003214:	4013      	ands	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
        EXTI->EER &= ~EXTI_InitParaStruct->EXTI_LINE;
 8003218:	492d      	ldr	r1, [pc, #180]	; (80032d0 <EXTI_Init+0xe0>)
 800321a:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <EXTI_Init+0xe0>)
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	43db      	mvns	r3, r3
 8003224:	4013      	ands	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
        
        temp += EXTI_InitParaStruct->EXTI_Mode;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	461a      	mov	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
        
        *(__IO uint32_t *) temp |= EXTI_InitParaStruct->EXTI_LINE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6811      	ldr	r1, [r2, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
        
        /* Clear the Rising and Falling edge trigger enable registers */
        EXTI->RTE &= ~EXTI_InitParaStruct->EXTI_LINE;
 8003242:	4923      	ldr	r1, [pc, #140]	; (80032d0 <EXTI_Init+0xe0>)
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <EXTI_Init+0xe0>)
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	43db      	mvns	r3, r3
 800324e:	4013      	ands	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
        EXTI->FTE &= ~EXTI_InitParaStruct->EXTI_LINE;
 8003252:	491f      	ldr	r1, [pc, #124]	; (80032d0 <EXTI_Init+0xe0>)
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <EXTI_Init+0xe0>)
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	43db      	mvns	r3, r3
 800325e:	4013      	ands	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
        
        /* Select the trigger type for the selected EXTI Lines */
        if (EXTI_InitParaStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	795b      	ldrb	r3, [r3, #5]
 8003266:	2b10      	cmp	r3, #16
 8003268:	d10e      	bne.n	8003288 <EXTI_Init+0x98>
        {
            /* Rising and Falling edge trigger are both selected */
            EXTI->RTE |= EXTI_InitParaStruct->EXTI_LINE;
 800326a:	4919      	ldr	r1, [pc, #100]	; (80032d0 <EXTI_Init+0xe0>)
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <EXTI_Init+0xe0>)
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4313      	orrs	r3, r2
 8003276:	608b      	str	r3, [r1, #8]
            EXTI->FTE |= EXTI_InitParaStruct->EXTI_LINE;
 8003278:	4915      	ldr	r1, [pc, #84]	; (80032d0 <EXTI_Init+0xe0>)
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <EXTI_Init+0xe0>)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	60cb      	str	r3, [r1, #12]
        temp += EXTI_InitParaStruct->EXTI_Mode;
        
        /* Disable the selected EXTI lines */
        *(__IO uint32_t *) temp &= ~EXTI_InitParaStruct->EXTI_LINE;
    }
}
 8003286:	e01d      	b.n	80032c4 <EXTI_Init+0xd4>
            EXTI->RTE |= EXTI_InitParaStruct->EXTI_LINE;
            EXTI->FTE |= EXTI_InitParaStruct->EXTI_LINE;
        }
        else
        {
            temp = (uint32_t)EXTI_BASE;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <EXTI_Init+0xe0>)
 800328a:	60fb      	str	r3, [r7, #12]
            temp += EXTI_InitParaStruct->EXTI_Trigger;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	795b      	ldrb	r3, [r3, #5]
 8003290:	461a      	mov	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
            
            *(__IO uint32_t *) temp |= EXTI_InitParaStruct->EXTI_LINE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
        temp += EXTI_InitParaStruct->EXTI_Mode;
        
        /* Disable the selected EXTI lines */
        *(__IO uint32_t *) temp &= ~EXTI_InitParaStruct->EXTI_LINE;
    }
}
 80032a6:	e00d      	b.n	80032c4 <EXTI_Init+0xd4>
            *(__IO uint32_t *) temp |= EXTI_InitParaStruct->EXTI_LINE;
        }
    }
    else
    {
        temp += EXTI_InitParaStruct->EXTI_Mode;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	791b      	ldrb	r3, [r3, #4]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
        
        /* Disable the selected EXTI lines */
        *(__IO uint32_t *) temp &= ~EXTI_InitParaStruct->EXTI_LINE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	6811      	ldr	r1, [r2, #0]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	43d2      	mvns	r2, r2
 80032c0:	400a      	ands	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
    }
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010400 	.word	0x40010400

080032d4 <EXTI_SWINT_Enable>:
  * @param  EXTI_LINE: the selected EXTI lines.
  *   This parameter can be any combination of EXTI_LINEx where x can be (0..19).
  * @retval None
  */
void EXTI_SWINT_Enable(uint32_t EXTI_LINE)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    /* Enable the software interrupt or event request of the selected EXTI Lines */
    EXTI->SIE |= EXTI_LINE;
 80032dc:	4905      	ldr	r1, [pc, #20]	; (80032f4 <EXTI_SWINT_Enable+0x20>)
 80032de:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <EXTI_SWINT_Enable+0x20>)
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	610b      	str	r3, [r1, #16]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010400 	.word	0x40010400

080032f8 <EXTI_GetBitState>:
  * @param  EXTI_LINE: the selected EXTI lines.
  *   This parameter can be any combination of EXTI_LINEx where x can be (0..19).
  * @retval The new value of EXTI_LINE (SET or RESET).
  */
TypeState EXTI_GetBitState(uint32_t EXTI_LINE)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    /* Check and get the selected EXTI lines flag */
    if ((EXTI->PD & EXTI_LINE) != (uint32_t)RESET)
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <EXTI_GetBitState+0x24>)
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <EXTI_GetBitState+0x18>
    {
        /* EXTI_LINE bit is SET */
        return SET;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <EXTI_GetBitState+0x1a>
    }
    else
    {
        /* EXTI_LINE bit is RESET */
        return RESET;
 8003310:	2300      	movs	r3, #0
    }
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40010400 	.word	0x40010400

08003320 <EXTI_ClearBitState>:
  * @param  EXTI_LINE: the selected EXTI lines.
  *   This parameter can be any combination of EXTI_LINEx where x can be (0..19).
  * @retval None
  */
void EXTI_ClearBitState(uint32_t EXTI_LINE)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    /* Clear the bit flag of the selected EXTI lines */
    EXTI->PD = EXTI_LINE;
 8003328:	4a03      	ldr	r2, [pc, #12]	; (8003338 <EXTI_ClearBitState+0x18>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6153      	str	r3, [r2, #20]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40010400 	.word	0x40010400

0800333c <EXTI_GetIntBitState>:
  * @param  EXTI_LINE: the selected EXTI lines.
  *   This parameter can be any combination of EXTI_LINEx where x can be (0..19).
  * @retval The new value of EXTI_LINE (SET or RESET).
  */
TypeState EXTI_GetIntBitState(uint32_t EXTI_LINE)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
    /* Check and get the interrupt source is set or not */
    if (((EXTI->PD & EXTI_LINE) != (uint32_t)RESET) && ((EXTI->IER & EXTI_LINE) != (uint32_t)RESET))
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <EXTI_GetIntBitState+0x30>)
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <EXTI_GetIntBitState+0x24>
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <EXTI_GetIntBitState+0x30>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <EXTI_GetIntBitState+0x24>
    {
        /* The interrupt bit of EXTI_LINE is SET */
        return SET;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <EXTI_GetIntBitState+0x26>
    }
    else
    {
        /* The interrupt bit of EXTI_LINE is RESET */
        return RESET;
 8003360:	2300      	movs	r3, #0
    }
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40010400 	.word	0x40010400

08003370 <EXTI_ClearIntBitState>:
  * @param  EXTI_LINE: the selected EXTI lines.
  *   This parameter can be any combination of EXTI_LINEx where x can be (0..19).
  * @retval None
  */
void EXTI_ClearIntBitState(uint32_t EXTI_LINE)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
    /* Clear the interrupt bit flag of the selected EXTI lines */
    EXTI->PD = EXTI_LINE;
 8003378:	4a03      	ldr	r2, [pc, #12]	; (8003388 <EXTI_ClearIntBitState+0x18>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6153      	str	r3, [r2, #20]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40010400 	.word	0x40010400

0800338c <NVIC_PRIGroup_Enable>:
  *         pre-emption priority and subpriority.
  * @param  NVIC_PriGroup: NVIC_PRIGROUP_0, NVIC_PRIGROUP_1,...NVIC_PRIGROUP_4.
  * @retval None
  */
void NVIC_PRIGroup_Enable(uint32_t NVIC_PRIGroup)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    /* Set the priority grouping value */
    SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PRIGroup;
 8003394:	4a05      	ldr	r2, [pc, #20]	; (80033ac <NVIC_PRIGroup_Enable+0x20>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a0:	60d3      	str	r3, [r2, #12]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_Init>:
  * @brief  The NVIC peripheral Initialization.
  * @param  NVIC_InitStruct: a NVIC_InitPara structure pointer.
  * @retval None
  */
void NVIC_Init(NVIC_InitPara* NVIC_InitStruct)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    uint32_t temppriority = 0x00, temppreempt = 0x00, tempsub = 0x00;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
    
    if (NVIC_InitStruct->NVIC_IRQEnable != DISABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	78db      	ldrb	r3, [r3, #3]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06d      	beq.n	80034a8 <NVIC_Init+0xf8>
    {
        if (((SCB->AIRCR) & (uint32_t)0x700)==NVIC_PRIGROUP_0)
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <NVIC_Init+0x124>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033d8:	d104      	bne.n	80033e4 <NVIC_Init+0x34>
        {
            temppreempt=0;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
            tempsub=0x4;
 80033de:	2304      	movs	r3, #4
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	e02e      	b.n	8003442 <NVIC_Init+0x92>
        }
        else if(((SCB->AIRCR) & (uint32_t)0x700)==NVIC_PRIGROUP_1)
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <NVIC_Init+0x124>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033f0:	d104      	bne.n	80033fc <NVIC_Init+0x4c>
        {
            temppreempt=1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
            tempsub=0x3;
 80033f6:	2303      	movs	r3, #3
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	e022      	b.n	8003442 <NVIC_Init+0x92>
        }
        else if(((SCB->AIRCR) & (uint32_t)0x700)==NVIC_PRIGROUP_2)
 80033fc:	4b35      	ldr	r3, [pc, #212]	; (80034d4 <NVIC_Init+0x124>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003408:	d104      	bne.n	8003414 <NVIC_Init+0x64>
        {
            temppreempt=2;
 800340a:	2302      	movs	r3, #2
 800340c:	617b      	str	r3, [r7, #20]
            tempsub=0x2;
 800340e:	2302      	movs	r3, #2
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e016      	b.n	8003442 <NVIC_Init+0x92>
        }
        else if(((SCB->AIRCR) & (uint32_t)0x700)==NVIC_PRIGROUP_3)
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <NVIC_Init+0x124>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d104      	bne.n	800342c <NVIC_Init+0x7c>
        {
            temppreempt=3;
 8003422:	2303      	movs	r3, #3
 8003424:	617b      	str	r3, [r7, #20]
            tempsub=0x1;
 8003426:	2301      	movs	r3, #1
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e00a      	b.n	8003442 <NVIC_Init+0x92>
        }
        else if(((SCB->AIRCR) & (uint32_t)0x700)==NVIC_PRIGROUP_4)
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <NVIC_Init+0x124>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003438:	d103      	bne.n	8003442 <NVIC_Init+0x92>
        {
            temppreempt=4;
 800343a:	2304      	movs	r3, #4
 800343c:	617b      	str	r3, [r7, #20]
            tempsub=0x0;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
        }
    
        temppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQPreemptPriority << (0x4 - temppreempt);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	461a      	mov	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f1c3 0304 	rsb	r3, r3, #4
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
        temppriority |=  NVIC_InitStruct->NVIC_IRQSubPriority &(0x0F >> (0x4 - tempsub));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	789b      	ldrb	r3, [r3, #2]
 8003458:	4619      	mov	r1, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f1c3 0304 	rsb	r3, r3, #4
 8003460:	220f      	movs	r2, #15
 8003462:	fa42 f303 	asr.w	r3, r2, r3
 8003466:	400b      	ands	r3, r1
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
        temppriority = temppriority << 0x04;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	60fb      	str	r3, [r7, #12]
        
        NVIC->IP[NVIC_InitStruct->NVIC_IRQ] = temppriority;
 8003476:	4a18      	ldr	r2, [pc, #96]	; (80034d8 <NVIC_Init+0x128>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	68f9      	ldr	r1, [r7, #12]
 800347e:	b2c9      	uxtb	r1, r1
 8003480:	4413      	add	r3, r2
 8003482:	460a      	mov	r2, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
        /* Enable the Selected IRQ Channels --------------------------------------*/
        NVIC->ISER[NVIC_InitStruct->NVIC_IRQ >> 0x05] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQ & (uint8_t)0x1F);
 8003488:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <NVIC_Init+0x128>)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    else
    {
        /* Disable the Selected IRQ Channels -------------------------------------*/
        NVIC->ICER[NVIC_InitStruct->NVIC_IRQ >> 0x05] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQ & (uint8_t)0x1F);
    }
}
 80034a6:	e00f      	b.n	80034c8 <NVIC_Init+0x118>
        NVIC->ISER[NVIC_InitStruct->NVIC_IRQ >> 0x05] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQ & (uint8_t)0x1F);
    }
    else
    {
        /* Disable the Selected IRQ Channels -------------------------------------*/
        NVIC->ICER[NVIC_InitStruct->NVIC_IRQ >> 0x05] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQ & (uint8_t)0x1F);
 80034a8:	490b      	ldr	r1, [pc, #44]	; (80034d8 <NVIC_Init+0x128>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	f100 0320 	add.w	r3, r0, #32
 80034c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e000ed00 	.word	0xe000ed00
 80034d8:	e000e100 	.word	0xe000e100

080034dc <NVIC_VectTableSet>:
  * @param  NVIC_VectTab: NVIC_VECTTAB_RAM,NVIC_VECTTAB_FLASH
  * @param  Offset: Vector Table start address.
  * @retval None
  */
void NVIC_VectTableSet(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
    SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80034e6:	4907      	ldr	r1, [pc, #28]	; (8003504 <NVIC_VectTableSet+0x28>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80034ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_SystemLowPowerConfig>:
  * @param  LowPowerMode: NVIC_LOWPOWER_SEVONPEND,NVIC_LOWPOWER_SLEEPDEEP,NVIC_LOWPOWER_SLEEPONEXIT.
  * @param  NewValue: new value of Low Power state. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLowPowerConfig(uint8_t LowPowerMode, TypeState NewValue)
{ 
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	460a      	mov	r2, r1
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4613      	mov	r3, r2
 8003516:	71bb      	strb	r3, [r7, #6]
    if (NewValue != DISABLE)
 8003518:	79bb      	ldrb	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <NVIC_SystemLowPowerConfig+0x24>
    {
        SCB->SCR |= LowPowerMode;
 800351e:	4909      	ldr	r1, [pc, #36]	; (8003544 <NVIC_SystemLowPowerConfig+0x3c>)
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <NVIC_SystemLowPowerConfig+0x3c>)
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
    }
    else
    {
        SCB->SCR &= (~(uint32_t)LowPowerMode);
    }
}
 800352a:	e006      	b.n	800353a <NVIC_SystemLowPowerConfig+0x32>
    {
        SCB->SCR |= LowPowerMode;
    }
    else
    {
        SCB->SCR &= (~(uint32_t)LowPowerMode);
 800352c:	4905      	ldr	r1, [pc, #20]	; (8003544 <NVIC_SystemLowPowerConfig+0x3c>)
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <NVIC_SystemLowPowerConfig+0x3c>)
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	43db      	mvns	r3, r3
 8003536:	4013      	ands	r3, r2
 8003538:	610b      	str	r3, [r1, #16]
    }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <SysTick_CKSource_Enable>:
  * @brief  Specify the SysTick clock source.
  * @param  SysTick_CKSource: SYSTICK_CKSOURCE_HCLK_DIV8,SYSTICK_CKSOURCE_HCLK.
  * @retval None
  */
void SysTick_CKSource_Enable(uint32_t SysTick_CKSource)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    if (SysTick_CKSource == SYSTICK_CKSOURCE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d106      	bne.n	8003564 <SysTick_CKSource_Enable+0x1c>
    {
        SysTick->CTRL |= SYSTICK_CKSOURCE_HCLK;
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <SysTick_CKSource_Enable+0x34>)
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <SysTick_CKSource_Enable+0x34>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6013      	str	r3, [r2, #0]
    }
    else
    {
        SysTick->CTRL &= SYSTICK_CKSOURCE_HCLK_DIV8;
    }
}
 8003562:	e005      	b.n	8003570 <SysTick_CKSource_Enable+0x28>
    {
        SysTick->CTRL |= SYSTICK_CKSOURCE_HCLK;
    }
    else
    {
        SysTick->CTRL &= SYSTICK_CKSOURCE_HCLK_DIV8;
 8003564:	4a05      	ldr	r2, [pc, #20]	; (800357c <SysTick_CKSource_Enable+0x34>)
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <SysTick_CKSource_Enable+0x34>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6013      	str	r3, [r2, #0]
    }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e010 	.word	0xe000e010

08003580 <SDIO_DeInit>:
  * @brief  Deinitialize the SDIO .
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
    SDIO->POWER = 0x00000000;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <SDIO_DeInit+0x44>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
    SDIO->CLKCTLR = 0x00000000;
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <SDIO_DeInit+0x44>)
 800358c:	2200      	movs	r2, #0
 800358e:	605a      	str	r2, [r3, #4]
    SDIO->PARA = 0x00000000;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <SDIO_DeInit+0x44>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
    SDIO->CMD = 0x00000000;
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <SDIO_DeInit+0x44>)
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]
    SDIO->DTTR = 0x00000000;
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <SDIO_DeInit+0x44>)
 800359e:	2200      	movs	r2, #0
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
    SDIO->DTLEN = 0x00000000;
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <SDIO_DeInit+0x44>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28
    SDIO->DTCTLR = 0x00000000;
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <SDIO_DeInit+0x44>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c
    SDIO->ICR = 0x00C007FF;
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <SDIO_DeInit+0x44>)
 80035b0:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <SDIO_DeInit+0x48>)
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
    SDIO->IER = 0x00000000;
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <SDIO_DeInit+0x44>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40018000 	.word	0x40018000
 80035c8:	00c007ff 	.word	0x00c007ff

080035cc <SDIO_Init>:
  * @brief  Initialize the SDIO .
  * @param  SDIO_InitParaStruct : pointer to a SDIO_InitPara structure .
  * @retval None
  */
void SDIO_Init(SDIO_InitPara* SDIO_InitParaStruct)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

/*---------------------------- SDIO CLKCTLR Configuration ------------------------*/  
    /* Get the SDIO CLKCTLR value */
    temp = SDIO->CLKCTLR;
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <SDIO_Init+0x58>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]

    /* Clear CLKCTLR register */
    temp &= CLKCTLR_CLEAR_MASK;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80035e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035e8:	60fb      	str	r3, [r7, #12]
    /* Configure the SDIO_ClockPWRSave value */
    /* Configure the SDIO_ClockBypassState value */
    /* Configure the SDIO_BusMode value */
    /* Configure the SDIO_ClockEdge value */
    /* Configure the SDIO_HWFlowCtrlState value */
    temp |= (SDIO_InitParaStruct->SDIO_ClockDiv   | SDIO_InitParaStruct->SDIO_ClockPWRSave |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7d1b      	ldrb	r3, [r3, #20]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	431a      	orrs	r2, r3
               SDIO_InitParaStruct->SDIO_ClockBypassState| SDIO_InitParaStruct->SDIO_BusMode |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    /* Configure the SDIO_ClockPWRSave value */
    /* Configure the SDIO_ClockBypassState value */
    /* Configure the SDIO_BusMode value */
    /* Configure the SDIO_ClockEdge value */
    /* Configure the SDIO_HWFlowCtrlState value */
    temp |= (SDIO_InitParaStruct->SDIO_ClockDiv   | SDIO_InitParaStruct->SDIO_ClockPWRSave |
 80035fa:	431a      	orrs	r2, r3
               SDIO_InitParaStruct->SDIO_ClockBypassState| SDIO_InitParaStruct->SDIO_BusMode |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	431a      	orrs	r2, r3
               SDIO_InitParaStruct->SDIO_ClockEdge  | SDIO_InitParaStruct->SDIO_HWFlowCtrlState); 
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
    /* Configure the SDIO_ClockBypassState value */
    /* Configure the SDIO_BusMode value */
    /* Configure the SDIO_ClockEdge value */
    /* Configure the SDIO_HWFlowCtrlState value */
    temp |= (SDIO_InitParaStruct->SDIO_ClockDiv   | SDIO_InitParaStruct->SDIO_ClockPWRSave |
               SDIO_InitParaStruct->SDIO_ClockBypassState| SDIO_InitParaStruct->SDIO_BusMode |
 8003606:	431a      	orrs	r2, r3
               SDIO_InitParaStruct->SDIO_ClockEdge  | SDIO_InitParaStruct->SDIO_HWFlowCtrlState); 
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	4313      	orrs	r3, r2
    /* Configure the SDIO_ClockPWRSave value */
    /* Configure the SDIO_ClockBypassState value */
    /* Configure the SDIO_BusMode value */
    /* Configure the SDIO_ClockEdge value */
    /* Configure the SDIO_HWFlowCtrlState value */
    temp |= (SDIO_InitParaStruct->SDIO_ClockDiv   | SDIO_InitParaStruct->SDIO_ClockPWRSave |
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
               SDIO_InitParaStruct->SDIO_ClockBypassState| SDIO_InitParaStruct->SDIO_BusMode |
               SDIO_InitParaStruct->SDIO_ClockEdge  | SDIO_InitParaStruct->SDIO_HWFlowCtrlState); 

	/* Update the SDIO CLKCTLR */
    SDIO->CLKCTLR = temp;
 8003614:	4a03      	ldr	r2, [pc, #12]	; (8003624 <SDIO_Init+0x58>)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6053      	str	r3, [r2, #4]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40018000 	.word	0x40018000

08003628 <SDIO_ParaInit>:
  * @brief  Fill each SDIO_InitParaStruct Struct member with a default value.
  * @param  SDIO_InitParaStruct: pointer to an SDIO_InitPara structure.
  * @retval None
  */
void SDIO_ParaInit(SDIO_InitPara* SDIO_InitParaStruct)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
    /* Fill the default value */
    SDIO_InitParaStruct->SDIO_ClockDiv = 0x00;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	751a      	strb	r2, [r3, #20]
    SDIO_InitParaStruct->SDIO_ClockEdge = SDIO_CLOCKEDGE_RISING;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    SDIO_InitParaStruct->SDIO_ClockBypassState= SDIO_CLOCKBYPASSSTATE_DISABLE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
    SDIO_InitParaStruct->SDIO_ClockPWRSave = SDIO_CLOCKPWRSAVE_DISABLE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
    SDIO_InitParaStruct->SDIO_BusMode = SDIO_BUSMODE_1B;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
    SDIO_InitParaStruct->SDIO_HWFlowCtrlState = SDIO_HWFLOWCTRLSTATE_DISABLE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop

08003660 <SDIO_Clock_Enable>:
  * @brief  ENABLE or DISABLE the SDIO Clock.
  * @param  NewValue:  ENABLE or DISABLE.
  * @retval None
  */
void SDIO_Clock_Enable(TypeState NewValue)
{ 
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <SDIO_Clock_Enable+0x1e>
    {
        SDIO->CLKCTLR |= SDIO_CLKCTLR_CKEN;
 8003670:	4a09      	ldr	r2, [pc, #36]	; (8003698 <SDIO_Clock_Enable+0x38>)
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <SDIO_Clock_Enable+0x38>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367a:	6053      	str	r3, [r2, #4]
    }
    else
    {
        SDIO->CLKCTLR &= (uint16_t)~( ( uint16_t )SDIO_CLKCTLR_CKEN);
    }
}
 800367c:	e006      	b.n	800368c <SDIO_Clock_Enable+0x2c>
    {
        SDIO->CLKCTLR |= SDIO_CLKCTLR_CKEN;
    }
    else
    {
        SDIO->CLKCTLR &= (uint16_t)~( ( uint16_t )SDIO_CLKCTLR_CKEN);
 800367e:	4906      	ldr	r1, [pc, #24]	; (8003698 <SDIO_Clock_Enable+0x38>)
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SDIO_Clock_Enable+0x38>)
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003688:	4013      	ands	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
    }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40018000 	.word	0x40018000

0800369c <SDIO_SetPWRState>:
  *     @arg SDIO_PWRSTATE_ON
  *     @arg SDIO_PWRSTATE_OFF
  * @retval None
  */
void SDIO_SetPWRState(uint32_t SDIO_PwrState)
{ 
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    /* Clear POWER register */
    SDIO->POWER &= POWER_PWRSTATE_MASK;
 80036a4:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <SDIO_SetPWRState+0x2c>)
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <SDIO_SetPWRState+0x2c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	6013      	str	r3, [r2, #0]
	
	/* Update the SDIO POWER */
    SDIO->POWER |= SDIO_PwrState;
 80036b0:	4905      	ldr	r1, [pc, #20]	; (80036c8 <SDIO_SetPWRState+0x2c>)
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <SDIO_SetPWRState+0x2c>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40018000 	.word	0x40018000

080036cc <SDIO_GetPWRState>:
  *      - 0x00: Power OFF
  *      - 0x02: Power UP
  *      - 0x03: Power ON 
  */
uint32_t SDIO_GetPWRState(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
    return (SDIO->POWER & (~POWER_PWRSTATE_MASK));
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <SDIO_GetPWRState+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0303 	and.w	r3, r3, #3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40018000 	.word	0x40018000

080036e4 <SDIO_INTConfig>:
  *     @arg SDIO_INT_ATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_INTConfig(uint32_t SDIO_INT, TypeState NewValue)
{ 
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d006      	beq.n	8003704 <SDIO_INTConfig+0x20>
    {
        /* Enable the interrupt */
        SDIO->IER |= SDIO_INT;
 80036f6:	4909      	ldr	r1, [pc, #36]	; (800371c <SDIO_INTConfig+0x38>)
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <SDIO_INTConfig+0x38>)
 80036fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4313      	orrs	r3, r2
 8003700:	63cb      	str	r3, [r1, #60]	; 0x3c
    else
    {
        /* Disable the interrupt */
        SDIO->IER &= ~SDIO_INT;
    } 
}
 8003702:	e006      	b.n	8003712 <SDIO_INTConfig+0x2e>
        SDIO->IER |= SDIO_INT;
    }
    else
    {
        /* Disable the interrupt */
        SDIO->IER &= ~SDIO_INT;
 8003704:	4905      	ldr	r1, [pc, #20]	; (800371c <SDIO_INTConfig+0x38>)
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <SDIO_INTConfig+0x38>)
 8003708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	43db      	mvns	r3, r3
 800370e:	4013      	ands	r3, r2
 8003710:	63cb      	str	r3, [r1, #60]	; 0x3c
    } 
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40018000 	.word	0x40018000

08003720 <SDIO_DMA_Enable>:
  * @brief  Enable or disable the DMA request for SDIO.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMA_Enable(TypeState NewValue)
{ 
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <SDIO_DMA_Enable+0x1e>
    {
	    /* Enable DMA request */
        SDIO->DTCTLR |= SDIO_DTCTLR_DMAEN;
 8003730:	4a09      	ldr	r2, [pc, #36]	; (8003758 <SDIO_DMA_Enable+0x38>)
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <SDIO_DMA_Enable+0x38>)
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	62d3      	str	r3, [r2, #44]	; 0x2c
    else
    {
	    /* Disenable DMA request */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_DMAEN);
    }
}
 800373c:	e006      	b.n	800374c <SDIO_DMA_Enable+0x2c>
        SDIO->DTCTLR |= SDIO_DTCTLR_DMAEN;
    }
    else
    {
	    /* Disenable DMA request */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_DMAEN);
 800373e:	4906      	ldr	r1, [pc, #24]	; (8003758 <SDIO_DMA_Enable+0x38>)
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <SDIO_DMA_Enable+0x38>)
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8003748:	4013      	ands	r3, r2
 800374a:	62cb      	str	r3, [r1, #44]	; 0x2c
    }
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40018000 	.word	0x40018000

0800375c <SDIO_SendCMD>:
  * @brief  Initialize the SDIO Command.
  * @param  SDIO_CmdInitParaStruct : pointer to a SDIO_CmdInitPara structure. 
  * @retval None
  */
void SDIO_SendCMD(SDIO_CmdInitPara * SDIO_CmdInitParaStruct)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

/*---------------------------- SDIO PARA Configuration ------------------------*/
    /* Configure the SDIO_CMDParameter value */
    SDIO->PARA = SDIO_CmdInitParaStruct->SDIO_CMDParameter;
 8003768:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <SDIO_SendCMD+0x54>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
    /* Get the SDIO CMD value */
    temp = SDIO->CMD;
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <SDIO_SendCMD+0x54>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60fb      	str	r3, [r7, #12]
    /* Clear CMD register */
    temp &= CMD_CLEAR_MASK;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800377c:	f023 0307 	bic.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
    /* Configure the SDIO_CMDIndex value */
    /* Configure the SDIO_ResponseType value */
    /* Configure the SDIO_WaitINTState value */
    /* Configure the SDIO_CSMState value */
    temp |= (uint32_t)SDIO_CmdInitParaStruct->SDIO_CMDIndex | SDIO_CmdInitParaStruct->SDIO_ResponseType
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	431a      	orrs	r2, r3
                    | SDIO_CmdInitParaStruct->SDIO_WaitINTState | SDIO_CmdInitParaStruct->SDIO_CSMState;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	4313      	orrs	r3, r2
    temp &= CMD_CLEAR_MASK;
    /* Configure the SDIO_CMDIndex value */
    /* Configure the SDIO_ResponseType value */
    /* Configure the SDIO_WaitINTState value */
    /* Configure the SDIO_CSMState value */
    temp |= (uint32_t)SDIO_CmdInitParaStruct->SDIO_CMDIndex | SDIO_CmdInitParaStruct->SDIO_ResponseType
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
                    | SDIO_CmdInitParaStruct->SDIO_WaitINTState | SDIO_CmdInitParaStruct->SDIO_CSMState;

    /* Update the SDIO CMD */
    SDIO->CMD = temp;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <SDIO_SendCMD+0x54>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40018000 	.word	0x40018000

080037b4 <SDIO_CMDParaInit>:
  * @brief  Fill SDIO_CmdInitStruct member with a default value.
  * @param  SDIO_CmdInitParaStruct: pointer to an SDIO_CmdInitPara structure.
  * @retval None
  */
void SDIO_CMDParaInit(SDIO_CmdInitPara* SDIO_CmdInitParaStruct)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    /* Fill the default value */
    SDIO_CmdInitParaStruct->SDIO_CMDParameter = 0x00;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
    SDIO_CmdInitParaStruct->SDIO_CMDIndex = 0x00;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
    SDIO_CmdInitParaStruct->SDIO_ResponseType = SDIO_RESPONSETYPE_NO ;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
    SDIO_CmdInitParaStruct->SDIO_WaitINTState= SDIO_WAITINTSTATE_NO;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
    SDIO_CmdInitParaStruct->SDIO_CSMState = SDIO_CSMSTATE_DISABLE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <SDIO_GetCMDResponse>:
  * @brief  Return last response command index.
  * @param  None
  * @retval Return last response command index.
  */
uint8_t SDIO_GetCMDResponse(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
    return (uint8_t)(SDIO->RESPCMD);
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <SDIO_GetCMDResponse+0x14>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	b2db      	uxtb	r3, r3
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40018000 	.word	0x40018000

080037fc <SDIO_GetResponse>:
  *     @arg SDIO_RESP3: Response Register 3
  *     @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    __IO uint32_t temp = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]

    temp = SDIO_RESP_ADDR + SDIO_RESP;
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SDIO_GetResponse+0x24>)
 800380c:	4413      	add	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]

    return (*(__IO uint32_t *) temp); 
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40018014 	.word	0x40018014

08003824 <SDIO_DataConfig>:
  * @brief  Initialize the SDIO SDIO_DataInitParaStruct members.
  * @param  SDIO_DataInitParaStruct : pointer to a SDIO_DataInitPara structure.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitPara* SDIO_DataInitParaStruct)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]

/*---------------------------- SDIO DTTR Configuration ---------------------*/
    /* Set the SDIO SDIO_DataTimeOut value */
    SDIO->DTTR = SDIO_DataInitParaStruct->SDIO_DataTimeOut;
 8003830:	4a12      	ldr	r2, [pc, #72]	; (800387c <SDIO_DataConfig+0x58>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DTLEN Configuration -----------------------*/
    /* Set the SDIO SDIO_DataLength value */
    SDIO->DTLEN = SDIO_DataInitParaStruct->SDIO_DataLength;
 8003838:	4a10      	ldr	r2, [pc, #64]	; (800387c <SDIO_DataConfig+0x58>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DTCTLR Configuration ----------------------*/  
    /* Get the SDIO DTCTLR value */
    temp = SDIO->DTCTLR;
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <SDIO_DataConfig+0x58>)
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	60fb      	str	r3, [r7, #12]
    /* Clear DTCTLR register */
    temp &= DTCTLR_CLEAR_MASK;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800384c:	60fb      	str	r3, [r7, #12]
    /* Configure the SDIO_DataBlockSize value */
    /* Configure the SDIO_TransDirection value */
    /* Configure the SDIO_TransMode value */
    /* Configure the SDIO_DSMState value */
    temp |= (uint32_t)SDIO_DataInitParaStruct->SDIO_DataBlockSize | SDIO_DataInitParaStruct->SDIO_TransDirection
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	431a      	orrs	r2, r3
                    | SDIO_DataInitParaStruct->SDIO_TransMode | SDIO_DataInitParaStruct->SDIO_DSMState;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4313      	orrs	r3, r2
    temp &= DTCTLR_CLEAR_MASK;
    /* Configure the SDIO_DataBlockSize value */
    /* Configure the SDIO_TransDirection value */
    /* Configure the SDIO_TransMode value */
    /* Configure the SDIO_DSMState value */
    temp |= (uint32_t)SDIO_DataInitParaStruct->SDIO_DataBlockSize | SDIO_DataInitParaStruct->SDIO_TransDirection
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
                    | SDIO_DataInitParaStruct->SDIO_TransMode | SDIO_DataInitParaStruct->SDIO_DSMState;

    /* Update the SDIO DTCTLR */
    SDIO->DTCTLR = temp;
 800386a:	4a04      	ldr	r2, [pc, #16]	; (800387c <SDIO_DataConfig+0x58>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40018000 	.word	0x40018000

08003880 <SDIO_DataParaInit>:
  * @brief  Fill each SDIO_DataInitParaStruct member with a default value.
  * @param  SDIO_DataInitParaStruct: pointer to an SDIO_DataInitPara structure.
  * @retval None
  */
void SDIO_DataParaInit(SDIO_DataInitPara* SDIO_DataInitParaStruct)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    /* Fill the default value */
    SDIO_DataInitParaStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f04f 32ff 	mov.w	r2, #4294967295
 800388e:	601a      	str	r2, [r3, #0]
    SDIO_DataInitParaStruct->SDIO_DataLength = 0x00;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	605a      	str	r2, [r3, #4]
    SDIO_DataInitParaStruct->SDIO_DataBlockSize = SDIO_DATABLOCKSIZE_1B;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    SDIO_DataInitParaStruct->SDIO_TransDirection = SDIO_TRANSDIRECTION_TOCARD;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
    SDIO_DataInitParaStruct->SDIO_TransMode = SDIO_TRANSMODE_BLOCK;  
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	611a      	str	r2, [r3, #16]
    SDIO_DataInitParaStruct->SDIO_DSMState = SDIO_DSMSTATE_DISABLE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	615a      	str	r2, [r3, #20]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <SDIO_GetDataCount>:
  * @brief  Return the number of remaining data bytes to be transferred to card.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCount(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
    return SDIO->DTCNT;
 80038bc:	4b02      	ldr	r3, [pc, #8]	; (80038c8 <SDIO_GetDataCount+0x10>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	40018000 	.word	0x40018000

080038cc <SDIO_ReadData>:
  * @brief  Read one word from receive FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
    return SDIO->FIFO;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <SDIO_ReadData+0x14>)
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40018000 	.word	0x40018000

080038e4 <SDIO_WriteData>:
  * @brief  Write one word to transmit FIFO.
  * @param  Data: 32-bit data write to the card.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
    SDIO->FIFO = Data;
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <SDIO_WriteData+0x1c>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40018000 	.word	0x40018000

08003904 <SDIO_GetFIFOCount>:
  * @brief  Return the number of words remaining to be written or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
    return SDIO->FIFOCNT;
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <SDIO_GetFIFOCount+0x10>)
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40018000 	.word	0x40018000

08003918 <SDIO_StartSDIOReadWait>:
  * @brief  Start SD I/O Read Wait operation.	
  * @param  NewValue:  ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(TypeState NewValue)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <SDIO_StartSDIOReadWait+0x1e>
    {
	    /* Start Read Wait operation  */
        SDIO->DTCTLR |= SDIO_DTCTLR_RWSTART;
 8003928:	4a09      	ldr	r2, [pc, #36]	; (8003950 <SDIO_StartSDIOReadWait+0x38>)
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <SDIO_StartSDIOReadWait+0x38>)
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    else
    {
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_RWSTART);
    }
}
 8003934:	e006      	b.n	8003944 <SDIO_StartSDIOReadWait+0x2c>
	    /* Start Read Wait operation  */
        SDIO->DTCTLR |= SDIO_DTCTLR_RWSTART;
    }
    else
    {
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_RWSTART);
 8003936:	4906      	ldr	r1, [pc, #24]	; (8003950 <SDIO_StartSDIOReadWait+0x38>)
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SDIO_StartSDIOReadWait+0x38>)
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003940:	4013      	ands	r3, r2
 8003942:	62cb      	str	r3, [r1, #44]	; 0x2c
    }
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40018000 	.word	0x40018000

08003954 <SDIO_StopSDIOReadWait>:
  * @brief  Stop the SD I/O Read Wait operation.	
  * @param  NewValue:  ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(TypeState NewValue)
{ 
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <SDIO_StopSDIOReadWait+0x1e>
    {
        SDIO->DTCTLR |= SDIO_DTCTLR_RWSTOP;
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <SDIO_StopSDIOReadWait+0x38>)
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <SDIO_StopSDIOReadWait+0x38>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800396e:	62d3      	str	r3, [r2, #44]	; 0x2c
    else
    {
	    /* Stop Read Wait operation  */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_RWSTOP);
    }
}
 8003970:	e006      	b.n	8003980 <SDIO_StopSDIOReadWait+0x2c>
        SDIO->DTCTLR |= SDIO_DTCTLR_RWSTOP;
    }
    else
    {
	    /* Stop Read Wait operation  */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_RWSTOP);
 8003972:	4906      	ldr	r1, [pc, #24]	; (800398c <SDIO_StopSDIOReadWait+0x38>)
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <SDIO_StopSDIOReadWait+0x38>)
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800397c:	4013      	ands	r3, r2
 800397e:	62cb      	str	r3, [r1, #44]	; 0x2c
    }
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40018000 	.word	0x40018000

08003990 <SDIO_SetSDIOReadWaitMode>:
  *     @arg SDIO_READWAITMODE_CLK: Read Wait operation realize by stopping SDIOCLK
  *     @arg SDIO_READWAITMODE_DAT2: Read Wait operation use SDIO_DAT2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
    if ( SDIO_ReadWaitMode == SDIO_READWAITMODE_CLK )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d106      	bne.n	80039ac <SDIO_SetSDIOReadWaitMode+0x1c>
    {
	    /* Read Wait operation stop SDIOCLK  */
        SDIO->DTCTLR |= SDIO_DTCTLR_RWMODE;
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <SDIO_SetSDIOReadWaitMode+0x34>)
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <SDIO_SetSDIOReadWaitMode+0x34>)
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    else
    {
	    /* Read Wait operation use SDIO_DAT2  */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_RWMODE);
    }
}
 80039aa:	e006      	b.n	80039ba <SDIO_SetSDIOReadWaitMode+0x2a>
        SDIO->DTCTLR |= SDIO_DTCTLR_RWMODE;
    }
    else
    {
	    /* Read Wait operation use SDIO_DAT2  */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_RWMODE);
 80039ac:	4905      	ldr	r1, [pc, #20]	; (80039c4 <SDIO_SetSDIOReadWaitMode+0x34>)
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <SDIO_SetSDIOReadWaitMode+0x34>)
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80039b6:	4013      	ands	r3, r2
 80039b8:	62cb      	str	r3, [r1, #44]	; 0x2c
    }
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	40018000 	.word	0x40018000

080039c8 <SDIO_SetSDIOOperation>:
  * @brief  SD I/O Mode Operation configuration.
  * @param  NewValue:  ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(TypeState NewValue)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <SDIO_SetSDIOOperation+0x1e>
    {
	    /* Enable I/O Mode Operation  */
        SDIO->DTCTLR |= SDIO_DTCTLR_SDIOEN;
 80039d8:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <SDIO_SetSDIOOperation+0x38>)
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <SDIO_SetSDIOOperation+0x38>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    else
    {
	    /* Disenable I/O Mode Operation  */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_SDIOEN);
    }
}
 80039e4:	e006      	b.n	80039f4 <SDIO_SetSDIOOperation+0x2c>
        SDIO->DTCTLR |= SDIO_DTCTLR_SDIOEN;
    }
    else
    {
	    /* Disenable I/O Mode Operation  */
        SDIO->DTCTLR &= (uint16_t)~( ( uint16_t )SDIO_DTCTLR_SDIOEN);
 80039e6:	4906      	ldr	r1, [pc, #24]	; (8003a00 <SDIO_SetSDIOOperation+0x38>)
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <SDIO_SetSDIOOperation+0x38>)
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	62cb      	str	r3, [r1, #44]	; 0x2c
    }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40018000 	.word	0x40018000

08003a04 <SDIO_SendSDIOSuspend_Enable>:
  * @brief  Enable or disable the SD I/O suspend operation.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspend_Enable(TypeState NewValue)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <SDIO_SendSDIOSuspend_Enable+0x1e>
    {
	    /* Enable suspend operation  */
        SDIO->CMD |= SDIO_CMD_SDIOSUSPEND;
 8003a14:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <SDIO_SendSDIOSuspend_Enable+0x38>)
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <SDIO_SendSDIOSuspend_Enable+0x38>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a1e:	60d3      	str	r3, [r2, #12]
    else
    {
	    /* Disenable suspend operation  */
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_SDIOSUSPEND);
    }
}
 8003a20:	e006      	b.n	8003a30 <SDIO_SendSDIOSuspend_Enable+0x2c>
        SDIO->CMD |= SDIO_CMD_SDIOSUSPEND;
    }
    else
    {
	    /* Disenable suspend operation  */
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_SDIOSUSPEND);
 8003a22:	4906      	ldr	r1, [pc, #24]	; (8003a3c <SDIO_SendSDIOSuspend_Enable+0x38>)
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <SDIO_SendSDIOSuspend_Enable+0x38>)
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60cb      	str	r3, [r1, #12]
    }
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40018000 	.word	0x40018000

08003a40 <SDIO_CMDCompletion_Enable>:
  * @brief  Enable or disable the CE-ATA command completion signal.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CMDCompletion_Enable(TypeState NewValue)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <SDIO_CMDCompletion_Enable+0x1e>
    {
	    /* Enable CE-ATA command completion signal  */
        SDIO->CMD |= SDIO_CMD_ENCMDC;
 8003a50:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <SDIO_CMDCompletion_Enable+0x38>)
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <SDIO_CMDCompletion_Enable+0x38>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a5a:	60d3      	str	r3, [r2, #12]
    else
    {
	    /* Disenable CE-ATA command completion signal  */
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_ENCMDC);
    }
}
 8003a5c:	e006      	b.n	8003a6c <SDIO_CMDCompletion_Enable+0x2c>
        SDIO->CMD |= SDIO_CMD_ENCMDC;
    }
    else
    {
	    /* Disenable CE-ATA command completion signal  */
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_ENCMDC);
 8003a5e:	4906      	ldr	r1, [pc, #24]	; (8003a78 <SDIO_CMDCompletion_Enable+0x38>)
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <SDIO_CMDCompletion_Enable+0x38>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003a68:	4013      	ands	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
    }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40018000 	.word	0x40018000

08003a7c <SDIO_CEATAInt_Enable>:
  * @brief  Enable or disable the CE-ATA interrupt.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAInt_Enable(TypeState NewValue)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != ENABLE )
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d006      	beq.n	8003a9a <SDIO_CEATAInt_Enable+0x1e>
    {
	    /* Enable CE-ATA interrupt  */
        SDIO->CMD |= SDIO_CMD_NIEN;
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <SDIO_CEATAInt_Enable+0x38>)
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <SDIO_CEATAInt_Enable+0x38>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a96:	60d3      	str	r3, [r2, #12]
    else
    {
	    /* Disenable CE-ATA interrupt  */
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_NIEN);
    }
}
 8003a98:	e006      	b.n	8003aa8 <SDIO_CEATAInt_Enable+0x2c>
        SDIO->CMD |= SDIO_CMD_NIEN;
    }
    else
    {
	    /* Disenable CE-ATA interrupt  */
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_NIEN);
 8003a9a:	4906      	ldr	r1, [pc, #24]	; (8003ab4 <SDIO_CEATAInt_Enable+0x38>)
 8003a9c:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <SDIO_CEATAInt_Enable+0x38>)
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
    }
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40018000 	.word	0x40018000

08003ab8 <SDIO_SendCEATA_Enable>:
  * @brief  Send CE-ATA command (CMD61).
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATA_Enable(TypeState NewValue)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
    if ( NewValue != DISABLE )
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <SDIO_SendCEATA_Enable+0x1e>
    {
        SDIO->CMD |= SDIO_CMD_ATACMD;
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <SDIO_SendCEATA_Enable+0x38>)
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <SDIO_SendCEATA_Enable+0x38>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad2:	60d3      	str	r3, [r2, #12]
    }
    else
    {
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_ATACMD);
    }
}
 8003ad4:	e006      	b.n	8003ae4 <SDIO_SendCEATA_Enable+0x2c>
    {
        SDIO->CMD |= SDIO_CMD_ATACMD;
    }
    else
    {
        SDIO->CMD &= (uint16_t)~( ( uint16_t )SDIO_CMD_ATACMD);
 8003ad6:	4906      	ldr	r1, [pc, #24]	; (8003af0 <SDIO_SendCEATA_Enable+0x38>)
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <SDIO_SendCEATA_Enable+0x38>)
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60cb      	str	r3, [r1, #12]
    }
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40018000 	.word	0x40018000

08003af4 <SDIO_GetBitState>:
  *     @arg SDIO_FLAG_SDIOINT:   SD I/O interrupt received
  *     @arg SDIO_FLAG_ATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
TypeState SDIO_GetBitState(uint32_t SDIO_FLAG)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    if ((SDIO->STR & SDIO_FLAG) != (uint32_t)RESET)
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <SDIO_GetBitState+0x24>)
 8003afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <SDIO_GetBitState+0x18>
    {
        return SET;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <SDIO_GetBitState+0x1a>
    }
    else
    {
        return RESET;
 8003b0c:	2300      	movs	r3, #0
    }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	40018000 	.word	0x40018000

08003b1c <SDIO_ClearBitState>:
  *     @arg SDIO_FLAG_SDIOINT:   SD I/O interrupt received
  *     @arg SDIO_FLAG_ATAEND:    CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearBitState(uint32_t SDIO_FLAG)
{    
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    SDIO->ICR = SDIO_FLAG;
 8003b24:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <SDIO_ClearBitState+0x18>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40018000 	.word	0x40018000

08003b38 <SDIO_GetIntBitState>:
  *     @arg SDIO_INT_SDIOINT:   SD I/O interrupt received interrupt
  *     @arg SDIO_INT_ATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_INT (SET or RESET).
  */
TypeState SDIO_GetIntBitState(uint32_t SDIO_INT)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    if ((SDIO->STR & SDIO_INT) != (uint32_t)RESET)  
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <SDIO_GetIntBitState+0x24>)
 8003b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <SDIO_GetIntBitState+0x18>
    {
        return SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <SDIO_GetIntBitState+0x1a>
    }
    else
    {
        return RESET;
 8003b50:	2300      	movs	r3, #0
    }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	40018000 	.word	0x40018000

08003b60 <SDIO_ClearIntBitState>:
  *     @arg SDIO_INT_SDIOINT:   SD I/O interrupt received interrupt
  *     @arg SDIO_INT_ATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearIntBitState(uint32_t SDIO_INT)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
    SDIO->ICR = SDIO_INT;
 8003b68:	4a03      	ldr	r2, [pc, #12]	; (8003b78 <SDIO_ClearIntBitState+0x18>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40018000 	.word	0x40018000

08003b7c <SPI_I2S_DeInit>:
  * @brief  Reset the SPIx and the I2Sx peripheral.
  * @param  SPIx: Specifies the SPI and the I2S peripheral which will be reset.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
    if (SPIx == SPI1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <SPI_I2S_DeInit+0x68>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d10a      	bne.n	8003ba2 <SPI_I2S_DeInit+0x26>
    {
        /* Reset SPI1 */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_SPI1, ENABLE);
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b92:	f7fd fe61 	bl	8001858 <RCC_APB2PeriphReset_Enable>

        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_SPI1, DISABLE);
 8003b96:	2100      	movs	r1, #0
 8003b98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b9c:	f7fd fe5c 	bl	8001858 <RCC_APB2PeriphReset_Enable>
    {
        /* Reset SPI3 and I2S3 peripheral */
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI3, ENABLE);
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI3, DISABLE);
    }
}
 8003ba0:	e01c      	b.n	8003bdc <SPI_I2S_DeInit+0x60>
        /* Reset SPI1 */
        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_SPI1, ENABLE);

        RCC_APB2PeriphReset_Enable(RCC_APB2PERIPH_SPI1, DISABLE);
    }
    else if (SPIx == SPI2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <SPI_I2S_DeInit+0x6c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10a      	bne.n	8003bc0 <SPI_I2S_DeInit+0x44>
    {
        /* Reset SPI2 and I2S2 peripheral */
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI2, ENABLE);
 8003baa:	2101      	movs	r1, #1
 8003bac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bb0:	f7fd fe70 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI2, DISABLE);
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bba:	f7fd fe6b 	bl	8001894 <RCC_APB1PeriphReset_Enable>
    {
        /* Reset SPI3 and I2S3 peripheral */
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI3, ENABLE);
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI3, DISABLE);
    }
}
 8003bbe:	e00d      	b.n	8003bdc <SPI_I2S_DeInit+0x60>
    {
        /* Reset SPI2 and I2S2 peripheral */
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI2, ENABLE);
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI2, DISABLE);
    }
    else if( SPIx == SPI3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <SPI_I2S_DeInit+0x70>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <SPI_I2S_DeInit+0x60>
    {
        /* Reset SPI3 and I2S3 peripheral */
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI3, ENABLE);
 8003bc8:	2101      	movs	r1, #1
 8003bca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003bce:	f7fd fe61 	bl	8001894 <RCC_APB1PeriphReset_Enable>
        RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_SPI3, DISABLE);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003bd8:	f7fd fe5c 	bl	8001894 <RCC_APB1PeriphReset_Enable>
    }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40013000 	.word	0x40013000
 8003be8:	40003800 	.word	0x40003800
 8003bec:	40003c00 	.word	0x40003c00

08003bf0 <SPI_Init>:
  * @param  SPIx: Specifies the SPI peripheral which will be initialized.
  * @param  SPI_InitParameter: The structuer contains configuration information.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitPara* SPI_InitParameter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
    uint16_t temp_ctrl1 = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	81fb      	strh	r3, [r7, #14]
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	81fb      	strh	r3, [r7, #14]
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8003c0a:	81fb      	strh	r3, [r7, #14]
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	885b      	ldrh	r3, [r3, #2]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b29a      	uxth	r2, r3
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	889b      	ldrh	r3, [r3, #4]
    uint16_t temp_ctrl1 = 0;
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	b29a      	uxth	r2, r3
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	88db      	ldrh	r3, [r3, #6]
    uint16_t temp_ctrl1 = 0;
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b29a      	uxth	r2, r3
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
                  SPI_InitParameter->SPI_SCKPH | SPI_InitParameter->SPI_SWNSSEN |  
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	891b      	ldrh	r3, [r3, #8]
    uint16_t temp_ctrl1 = 0;
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b29a      	uxth	r2, r3
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
                  SPI_InitParameter->SPI_SCKPH | SPI_InitParameter->SPI_SWNSSEN |  
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	895b      	ldrh	r3, [r3, #10]
    uint16_t temp_ctrl1 = 0;
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c34:	4313      	orrs	r3, r2
 8003c36:	b29a      	uxth	r2, r3
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
                  SPI_InitParameter->SPI_SCKPH | SPI_InitParameter->SPI_SWNSSEN |  
                  SPI_InitParameter->SPI_PSC | SPI_InitParameter->SPI_FirstBit);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	899b      	ldrh	r3, [r3, #12]
    uint16_t temp_ctrl1 = 0;
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b29a      	uxth	r2, r3
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
                  SPI_InitParameter->SPI_SCKPH | SPI_InitParameter->SPI_SWNSSEN |  
                  SPI_InitParameter->SPI_PSC | SPI_InitParameter->SPI_FirstBit);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	89db      	ldrh	r3, [r3, #14]
    uint16_t temp_ctrl1 = 0;
    
    /* Configure SPIx CTRL1 according to the SPI_InitParameter */
    temp_ctrl1 = SPIx->CTLR1;
    temp_ctrl1 &= CTLR1_CLEAR_MASK;
    temp_ctrl1 |= (uint16_t)((uint32_t)SPI_InitParameter->SPI_TransType | SPI_InitParameter->SPI_Mode |
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	89fb      	ldrh	r3, [r7, #14]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	81fb      	strh	r3, [r7, #14]
                  SPI_InitParameter->SPI_FrameFormat | SPI_InitParameter->SPI_SCKPL |  
                  SPI_InitParameter->SPI_SCKPH | SPI_InitParameter->SPI_SWNSSEN |  
                  SPI_InitParameter->SPI_PSC | SPI_InitParameter->SPI_FirstBit);
    SPIx->CTLR1 = temp_ctrl1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	89fa      	ldrh	r2, [r7, #14]
 8003c52:	801a      	strh	r2, [r3, #0]
    
    /* Configure SPIx CRC Polynomial */
    SPIx->CPR = SPI_InitParameter->SPI_CRCPOL;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	8a1a      	ldrh	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	821a      	strh	r2, [r3, #16]
    
    /* Configure the I2SSEL bit in I2SCTLR register as SPI mode */
    SPIx->I2SCTLR &= ~SPI_I2SCTLR_I2SSEL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8b9b      	ldrh	r3, [r3, #28]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	839a      	strh	r2, [r3, #28]

}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <I2S_Init>:
  * @param  SPIx: Specifies the I2S peripheral which will be initialized.
  * @param  I2S_InitParameter: The structuer contains configuration information.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitPara* I2S_InitParameter)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
    uint16_t temp_i2sctrl = 0, div = 2, of = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c86:	2302      	movs	r3, #2
 8003c88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint32_t temp = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClocksPara RCC_Clocks;
    uint32_t sourceclock = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
     
    /* SPIx I2SCTLR & I2SCKP Configuration */
    /* Deinit I2SCTLR I2SCKP register */
    SPIx->I2SCTLR &= I2SCTLR_CLEAR_MASK; 
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8b9b      	ldrh	r3, [r3, #28]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ca0:	f023 030f 	bic.w	r3, r3, #15
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	839a      	strh	r2, [r3, #28]
    SPIx->I2SCKP = 0x0002;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	841a      	strh	r2, [r3, #32]
    
    /* Default config of the prescaler*/
    if(I2S_InitParameter->I2S_AudioFreq == I2S_AUDIOFREQ_DEFAULT)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d104      	bne.n	8003cc2 <I2S_Init+0x4a>
    {
        of  = (uint16_t)0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	85bb      	strh	r3, [r7, #44]	; 0x2c
        div = (uint16_t)2;   
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003cc0:	e05c      	b.n	8003d7c <I2S_Init+0x104>
    }
    else
    {              
       /* Get the I2S clock source */
       if(((uint32_t)SPIx) == SPI2_BASE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a46      	ldr	r2, [pc, #280]	; (8003de0 <I2S_Init+0x168>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d103      	bne.n	8003cd2 <I2S_Init+0x5a>
       {
           temp = I2S2_CLOCK_SRC;
 8003cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd0:	e002      	b.n	8003cd8 <I2S_Init+0x60>
       }
       else 
       {
           temp = I2S3_CLOCK_SRC;
 8003cd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
          RCC_GetClocksFreq(&RCC_Clocks);      
          sourceclock = RCC_Clocks.CK_SYS_Frequency;
        }        
#else 
          /* Get system clock */
          RCC_GetClocksFreq(&RCC_Clocks);      
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd fc55 	bl	800158c <RCC_GetClocksFreq>
          sourceclock = RCC_Clocks.CK_SYS_Frequency;    
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	623b      	str	r3, [r7, #32]
#endif /* GD32F10X_CL */   

        /* Calculate the prescaler depending on the MCLK output state and the data format with a flaoting point. */
        if(I2S_InitParameter->I2S_MCKOE == I2S_MCK_ENABLE)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	88db      	ldrh	r3, [r3, #6]
 8003cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cee:	d10f      	bne.n	8003d10 <I2S_Init+0x98>
        {
            temp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitParameter->I2S_AudioFreq)) + 5);
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	0a1a      	lsrs	r2, r3, #8
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3305      	adds	r3, #5
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0e:	e022      	b.n	8003d56 <I2S_Init+0xde>
        }
        else
        {
            if(I2S_InitParameter->I2S_FrameFormat == I2S_FRAMEFORMAT_DL16b_CL16b)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	889b      	ldrh	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10f      	bne.n	8003d38 <I2S_Init+0xc0>
            {
                temp = (uint16_t)(((((sourceclock / 32) *10 ) / I2S_InitParameter->I2S_AudioFreq)) + 5);    
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	095a      	lsrs	r2, r3, #5
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	461a      	mov	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3305      	adds	r3, #5
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d36:	e00e      	b.n	8003d56 <I2S_Init+0xde>
            }
            else
            {
                temp = (uint16_t)(((((sourceclock / 64) *10 ) / I2S_InitParameter->I2S_AudioFreq)) + 5);
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	099a      	lsrs	r2, r3, #6
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3305      	adds	r3, #5
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        /* Remove the flaoting point */
        temp = temp / 10;     
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <I2S_Init+0x16c>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	08db      	lsrs	r3, r3, #3
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
        of  = (uint16_t)(temp & (uint16_t)0x0001);
 8003d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        div = (uint16_t)((temp - of) / 2);
 8003d6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	085b      	lsrs	r3, r3, #1
 8003d74:	85fb      	strh	r3, [r7, #46]	; 0x2e
        of  = (uint16_t) (of << 8);
 8003d76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    
    /* Inappropriate prescaler, Set the default values */
    if ((div < 1) || (div > 0xFF))
 8003d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <I2S_Init+0x110>
 8003d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d84:	2bff      	cmp	r3, #255	; 0xff
 8003d86:	d903      	bls.n	8003d90 <I2S_Init+0x118>
    {
        div = 2;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        of = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    
    /* Configure SPIx I2SCKP */
    SPIx->I2SCKP = (uint16_t)(div | (uint16_t)(of | (uint16_t)I2S_InitParameter->I2S_MCKOE));  
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	88da      	ldrh	r2, [r3, #6]
 8003d94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	841a      	strh	r2, [r3, #32]
    
    /* Configure SPIx I2SCTLR according to the I2S_InitParameter */
    temp_i2sctrl = SPIx->I2SCTLR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8b9b      	ldrh	r3, [r3, #28]
 8003da8:	84fb      	strh	r3, [r7, #38]	; 0x26
    temp_i2sctrl |= (uint16_t)(SPI_I2SCTLR_I2SSEL | (uint16_t)(I2S_InitParameter->I2S_Mode | \
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitParameter->I2S_STD | (uint16_t)(I2S_InitParameter->I2S_FrameFormat | \
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	8859      	ldrh	r1, [r3, #2]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitParameter->I2S_CKPL))));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	899b      	ldrh	r3, [r3, #12]
    SPIx->I2SCKP = (uint16_t)(div | (uint16_t)(of | (uint16_t)I2S_InitParameter->I2S_MCKOE));  
    
    /* Configure SPIx I2SCTLR according to the I2S_InitParameter */
    temp_i2sctrl = SPIx->I2SCTLR;
    temp_i2sctrl |= (uint16_t)(SPI_I2SCTLR_I2SSEL | (uint16_t)(I2S_InitParameter->I2S_Mode | \
                  (uint16_t)(I2S_InitParameter->I2S_STD | (uint16_t)(I2S_InitParameter->I2S_FrameFormat | \
 8003dba:	4303      	orrs	r3, r0
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	b29b      	uxth	r3, r3
    /* Configure SPIx I2SCKP */
    SPIx->I2SCKP = (uint16_t)(div | (uint16_t)(of | (uint16_t)I2S_InitParameter->I2S_MCKOE));  
    
    /* Configure SPIx I2SCTLR according to the I2S_InitParameter */
    temp_i2sctrl = SPIx->I2SCTLR;
    temp_i2sctrl |= (uint16_t)(SPI_I2SCTLR_I2SSEL | (uint16_t)(I2S_InitParameter->I2S_Mode | \
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dd0:	84fb      	strh	r3, [r7, #38]	; 0x26
                  (uint16_t)(I2S_InitParameter->I2S_STD | (uint16_t)(I2S_InitParameter->I2S_FrameFormat | \
                  (uint16_t)I2S_InitParameter->I2S_CKPL))));
    SPIx->I2SCTLR = temp_i2sctrl;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003dd6:	839a      	strh	r2, [r3, #28]

}
 8003dd8:	bf00      	nop
 8003dda:	3730      	adds	r7, #48	; 0x30
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40003800 	.word	0x40003800
 8003de4:	cccccccd 	.word	0xcccccccd

08003de8 <SPI_ParaInit>:
  * @brief  Initial SPI_InitParameter members.
  * @param  SPI_InitParameter : pointer to a SPI_InitPara structure.
  * @retval None
  */
void SPI_ParaInit(SPI_InitPara* SPI_InitParameter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
    /* Reset SPI init structure parameters values */
    SPI_InitParameter->SPI_TransType = SPI_TRANSTYPE_FULLDUPLEX;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	801a      	strh	r2, [r3, #0]
    SPI_InitParameter->SPI_Mode = SPI_MODE_SLAVE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	805a      	strh	r2, [r3, #2]
    SPI_InitParameter->SPI_FrameFormat = SPI_FRAMEFORMAT_8BIT;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	809a      	strh	r2, [r3, #4]
    SPI_InitParameter->SPI_SCKPL = SPI_SCKPL_LOW;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	80da      	strh	r2, [r3, #6]
    SPI_InitParameter->SPI_SCKPH = SPI_SCKPH_1EDGE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	811a      	strh	r2, [r3, #8]
    SPI_InitParameter->SPI_SWNSSEN = SPI_SWNSS_HARD;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	815a      	strh	r2, [r3, #10]
    SPI_InitParameter->SPI_PSC = SPI_PSC_2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	819a      	strh	r2, [r3, #12]
    SPI_InitParameter->SPI_FirstBit = SPI_FIRSTBIT_MSB;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	81da      	strh	r2, [r3, #14]
    SPI_InitParameter->SPI_CRCPOL = 7;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2207      	movs	r2, #7
 8003e24:	821a      	strh	r2, [r3, #16]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <I2S_ParaInit>:
  * @brief  Initial I2S_InitParameter members.
  * @param  I2S_InitParameter : pointer to a I2S_InitPara structure.
  * @retval None
  */
void I2S_ParaInit(I2S_InitPara* I2S_InitParameter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
    /* Reset I2S init structure parameters values */
    I2S_InitParameter->I2S_Mode = I2S_MODE_SLAVETX;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	801a      	strh	r2, [r3, #0]
    I2S_InitParameter->I2S_STD = I2S_STD_PHILLIPS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	805a      	strh	r2, [r3, #2]
    I2S_InitParameter->I2S_FrameFormat = I2S_FRAMEFORMAT_DL16b_CL16b;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	809a      	strh	r2, [r3, #4]
    I2S_InitParameter->I2S_MCKOE = I2S_MCK_DISABLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	80da      	strh	r2, [r3, #6]
    I2S_InitParameter->I2S_AudioFreq = I2S_AUDIOFREQ_DEFAULT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	609a      	str	r2, [r3, #8]
    I2S_InitParameter->I2S_CKPL = I2S_CKPL_LOW;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	819a      	strh	r2, [r3, #12]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <SPI_Enable>:
  * @param  SPIx: Select the SPI peripheral.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Enable(SPI_TypeDef* SPIx, TypeState NewValue)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <SPI_Enable+0x24>
    {
        SPIx->CTLR1 |= SPI_CTLR1_SPIEN;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        SPIx->CTLR1 &= ~SPI_CTLR1_SPIEN;
    }
}
 8003e8a:	e007      	b.n	8003e9c <SPI_Enable+0x34>
    {
        SPIx->CTLR1 |= SPI_CTLR1_SPIEN;
    }
    else
    {
        SPIx->CTLR1 &= ~SPI_CTLR1_SPIEN;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	801a      	strh	r2, [r3, #0]
    }
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <I2S_Enable>:
  * @param  SPIx: Select the I2S peripheral.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Enable(SPI_TypeDef* SPIx, TypeState NewValue)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <I2S_Enable+0x24>
    {
        SPIx->I2SCTLR |= SPI_I2SCTLR_I2SEN;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8b9b      	ldrh	r3, [r3, #28]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	839a      	strh	r2, [r3, #28]
    }
    else
    {
        SPIx->I2SCTLR &= ~SPI_I2SCTLR_I2SEN;
    }
}
 8003eca:	e007      	b.n	8003edc <I2S_Enable+0x34>
    {
        SPIx->I2SCTLR |= SPI_I2SCTLR_I2SEN;
    }
    else
    {
        SPIx->I2SCTLR &= ~SPI_I2SCTLR_I2SEN;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8b9b      	ldrh	r3, [r3, #28]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	839a      	strh	r2, [r3, #28]
    }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop

08003ee8 <SPI_I2S_INTConfig>:
  *     @arg SPI_I2S_INT_ERR: Error interrupt mask 
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_INTConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_INT, TypeState NewValue)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	70bb      	strb	r3, [r7, #2]
    uint16_t intmask = 0 ;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	81fb      	strh	r3, [r7, #14]
    
    /* Get the interrupt enable bit in CTRL2 */
    intmask = (uint16_t)1 << (uint16_t)(SPI_I2S_INT >> 4);
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	2301      	movs	r3, #1
 8003f06:	4093      	lsls	r3, r2
 8003f08:	81fb      	strh	r3, [r7, #14]
    
    /* Enable or disable the selected interrupt */
    if (NewValue != DISABLE)
 8003f0a:	78bb      	ldrb	r3, [r7, #2]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <SPI_I2S_INTConfig+0x3a>
    {
        SPIx->CTLR2 |= intmask;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	889b      	ldrh	r3, [r3, #4]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        SPIx->CTLR2 &= (uint16_t)~intmask;
    }
}
 8003f20:	e009      	b.n	8003f36 <SPI_I2S_INTConfig+0x4e>
    {
        SPIx->CTLR2 |= intmask;
    }
    else
    {
        SPIx->CTLR2 &= (uint16_t)~intmask;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	889b      	ldrh	r3, [r3, #4]
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	89fb      	ldrh	r3, [r7, #14]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	809a      	strh	r2, [r3, #4]
    }
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <SPI_I2S_DMA_Enable>:
  *     @arg SPI_I2S_DMA_Rx: Rx buffer DMA transfer request 
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMA_Enable(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, TypeState NewValue)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	707b      	strb	r3, [r7, #1]
    if (NewValue != DISABLE)
 8003f50:	787b      	ldrb	r3, [r7, #1]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <SPI_I2S_DMA_Enable+0x28>
    {
        SPIx->CTLR2 |= SPI_I2S_DMAReq;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	889b      	ldrh	r3, [r3, #4]
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	887b      	ldrh	r3, [r7, #2]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	809a      	strh	r2, [r3, #4]
    }
    else
    {
        SPIx->CTLR2 &= (uint16_t)~SPI_I2S_DMAReq;
    }
}
 8003f66:	e009      	b.n	8003f7c <SPI_I2S_DMA_Enable+0x3c>
    {
        SPIx->CTLR2 |= SPI_I2S_DMAReq;
    }
    else
    {
        SPIx->CTLR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	889b      	ldrh	r3, [r3, #4]
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	887b      	ldrh	r3, [r7, #2]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4013      	ands	r3, r2
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	809a      	strh	r2, [r3, #4]
    }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop

08003f88 <SPI_I2S_SendData>:
  * @param  SPIx: Select the SPI or I2S peripheral.
  * @param  Data : Data to be Send.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
    SPIx->DTR = Data;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	819a      	strh	r2, [r3, #12]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <SPI_I2S_ReceiveData>:
  * @brief  Return the received data by the SPIx or I2Sx peripheral. 
  * @param  SPIx: Select the SPI or I2S peripheral.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
    return SPIx->DTR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	899b      	ldrh	r3, [r3, #12]
 8003fb0:	b29b      	uxth	r3, r3
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <SPI_SWNSSConfig>:
  *     @arg SPI_SWNSS_Set: Set NSS pin internally
  *     @arg SPI_SWNSS_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_SWNSSConfig(SPI_TypeDef* SPIx, uint16_t SPI_SWNSS)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
    if (SPI_SWNSS != SPI_SWNSS_RESET)
 8003fc8:	887b      	ldrh	r3, [r7, #2]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <SPI_SWNSSConfig+0x24>
    {
        /* Set NSS pin */
        SPIx->CTLR1 |= SPI_CTLR1_SWNSS;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	801a      	strh	r2, [r3, #0]
    else
    {
        /* Reset NSS pin */
        SPIx->CTLR1 &= ~SPI_CTLR1_SWNSS;
    }
}
 8003fde:	e007      	b.n	8003ff0 <SPI_SWNSSConfig+0x34>
        SPIx->CTLR1 |= SPI_CTLR1_SWNSS;
    }
    else
    {
        /* Reset NSS pin */
        SPIx->CTLR1 &= ~SPI_CTLR1_SWNSS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	801a      	strh	r2, [r3, #0]
    }
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop

08003ffc <SPI_NSSDRV>:
  * @param  SPIx: Select the SPI peripheral.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SPI_NSSDRV(SPI_TypeDef* SPIx, TypeState NewValue)
{ 
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  if (NewValue != DISABLE)
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <SPI_NSSDRV+0x24>
  {
    SPIx->CTLR2 |= SPI_CTLR2_NSSDRV;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	889b      	ldrh	r3, [r3, #4]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	809a      	strh	r2, [r3, #4]
  }
  else
  {
    SPIx->CTLR2 &= ~SPI_CTLR2_NSSDRV;
  }
}
 800401e:	e007      	b.n	8004030 <SPI_NSSDRV+0x34>
  {
    SPIx->CTLR2 |= SPI_CTLR2_NSSDRV;
  }
  else
  {
    SPIx->CTLR2 &= ~SPI_CTLR2_NSSDRV;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	889b      	ldrh	r3, [r3, #4]
 8004024:	b29b      	uxth	r3, r3
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	809a      	strh	r2, [r3, #4]
  }
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop

0800403c <SPI_FrameFormatConfig>:
  *     @arg SPI_FrameFormat_16bit: Set data frame format to 16bit
  *     @arg SPI_FrameFormat_8bit: Set data frame format to 8bit
  * @retval None
  */
void SPI_FrameFormatConfig(SPI_TypeDef* SPIx, uint16_t SPI_FrameFormat)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
    /* Clear FF16 bit */
    SPIx->CTLR1 &= (uint16_t)~SPI_FRAMEFORMAT_16BIT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	801a      	strh	r2, [r3, #0]
    /* Set new FF16 bit value */
    SPIx->CTLR1 |= SPI_FrameFormat;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	4313      	orrs	r3, r2
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	801a      	strh	r2, [r3, #0]
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop

08004074 <SPI_SendCRCNext>:
  * @brief  Send the SPIx CRC value.
  * @param  SPIx: Select the SPI peripheral.
  * @retval None
  */
void SPI_SendCRCNext(SPI_TypeDef* SPIx)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    /* Enable the CRC transmission */
    SPIx->CTLR1 |= SPI_CTLR1_CRCNT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	801a      	strh	r2, [r3, #0]
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop

08004098 <SPI_CRC_Enable>:
  * @param  SPIx: Select the SPI peripheral.
  * @param  NewValue: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CRC_Enable(SPI_TypeDef* SPIx, TypeState NewValue)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
    if (NewValue != DISABLE)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <SPI_CRC_Enable+0x24>
    {
        /* Enable the CRC calculation */
        SPIx->CTLR1 |= SPI_CTLR1_CRCEN;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	801a      	strh	r2, [r3, #0]
    else
    {
        /* Disable the CRC calculation */
        SPIx->CTLR1 &= ~SPI_CTLR1_CRCEN;
    }
}
 80040ba:	e007      	b.n	80040cc <SPI_CRC_Enable+0x34>
        SPIx->CTLR1 |= SPI_CTLR1_CRCEN;
    }
    else
    {
        /* Disable the CRC calculation */
        SPIx->CTLR1 &= ~SPI_CTLR1_CRCEN;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	801a      	strh	r2, [r3, #0]
    }
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <SPI_GetCRC>:
  *     @arg SPI_CRC_Tx: Selects Tx CRC register
  *     @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value.
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
    if (SPI_CRC != SPI_CRC_RX)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d003      	beq.n	80040f2 <SPI_GetCRC+0x1a>
    {
        /* Transmit CRC value */
        return SPIx->TCR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8b1b      	ldrh	r3, [r3, #24]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	e002      	b.n	80040f8 <SPI_GetCRC+0x20>
    }
    else
    {
        /* Receive CRC value */
        return SPIx->RCR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8a9b      	ldrh	r3, [r3, #20]
 80040f6:	b29b      	uxth	r3, r3
    }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <SPI_GetCRCPolynomial>:
  * @brief  Get the CRC Polynomial value.
  * @param  SPIx: Select the SPI peripheral.
  * @retval The CRC Polynomial value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    return SPIx->CPR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8a1b      	ldrh	r3, [r3, #16]
 8004110:	b29b      	uxth	r3, r3
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <SPI_BDOEConfig>:
  *     @arg SPI_BDOE_Tx: Selects Tx transmission direction
  *     @arg SPI_BDOE_Rx: Selects Rx receive direction 
  * @retval None
  */
void SPI_BDOEConfig(SPI_TypeDef* SPIx, uint16_t SPI_BDOE)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
    if (SPI_BDOE == SPI_BDOE_TX)
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412e:	d108      	bne.n	8004142 <SPI_BDOEConfig+0x26>
    {
        /* Transmit only mode*/
        SPIx->CTLR1 |= SPI_BDOE_TX;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	801a      	strh	r2, [r3, #0]
    else
    {
        /* Receive only mode */
        SPIx->CTLR1 &= SPI_BDOE_RX;
    }
}
 8004140:	e007      	b.n	8004152 <SPI_BDOEConfig+0x36>
        SPIx->CTLR1 |= SPI_BDOE_TX;
    }
    else
    {
        /* Receive only mode */
        SPIx->CTLR1 &= SPI_BDOE_RX;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	801a      	strh	r2, [r3, #0]
    }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <SPI_I2S_GetBitState>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG.
  */
TypeState SPI_I2S_GetBitState(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
    /* Check the status of the selected flag */
    if ((SPIx->STR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	891b      	ldrh	r3, [r3, #8]
 800416c:	b29a      	uxth	r2, r3
 800416e:	887b      	ldrh	r3, [r7, #2]
 8004170:	4013      	ands	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <SPI_I2S_GetBitState+0x20>
    {
        return SET;
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <SPI_I2S_GetBitState+0x22>
    }
    else
    {
        return RESET;
 800417c:	2300      	movs	r3, #0
    }
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <SPI_I2S_ClearBitState>:
  *     operation to SPI_STR register (SPI_I2S_GetBitState()) followed by a 
  *     write operation to SPI_CTLR1 register (SPI_Enable() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearBitState(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
    SPIx->STR = (uint16_t)~SPI_I2S_FLAG;
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	43db      	mvns	r3, r3
 8004198:	b29a      	uxth	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	811a      	strh	r2, [r3, #8]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <SPI_I2S_GetIntBitState>:
  *     @arg SPI_INT_CRCERR: CRC Error interrupt.
  *     @arg I2S_INT_UDR: Underrun Error interrupt. 
  * @retval The new state of SPI_I2S_INT.
  */
TypeState SPI_I2S_GetIntBitState(SPI_TypeDef* SPIx, uint8_t SPI_I2S_INT)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
    uint16_t intposition = 0, intmask = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	81fb      	strh	r3, [r7, #14]
 80041b8:	2300      	movs	r3, #0
 80041ba:	81bb      	strh	r3, [r7, #12]
    /* Get the interrupt pending bit and enable bit */
    intposition = 0x01 << (SPI_I2S_INT & 0x0F);
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	2201      	movs	r2, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	81fb      	strh	r3, [r7, #14]
    intmask = 0x01 << (SPI_I2S_INT >> 4);
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	2301      	movs	r3, #1
 80041d4:	4093      	lsls	r3, r2
 80041d6:	81bb      	strh	r3, [r7, #12]
    
    /* Check the status of the interrupt */
    if (((SPIx->STR & intposition) != (uint16_t)RESET) && (SPIx->CTLR2 & intmask))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	891b      	ldrh	r3, [r3, #8]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	89fb      	ldrh	r3, [r7, #14]
 80041e0:	4013      	ands	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <SPI_I2S_GetIntBitState+0x54>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	889b      	ldrh	r3, [r3, #4]
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	89bb      	ldrh	r3, [r7, #12]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SPI_I2S_GetIntBitState+0x54>
    {
        return SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <SPI_I2S_GetIntBitState+0x56>
    }
    else
    {
        return RESET;
 80041fc:	2300      	movs	r3, #0
    }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <SPI_I2S_ClearIntBitState>:
  *     operation to SPI_STR register (SPI_I2S_GetBitState()) followed by a 
  *     write operation to SPI_CTLR1 register (SPI_Enable() to enable the SPI).   
  * @retval None
  */
void SPI_I2S_ClearIntBitState(SPI_TypeDef* SPIx, uint8_t SPI_I2S_INT)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
    uint16_t itpos = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	81fb      	strh	r3, [r7, #14]

    /* Clear the select interrupt pending bit. */
    itpos = 0x01 << (SPI_I2S_INT & 0x0F);
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	2201      	movs	r2, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	81fb      	strh	r3, [r7, #14]
    SPIx->STR = (uint16_t)~itpos;
 8004226:	89fb      	ldrh	r3, [r7, #14]
 8004228:	43db      	mvns	r3, r3
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	811a      	strh	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop

0800423c <USB_Ifr>:
  * @brief  USB interrupt events service routine
  * @param  None
  * @retval None
  */
void  USB_Ifr (void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
    __IO uint16_t Ifr = 0; 
 8004242:	2300      	movs	r3, #0
 8004244:	80fb      	strh	r3, [r7, #6]
    //__IO uint16_t Ctlr = 0;

    Ifr = _GetIFR();
 8004246:	4b4e      	ldr	r3, [pc, #312]	; (8004380 <USB_Ifr+0x144>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	80fb      	strh	r3, [r7, #6]

    if (Ifr & IFR_STIF & InterruptMask)
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	b29b      	uxth	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	4b4b      	ldr	r3, [pc, #300]	; (8004384 <USB_Ifr+0x148>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4013      	ands	r3, r2
 800425a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <USB_Ifr+0x30>
    {
        /* The endpoint successful transfer interrupt service */
        USB_INT_fops->LP_ST(&USB_Device_dev);
 8004262:	4b49      	ldr	r3, [pc, #292]	; (8004388 <USB_Ifr+0x14c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4848      	ldr	r0, [pc, #288]	; (800438c <USB_Ifr+0x150>)
 800426a:	4798      	blx	r3
    }

    if (Ifr & IFR_RSTIF & InterruptMask)
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	b29b      	uxth	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	4b44      	ldr	r3, [pc, #272]	; (8004384 <USB_Ifr+0x148>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4013      	ands	r3, r2
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <USB_Ifr+0x56>
    {
        /* Clear reset interrupt flag in IFR */
        _SetIFR((uint16_t)CLR_RSTIF);
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <USB_Ifr+0x144>)
 8004282:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8004286:	601a      	str	r2, [r3, #0]

        /* USB reset interrupt handle */
        USB_INT_fops->Reset(&USB_Device_dev);
 8004288:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <USB_Ifr+0x14c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	483f      	ldr	r0, [pc, #252]	; (800438c <USB_Ifr+0x150>)
 8004290:	4798      	blx	r3
    }

    if (Ifr & IFR_PMOUIF & InterruptMask)
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	4b3a      	ldr	r3, [pc, #232]	; (8004384 <USB_Ifr+0x148>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4013      	ands	r3, r2
 800429e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <USB_Ifr+0x7c>
    {
        /* Clear packet memory overrun/underrun interrupt flag in IFR */
        _SetIFR((uint16_t)CLR_PMOUIF);
 80042a6:	4b36      	ldr	r3, [pc, #216]	; (8004380 <USB_Ifr+0x144>)
 80042a8:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80042ac:	601a      	str	r2, [r3, #0]

        /* USB packet memory overrun/underrun interrrupt handle */
        USB_INT_fops->PMOU(&USB_Device_dev);
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <USB_Ifr+0x14c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4835      	ldr	r0, [pc, #212]	; (800438c <USB_Ifr+0x150>)
 80042b6:	4798      	blx	r3
    }

    if (Ifr & IFR_ERRIF & InterruptMask)
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <USB_Ifr+0x148>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4013      	ands	r3, r2
 80042c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <USB_Ifr+0xa2>
    {
        /* Clear error interrupt flag in IFR */
        _SetIFR((uint16_t)CLR_ERRIF);
 80042cc:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <USB_Ifr+0x144>)
 80042ce:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 80042d2:	601a      	str	r2, [r3, #0]

        /* USB error interrupt handle */
        USB_INT_fops->Error(&USB_Device_dev);
 80042d4:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <USB_Ifr+0x14c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	482c      	ldr	r0, [pc, #176]	; (800438c <USB_Ifr+0x150>)
 80042dc:	4798      	blx	r3
    }

    if (Ifr & IFR_WKUPIF & InterruptMask)
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <USB_Ifr+0x148>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4013      	ands	r3, r2
 80042ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <USB_Ifr+0xc8>
    {
        /* Clear wakeup interrupt flag in IFR */
        _SetIFR((uint16_t)CLR_WKUPIF);
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <USB_Ifr+0x144>)
 80042f4:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80042f8:	601a      	str	r2, [r3, #0]

        /* USB wakeup interrupt handle */
        USB_INT_fops->WakeUp(&USB_Device_dev);
 80042fa:	4b23      	ldr	r3, [pc, #140]	; (8004388 <USB_Ifr+0x14c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4822      	ldr	r0, [pc, #136]	; (800438c <USB_Ifr+0x150>)
 8004302:	4798      	blx	r3
    }

    if (Ifr & IFR_SPSIF & InterruptMask)
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <USB_Ifr+0x148>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4013      	ands	r3, r2
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <USB_Ifr+0xee>
    {
        /* Process library core layer suspend routine*/
        USB_INT_fops->Suspend(&USB_Device_dev);
 8004318:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <USB_Ifr+0x14c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	481b      	ldr	r0, [pc, #108]	; (800438c <USB_Ifr+0x150>)
 8004320:	4798      	blx	r3

        /* Clear of suspend interrupt flag bit must be done after setting of CTLR_SETSPS */
        _SetIFR((uint16_t)CLR_SPSIF);
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <USB_Ifr+0x144>)
 8004324:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8004328:	601a      	str	r2, [r3, #0]
    }

    if (Ifr & IFR_SOFIF & InterruptMask)
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	4b14      	ldr	r3, [pc, #80]	; (8004384 <USB_Ifr+0x148>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4013      	ands	r3, r2
 8004336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <USB_Ifr+0x114>
    {
        /* clear SOF interrupt flag in IFR */
        _SetIFR((uint16_t)CLR_SOFIF);
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <USB_Ifr+0x144>)
 8004340:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8004344:	601a      	str	r2, [r3, #0]

        /* USB SOF interrupt handle */
        USB_INT_fops->SOF(&USB_Device_dev);
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <USB_Ifr+0x14c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <USB_Ifr+0x150>)
 800434e:	4798      	blx	r3
    }

    if (Ifr & IFR_ESOFIF & InterruptMask)
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <USB_Ifr+0x148>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4013      	ands	r3, r2
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <USB_Ifr+0x13a>
    {
        /* clear ESOF interrupt flag in IFR */
        _SetIFR((uint16_t)CLR_ESOFIF);
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <USB_Ifr+0x144>)
 8004366:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 800436a:	601a      	str	r2, [r3, #0]

        /* USB ESOF interrupt handle */
        USB_INT_fops->ESOF(&USB_Device_dev);
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <USB_Ifr+0x14c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	4806      	ldr	r0, [pc, #24]	; (800438c <USB_Ifr+0x150>)
 8004374:	4798      	blx	r3
    }
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40005c44 	.word	0x40005c44
 8004384:	2000014c 	.word	0x2000014c
 8004388:	200000f4 	.word	0x200000f4
 800438c:	20000150 	.word	0x20000150

08004390 <USBD_Connect>:
  * @brief  Configure usb device to be connected
  * @param  pudev: pointer to usb device instance
  * @retval None
  */
void  USBD_Connect (USB_DEVICE_HANDLE *pudev)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
    USB_Cable_Config(ENABLE);
 8004398:	2001      	movs	r0, #1
 800439a:	f7fe f8ad 	bl	80024f8 <USB_Cable_Config>
    pudev->dev.device_cur_status = USB_STATUS_CONNECTED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2205      	movs	r2, #5
 80043a2:	70da      	strb	r2, [r3, #3]
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <USBD_Disconnect>:
  * @brief  Configure usb device to be unconnected
  * @param  pudev: pointer to usb device instance
  * @retval None
  */
void  USBD_Disconnect (USB_DEVICE_HANDLE *pudev)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
    USB_Cable_Config(DISABLE);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fe f89f 	bl	80024f8 <USB_Cable_Config>
    DR_StopDevice();
 80043ba:	f001 fcb5 	bl	8005d28 <DR_StopDevice>
    pudev->dev.device_cur_status = USB_STATUS_UNCONNECTED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	70da      	strb	r2, [r3, #3]
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <USBD_Init>:
extern void print(char* fmt, ...);
void  USBD_Init (USB_DEVICE_HANDLE *pudev,
                 USBD_Desc_cb_TypeDef  *device_desc,
                 USBD_Class_cb_TypeDef *class_cb,
                 USBD_User_cb_TypeDef  *user_cb)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
    print("USBD_Init %d\n", __LINE__);
 80043da:	2146      	movs	r1, #70	; 0x46
 80043dc:	4818      	ldr	r0, [pc, #96]	; (8004440 <USBD_Init+0x74>)
 80043de:	f7fc f8db 	bl	8000598 <print>
    USBD_DeInit(pudev);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f82e 	bl	8004444 <USBD_DeInit>
    print("USBD_Init %d\n", __LINE__);
 80043e8:	2148      	movs	r1, #72	; 0x48
 80043ea:	4815      	ldr	r0, [pc, #84]	; (8004440 <USBD_Init+0x74>)
 80043ec:	f7fc f8d4 	bl	8000598 <print>
    /* Device descriptor class and user callbacks */
    pudev->dev.class_cb = class_cb;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	671a      	str	r2, [r3, #112]	; 0x70
    pudev->dev.user_cb = user_cb;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	675a      	str	r2, [r3, #116]	; 0x74
    pudev->dev.desc_cb = device_desc;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

    /* Get serial string from the unique ID */
    Get_SerialString();
 8004402:	f7fe f949 	bl	8002698 <Get_SerialString>

    /* Disable remote wakeup feature */
    pudev->dev.DevRemoteWakeup = 0;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	715a      	strb	r2, [r3, #5]

    /* USB full-speed device */
    pudev->dev.speed = USB_SPEED_FULL; 
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
    print("USBD_Init %d\n", __LINE__);
 8004412:	2156      	movs	r1, #86	; 0x56
 8004414:	480a      	ldr	r0, [pc, #40]	; (8004440 <USBD_Init+0x74>)
 8004416:	f7fc f8bf 	bl	8000598 <print>
    /* Set device register */
    DR_Init();
 800441a:	f001 fc61 	bl	8005ce0 <DR_Init>

    print("USBD_Init %d\n", __LINE__);
 800441e:	215a      	movs	r1, #90	; 0x5a
 8004420:	4807      	ldr	r0, [pc, #28]	; (8004440 <USBD_Init+0x74>)
 8004422:	f7fc f8b9 	bl	8000598 <print>
    /* Callback user function */
    pudev->dev.user_cb->DeviceInit();
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4798      	blx	r3
    print("USBD_Init %d\n", __LINE__);
 800442e:	215d      	movs	r1, #93	; 0x5d
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <USBD_Init+0x74>)
 8004432:	f7fc f8b1 	bl	8000598 <print>
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08007514 	.word	0x08007514

08004444 <USBD_DeInit>:
  * @brief  De-Initialize USB device stack
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
USBD_Status  USBD_DeInit (USB_DEVICE_HANDLE *pudev)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    return USBD_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <USBD_SetupStage>:
  * @brief  Usb setup stage processing
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
uint8_t  USBD_SetupStage (USB_DEVICE_HANDLE *pudev)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    USB_DEVICE_REQ req;

    USBD_ParseSetupRequest(pudev, &req);
 8004460:	f107 0308 	add.w	r3, r7, #8
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fd1a 	bl	8004ea0 <USBD_ParseSetupRequest>

    switch (req.bmRequestType & USB_REQ_MASK) 
 800446c:	7a3b      	ldrb	r3, [r7, #8]
 800446e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004472:	2b20      	cmp	r3, #32
 8004474:	d00a      	beq.n	800448c <USBD_SetupStage+0x34>
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d00f      	beq.n	800449a <USBD_SetupStage+0x42>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d114      	bne.n	80044a8 <USBD_SetupStage+0x50>
    {
        /* Standard device request */
        case USB_STANDARD_REQ:
            USBD_StdReq(pudev, &req);
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f931 	bl	80046ec <USBD_StdReq>
            break;
 800448a:	e012      	b.n	80044b2 <USBD_SetupStage+0x5a>

        /* Device class request */
        case USB_CLASS_REQ:
            USBD_DevClsReq(pudev, &req);
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f940 	bl	8004718 <USBD_DevClsReq>
            break;
 8004498:	e00b      	b.n	80044b2 <USBD_SetupStage+0x5a>

        /* Vendor defined request */
        case USB_VENDOR_REQ:
            USBD_VdrDefReq(pudev, &req);
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f96b 	bl	800477c <USBD_VdrDefReq>
            break;
 80044a6:	e004      	b.n	80044b2 <USBD_SetupStage+0x5a>

        default:
            USB_EP_Stall(pudev, 0x00);
 80044a8:	2100      	movs	r1, #0
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f002 f9ae 	bl	800680c <USB_EP_Stall>
            break;
 80044b0:	bf00      	nop
    }
    return USBD_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <USBD_DataOutStage>:
  * @param  pudev: pointer to usb device instance
  * @param  EpID: endpoint identifier which is in (0..7)
  * @retval usb device operation status
  */
uint8_t  USBD_DataOutStage (USB_DEVICE_HANDLE *pudev, uint8_t EpID)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
    USB_EP *ep = &pudev->dev.out_ep[EpID];
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	3340      	adds	r3, #64	; 0x40
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

    if(EpID == 0) 
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d13a      	bne.n	8004556 <USBD_DataOutStage+0x9a>
    {
        if(pudev->dev.device_cur_state == USB_CTRL_DATA_OUT)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	789b      	ldrb	r3, [r3, #2]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d128      	bne.n	800453a <USBD_DataOutStage+0x7e>
        {
            if(ep->xfer_len > ep->maxpacket)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d910      	bls.n	8004516 <USBD_DataOutStage+0x5a>
            {
                /* One data packet has been received, update xfer_len */
                ep->xfer_len -= ep->maxpacket;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	611a      	str	r2, [r3, #16]

                /* Continue to receive remain data */
                USB_CtlContinueRx(pudev, ep->xfer_buf, ep->xfer_len);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68d9      	ldr	r1, [r3, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	b29b      	uxth	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f002 fb20 	bl	8006b54 <USB_CtlContinueRx>
 8004514:	e02f      	b.n	8004576 <USBD_DataOutStage+0xba>
            }
            else
            {
                if((pudev->dev.class_cb->EP0_RxReady != NULL)&&
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <USBD_DataOutStage+0x76>
                    (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	78db      	ldrb	r3, [r3, #3]
                /* Continue to receive remain data */
                USB_CtlContinueRx(pudev, ep->xfer_buf, ep->xfer_len);
            }
            else
            {
                if((pudev->dev.class_cb->EP0_RxReady != NULL)&&
 8004524:	2b03      	cmp	r3, #3
 8004526:	d104      	bne.n	8004532 <USBD_DataOutStage+0x76>
                    (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
                {
                    /* Device class handle */
                    pudev->dev.class_cb->EP0_RxReady(pudev);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
                }

                /* Enter the control transaction status stage */
                USB_CtlTransmitStatus(pudev);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f002 fb20 	bl	8006b78 <USB_CtlTransmitStatus>
 8004538:	e01d      	b.n	8004576 <USBD_DataOutStage+0xba>
            }
        }
        else if( pudev->dev.device_cur_state == USB_CTRL_STATUS_OUT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	789b      	ldrb	r3, [r3, #2]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d119      	bne.n	8004576 <USBD_DataOutStage+0xba>
        {
            /* Clear endpoint status_out status */
            _Clear_Status_Out(EP0);
 8004542:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <USBD_DataOutStage+0xc4>)
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <USBD_DataOutStage+0xc4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	f648 638f 	movw	r3, #36495	; 0x8e8f
 8004550:	400b      	ands	r3, r1
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	e00f      	b.n	8004576 <USBD_DataOutStage+0xba>
        }
    }
    else 
    {
        if((pudev->dev.class_cb->DataOut != NULL)&&
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <USBD_DataOutStage+0xba>
            (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	78db      	ldrb	r3, [r3, #3]
            _Clear_Status_Out(EP0);
        }
    }
    else 
    {
        if((pudev->dev.class_cb->DataOut != NULL)&&
 8004564:	2b03      	cmp	r3, #3
 8004566:	d106      	bne.n	8004576 <USBD_DataOutStage+0xba>
            (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
        {
            pudev->dev.class_cb->DataOut(pudev, EpID);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	4611      	mov	r1, r2
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
        }
    }
    return USBD_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40005c00 	.word	0x40005c00

08004584 <USBD_DataInStage>:
  * @param  pudev: pointer to usb device instance
  * @param  EpID: endpoint identifier which is in (0..7)
  * @retval usb device operation status
  */
uint8_t  USBD_DataInStage (USB_DEVICE_HANDLE *pudev, uint8_t EpID)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
    USB_EP *ep = &pudev->dev.in_ep[EpID];
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	4613      	mov	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4413      	add	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	3310      	adds	r3, #16
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

    if(EpID == 0) 
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d14d      	bne.n	8004644 <USBD_DataInStage+0xc0>
    {
        if(pudev->dev.device_cur_state == USB_CTRL_DATA_IN)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	789b      	ldrb	r3, [r3, #2]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d137      	bne.n	8004620 <USBD_DataInStage+0x9c>
        {
            if(ep->xfer_len > ep->maxpacket)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d910      	bls.n	80045de <USBD_DataInStage+0x5a>
            {
                /* One data packet has been transmited, update xfer_len */
                ep->xfer_len -= ep->maxpacket;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	1ad2      	subs	r2, r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	611a      	str	r2, [r3, #16]

                /* Continue to receive remain data */
                USB_CtlContinueTx(pudev, ep->xfer_buf, ep->xfer_len);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f002 fa94 	bl	8006b04 <USB_CtlContinueTx>
 80045dc:	e057      	b.n	800468e <USBD_DataInStage+0x10a>
            }
            else
            {
                /* Transmit length is maxpacket multiple, so send zero length packet */
                if(ep->xfer_len == ep->maxpacket)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d108      	bne.n	80045fc <USBD_DataInStage+0x78>
                {
                    ep->xfer_len = 0;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
                    USB_CtlContinueTx(pudev, NULL, 0);
 80045f0:	2200      	movs	r2, #0
 80045f2:	2100      	movs	r1, #0
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f002 fa85 	bl	8006b04 <USB_CtlContinueTx>
 80045fa:	e048      	b.n	800468e <USBD_DataInStage+0x10a>
                }
                else
                {
                    if((pudev->dev.class_cb->EP0_TxSent != NULL) &&
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <USBD_DataInStage+0x94>
                        (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	78db      	ldrb	r3, [r3, #3]
                    ep->xfer_len = 0;
                    USB_CtlContinueTx(pudev, NULL, 0);
                }
                else
                {
                    if((pudev->dev.class_cb->EP0_TxSent != NULL) &&
 800460a:	2b03      	cmp	r3, #3
 800460c:	d104      	bne.n	8004618 <USBD_DataInStage+0x94>
                        (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
                    {
                        pudev->dev.class_cb->EP0_TxSent(pudev); 
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
                    }
                    USB_CtlReceiveStatus(pudev);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f002 fabf 	bl	8006b9c <USB_CtlReceiveStatus>
 800461e:	e036      	b.n	800468e <USBD_DataInStage+0x10a>
                }
            }
        }
        else if((pudev->dev.device_cur_state == USB_CTRL_STATUS_IN) && (gAddress != 0))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	789b      	ldrb	r3, [r3, #2]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d132      	bne.n	800468e <USBD_DataInStage+0x10a>
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <USBD_DataInStage+0x114>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02e      	beq.n	800468e <USBD_DataInStage+0x10a>
        {
            USB_EP_SetAddress(pudev, gAddress); 
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <USBD_DataInStage+0x114>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f002 f9f6 	bl	8006a28 <USB_EP_SetAddress>
            gAddress = 0;
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <USBD_DataInStage+0x114>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e024      	b.n	800468e <USBD_DataInStage+0x10a>
        }
    }
    else
    {
        ep->xfer_len -= ep->xfer_count;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	1ad2      	subs	r2, r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	611a      	str	r2, [r3, #16]

        if(ep->xfer_len == 0)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d110      	bne.n	800467c <USBD_DataInStage+0xf8>
        {
            if((pudev->dev.class_cb->DataIn != NULL) &&
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d014      	beq.n	800468e <USBD_DataInStage+0x10a>
                (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	78db      	ldrb	r3, [r3, #3]
    {
        ep->xfer_len -= ep->xfer_count;

        if(ep->xfer_len == 0)
        {
            if((pudev->dev.class_cb->DataIn != NULL) &&
 8004668:	2b03      	cmp	r3, #3
 800466a:	d110      	bne.n	800468e <USBD_DataInStage+0x10a>
                (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED))
            {
                pudev->dev.class_cb->DataIn(pudev, EpID);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	4611      	mov	r1, r2
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
 800467a:	e008      	b.n	800468e <USBD_DataInStage+0x10a>
            }
        }
        else
        {
            USB_EP_Tx(pudev, EpID, ep->xfer_buf, ep->xfer_len);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	b29b      	uxth	r3, r3
 8004686:	78f9      	ldrb	r1, [r7, #3]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f002 f815 	bl	80066b8 <USB_EP_Tx>
        }
    }
    return USBD_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	2000013a 	.word	0x2000013a

0800469c <USBD_SetCfg>:
  * @param  ConfigIndex: configuration index
  * @retval usb device operation status
  */

USBD_Status  USBD_SetCfg (USB_DEVICE_HANDLE *pudev, uint8_t ConfigIndex)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
    /* Configure USB device class */
    pudev->dev.class_cb->Init(pudev, ConfigIndex);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	4611      	mov	r1, r2
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3

    pudev->dev.user_cb->DeviceConfigured();
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4798      	blx	r3

    return USBD_OK; 
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <USBD_ClrCfg>:
  * @param  pudev: pointer to usb device instance
  * @param  ConfigIndex: configuration index
  * @retval usb device operation status
  */
USBD_Status  USBD_ClrCfg (USB_DEVICE_HANDLE *pudev, uint8_t ConfigIndex)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
    pudev->dev.class_cb->DeInit(pudev, ConfigIndex);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	4611      	mov	r1, r2
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3

    return USBD_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <USBD_StdReq>:
  * @param  pudev: pointer to usb device instance
  * @param  req: USB device request
  * @retval usb device operation status
  */
uint8_t  USBD_StdReq (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
    /* Call device request handle function */
    (*StandardDeviceRequest[req->bRequest])(pudev, req);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	461a      	mov	r2, r3
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <USBD_StdReq+0x28>)
 80046fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3

    return USBD_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	2000009c 	.word	0x2000009c

08004718 <USBD_DevClsReq>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device class request
  * @retval usb device operation status
  */
uint8_t  USBD_DevClsReq (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
    USBD_Status ret;

    switch (pudev->dev.device_cur_status) 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	78db      	ldrb	r3, [r3, #3]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d11c      	bne.n	8004764 <USBD_DevClsReq+0x4c>
    {
        case USB_STATUS_CONFIGURED:
            if (LOWBYTE(req->wIndex) <= USBD_ITF_MAX_NUM) 
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	889b      	ldrh	r3, [r3, #4]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d812      	bhi.n	800475a <USBD_DevClsReq+0x42>
            {
                /* Call back device class handle function */
                ret = (USBD_Status)(pudev->dev.class_cb->ClassReqHandle(pudev, req));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]

                if((req->wLength == 0) && (ret == USBD_OK))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	88db      	ldrh	r3, [r3, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d110      	bne.n	800476e <USBD_DevClsReq+0x56>
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <USBD_DevClsReq+0x56>
                {
                    /* No data stage */
                    USB_CtlTransmitStatus(pudev);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f002 fa10 	bl	8006b78 <USB_CtlTransmitStatus>
            }
            else
            {
                USBD_EnumError(pudev, req);
            }
            break;
 8004758:	e009      	b.n	800476e <USBD_DevClsReq+0x56>
                    USB_CtlTransmitStatus(pudev);
                }
            }
            else
            {
                USBD_EnumError(pudev, req);
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fbd9 	bl	8004f14 <USBD_EnumError>
            }
            break;
 8004762:	e004      	b.n	800476e <USBD_DevClsReq+0x56>

        default:
            USBD_EnumError(pudev, req);
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fbd4 	bl	8004f14 <USBD_EnumError>
            break;
 800476c:	e000      	b.n	8004770 <USBD_DevClsReq+0x58>
            }
            else
            {
                USBD_EnumError(pudev, req);
            }
            break;
 800476e:	bf00      	nop
        default:
            USBD_EnumError(pudev, req);
            break;
    }

    return USBD_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop

0800477c <USBD_VdrDefReq>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb vendor request
  * @retval usb device operation status
  */
uint8_t  USBD_VdrDefReq (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
    /* Added by user... */

    return USBD_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <USBD_Reserved>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_Reserved (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
    /* No operation... */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <USBD_GetStatus>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_GetStatus (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
    uint8_t  ep_addr;
    uint16_t config_status = 0x0000;
 80047b2:	2300      	movs	r3, #0
 80047b4:	81bb      	strh	r3, [r7, #12]
    uint16_t endp_status = 0x0000;
 80047b6:	2300      	movs	r3, #0
 80047b8:	817b      	strh	r3, [r7, #10]

    switch(req->bmRequestType & USB_REQ_RECIPIENT_MASK)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d01b      	beq.n	80047fe <USBD_GetStatus+0x56>
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d038      	beq.n	800483c <USBD_GetStatus+0x94>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d176      	bne.n	80048bc <USBD_GetStatus+0x114>
    {
        case USB_REQTYPE_DEVICE:
            switch (pudev->dev.device_cur_status) 
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	78db      	ldrb	r3, [r3, #3]
 80047d2:	3b02      	subs	r3, #2
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d810      	bhi.n	80047fa <USBD_GetStatus+0x52>

#ifdef USBD_SELF_POWERED
    config_status = USB_STATUS_SELF_POWERED;
#endif

                    if (pudev->dev.DevRemoteWakeup) 
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	795b      	ldrb	r3, [r3, #5]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <USBD_GetStatus+0x42>
                    {
                        config_status |= USB_STATUS_REMOTE_WAKEUP;
 80047e0:	89bb      	ldrh	r3, [r7, #12]
 80047e2:	f043 0302 	orr.w	r3, r3, #2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	81bb      	strh	r3, [r7, #12]
                    }
                    USB_CtlTx(pudev, (uint8_t *)&config_status, 2);
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	2202      	movs	r2, #2
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f002 f970 	bl	8006ad8 <USB_CtlTx>
                    break;
 80047f8:	e000      	b.n	80047fc <USBD_GetStatus+0x54>

                default:
                    break;
 80047fa:	bf00      	nop
            }
            break;
 80047fc:	e063      	b.n	80048c6 <USBD_GetStatus+0x11e>

        case USB_REQTYPE_INTERFACE:
            switch (pudev->dev.device_cur_status)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	78db      	ldrb	r3, [r3, #3]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d002      	beq.n	800480c <USBD_GetStatus+0x64>
 8004806:	2b03      	cmp	r3, #3
 8004808:	d005      	beq.n	8004816 <USBD_GetStatus+0x6e>
                        USBD_EnumError(pudev, req);
                    }
                    break;

                default:
                    break;
 800480a:	e016      	b.n	800483a <USBD_GetStatus+0x92>

        case USB_REQTYPE_INTERFACE:
            switch (pudev->dev.device_cur_status)
            {
                case USB_STATUS_ADDRESSED:
                    USBD_EnumError(pudev, req);
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fb80 	bl	8004f14 <USBD_EnumError>
                    break;
 8004814:	e011      	b.n	800483a <USBD_GetStatus+0x92>

                case USB_STATUS_CONFIGURED:
                    if (LOWBYTE(req->wIndex) <= USBD_ITF_MAX_NUM)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	889b      	ldrh	r3, [r3, #4]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d807      	bhi.n	8004830 <USBD_GetStatus+0x88>
                    {
                        USB_CtlTx(pudev, (uint8_t *)&config_status, 2);
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	2202      	movs	r2, #2
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f002 f955 	bl	8006ad8 <USB_CtlTx>
                    }
                    else
                    {
                        USBD_EnumError(pudev, req);
                    }
                    break;
 800482e:	e003      	b.n	8004838 <USBD_GetStatus+0x90>
                    {
                        USB_CtlTx(pudev, (uint8_t *)&config_status, 2);
                    }
                    else
                    {
                        USBD_EnumError(pudev, req);
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fb6e 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004838:	bf00      	nop

                default:
                    break;
            }
            break;
 800483a:	e044      	b.n	80048c6 <USBD_GetStatus+0x11e>

        case USB_REQTYPE_ENDPOINT:
            ep_addr = LOWBYTE(req->wIndex);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	889b      	ldrh	r3, [r3, #4]
 8004840:	73fb      	strb	r3, [r7, #15]

            switch (pudev->dev.device_cur_status) 
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	78db      	ldrb	r3, [r3, #3]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d002      	beq.n	8004850 <USBD_GetStatus+0xa8>
 800484a:	2b03      	cmp	r3, #3
 800484c:	d00b      	beq.n	8004866 <USBD_GetStatus+0xbe>
                    }
                    USB_CtlTx(pudev, (uint8_t *)&endp_status, 2);
                    break;

                default:
                    break;
 800484e:	e034      	b.n	80048ba <USBD_GetStatus+0x112>
            ep_addr = LOWBYTE(req->wIndex);

            switch (pudev->dev.device_cur_status) 
            {
                case USB_STATUS_ADDRESSED:
                    if (IS_NOT_EP0(ep_addr)) 
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d030      	beq.n	80048b8 <USBD_GetStatus+0x110>
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b80      	cmp	r3, #128	; 0x80
 800485a:	d02d      	beq.n	80048b8 <USBD_GetStatus+0x110>
                    {
                        USBD_EnumError(pudev, req);
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fb58 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004864:	e028      	b.n	80048b8 <USBD_GetStatus+0x110>

                case USB_STATUS_CONFIGURED:
                    if ((ep_addr & 0x80)== 0x80)
 8004866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800486a:	2b00      	cmp	r3, #0
 800486c:	da0f      	bge.n	800488e <USBD_GetStatus+0xe6>
                    {
                        if(pudev->dev.in_ep[ep_addr & 0x7F].is_stall)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	440b      	add	r3, r1
 8004880:	3310      	adds	r3, #16
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <USBD_GetStatus+0x100>
                        {
                            endp_status = 0x0001;
 8004888:	2301      	movs	r3, #1
 800488a:	817b      	strh	r3, [r7, #10]
 800488c:	e00c      	b.n	80048a8 <USBD_GetStatus+0x100>
                        }
                    }
                    else
                    {
                        if(pudev->dev.out_ep[ep_addr].is_stall)
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	440b      	add	r3, r1
 800489c:	3340      	adds	r3, #64	; 0x40
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <USBD_GetStatus+0x100>
                        {
                            endp_status = 0x0001;
 80048a4:	2301      	movs	r3, #1
 80048a6:	817b      	strh	r3, [r7, #10]
                        }
                    }
                    USB_CtlTx(pudev, (uint8_t *)&endp_status, 2);
 80048a8:	f107 030a 	add.w	r3, r7, #10
 80048ac:	2202      	movs	r2, #2
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f002 f911 	bl	8006ad8 <USB_CtlTx>
                    break;
 80048b6:	e000      	b.n	80048ba <USBD_GetStatus+0x112>
                case USB_STATUS_ADDRESSED:
                    if (IS_NOT_EP0(ep_addr)) 
                    {
                        USBD_EnumError(pudev, req);
                    }
                    break;
 80048b8:	bf00      	nop
                    break;

                default:
                    break;
            }
            break;
 80048ba:	e004      	b.n	80048c6 <USBD_GetStatus+0x11e>

        default:
            USBD_EnumError(pudev, req);
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fb28 	bl	8004f14 <USBD_EnumError>
            break;
 80048c4:	bf00      	nop
    }
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop

080048d0 <USBD_ClearFeature>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_ClearFeature (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
    uint8_t ep_addr = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]

    switch(req->bmRequestType & USB_REQ_RECIPIENT_MASK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d020      	beq.n	800492c <USBD_ClearFeature+0x5c>
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d035      	beq.n	800495a <USBD_ClearFeature+0x8a>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d15d      	bne.n	80049ae <USBD_ClearFeature+0xde>
    {
        case USB_REQTYPE_DEVICE:
            switch (pudev->dev.device_cur_status)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	78db      	ldrb	r3, [r3, #3]
 80048f6:	3b02      	subs	r3, #2
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d813      	bhi.n	8004924 <USBD_ClearFeature+0x54>
            {
                case USB_STATUS_ADDRESSED:
                case USB_STATUS_CONFIGURED:
                    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	885b      	ldrh	r3, [r3, #2]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d106      	bne.n	8004912 <USBD_ClearFeature+0x42>
                    {
                        pudev->dev.DevRemoteWakeup = 0;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	715a      	strb	r2, [r3, #5]
                        USB_CtlTransmitStatus(pudev);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f002 f934 	bl	8006b78 <USB_CtlTransmitStatus>
                    else if(req->wValue == USB_FEATURE_TEST_MODE)
                    {
                        /* Can not clear test_mode feature */
                        USBD_EnumError(pudev, req);
                    }
                    break;
 8004910:	e00a      	b.n	8004928 <USBD_ClearFeature+0x58>
                    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
                    {
                        pudev->dev.DevRemoteWakeup = 0;
                        USB_CtlTransmitStatus(pudev);
                    }
                    else if(req->wValue == USB_FEATURE_TEST_MODE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	885b      	ldrh	r3, [r3, #2]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d106      	bne.n	8004928 <USBD_ClearFeature+0x58>
                    {
                        /* Can not clear test_mode feature */
                        USBD_EnumError(pudev, req);
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 faf9 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004922:	e001      	b.n	8004928 <USBD_ClearFeature+0x58>

                default:
                    break;
 8004924:	bf00      	nop
 8004926:	e047      	b.n	80049b8 <USBD_ClearFeature+0xe8>
                    else if(req->wValue == USB_FEATURE_TEST_MODE)
                    {
                        /* Can not clear test_mode feature */
                        USBD_EnumError(pudev, req);
                    }
                    break;
 8004928:	bf00      	nop

                default:
                    break;
            }
            break;
 800492a:	e045      	b.n	80049b8 <USBD_ClearFeature+0xe8>

        case USB_REQTYPE_INTERFACE:
            switch(pudev->dev.device_cur_state)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	789b      	ldrb	r3, [r3, #2]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d002      	beq.n	800493a <USBD_ClearFeature+0x6a>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d005      	beq.n	8004944 <USBD_ClearFeature+0x74>
                        USBD_EnumError(pudev, req);
                    }
                    break;

                default:
                    break;
 8004938:	e00e      	b.n	8004958 <USBD_ClearFeature+0x88>

        case USB_REQTYPE_INTERFACE:
            switch(pudev->dev.device_cur_state)
            {
                case USB_STATUS_ADDRESSED:
                    USBD_EnumError(pudev, req);
 800493a:	6839      	ldr	r1, [r7, #0]
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fae9 	bl	8004f14 <USBD_EnumError>
                    break;
 8004942:	e009      	b.n	8004958 <USBD_ClearFeature+0x88>

                case USB_STATUS_CONFIGURED:
                    if (LOWBYTE(req->wIndex) <= USBD_ITF_MAX_NUM)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	889b      	ldrh	r3, [r3, #4]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d903      	bls.n	8004956 <USBD_ClearFeature+0x86>
                    {/* No operation */
                    }
                    else
                    {
                        USBD_EnumError(pudev, req);
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fadf 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004956:	bf00      	nop

                default:
                    break;
            }
            break;
 8004958:	e02e      	b.n	80049b8 <USBD_ClearFeature+0xe8>

        case USB_REQTYPE_ENDPOINT:
            ep_addr = LOWBYTE(req->wIndex);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	889b      	ldrh	r3, [r3, #4]
 800495e:	73fb      	strb	r3, [r7, #15]

            switch (pudev->dev.device_cur_status) 
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	78db      	ldrb	r3, [r3, #3]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d002      	beq.n	800496e <USBD_ClearFeature+0x9e>
 8004968:	2b03      	cmp	r3, #3
 800496a:	d00b      	beq.n	8004984 <USBD_ClearFeature+0xb4>
                    }
                    USB_CtlTransmitStatus(pudev);
                    break;

                default:
                    break;
 800496c:	e01e      	b.n	80049ac <USBD_ClearFeature+0xdc>
            ep_addr = LOWBYTE(req->wIndex);

            switch (pudev->dev.device_cur_status) 
            {
                case USB_STATUS_ADDRESSED:
                    if (IS_NOT_EP0(ep_addr))
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01a      	beq.n	80049aa <USBD_ClearFeature+0xda>
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d017      	beq.n	80049aa <USBD_ClearFeature+0xda>
                    {
                        USBD_EnumError(pudev, req);
 800497a:	6839      	ldr	r1, [r7, #0]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fac9 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004982:	e012      	b.n	80049aa <USBD_ClearFeature+0xda>

                case USB_STATUS_CONFIGURED:   
                    if (req->wValue == USB_FEATURE_ENDP_HALT)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	885b      	ldrh	r3, [r3, #2]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <USBD_ClearFeature+0xd2>
                    {
                        if (IS_NOT_EP0(ep_addr))
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <USBD_ClearFeature+0xd2>
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	2b80      	cmp	r3, #128	; 0x80
 8004996:	d004      	beq.n	80049a2 <USBD_ClearFeature+0xd2>
                        {
                            USB_EP_ClrStall(pudev, ep_addr);
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 ffa9 	bl	80068f4 <USB_EP_ClrStall>
                        }
                    }
                    USB_CtlTransmitStatus(pudev);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f002 f8e8 	bl	8006b78 <USB_CtlTransmitStatus>
                    break;
 80049a8:	e000      	b.n	80049ac <USBD_ClearFeature+0xdc>
                case USB_STATUS_ADDRESSED:
                    if (IS_NOT_EP0(ep_addr))
                    {
                        USBD_EnumError(pudev, req);
                    }
                    break;
 80049aa:	bf00      	nop
                    break;

                default:
                    break;
            }
            break;
 80049ac:	e004      	b.n	80049b8 <USBD_ClearFeature+0xe8>

        default:
            USBD_EnumError(pudev, req);
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 faaf 	bl	8004f14 <USBD_EnumError>
            break;
 80049b6:	bf00      	nop
    }
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <USBD_SetFeature>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_SetFeature (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
    uint8_t ep_addr = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]

    switch(req->bmRequestType & USB_REQ_RECIPIENT_MASK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d017      	beq.n	8004a0a <USBD_SetFeature+0x4a>
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d02c      	beq.n	8004a38 <USBD_SetFeature+0x78>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d151      	bne.n	8004a86 <USBD_SetFeature+0xc6>
    {
        case USB_REQTYPE_DEVICE:
            switch (pudev->dev.device_cur_status)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	78db      	ldrb	r3, [r3, #3]
 80049e6:	3b02      	subs	r3, #2
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d80a      	bhi.n	8004a02 <USBD_SetFeature+0x42>
            {
                case USB_STATUS_ADDRESSED:
                case USB_STATUS_CONFIGURED:
                    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	885b      	ldrh	r3, [r3, #2]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d108      	bne.n	8004a06 <USBD_SetFeature+0x46>
                    {
                        pudev->dev.DevRemoteWakeup = 1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	715a      	strb	r2, [r3, #5]
                        USB_CtlTransmitStatus(pudev);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f002 f8bc 	bl	8006b78 <USB_CtlTransmitStatus>
                    }
                    break;
 8004a00:	e001      	b.n	8004a06 <USBD_SetFeature+0x46>

                default:
                    break;
 8004a02:	bf00      	nop
 8004a04:	e044      	b.n	8004a90 <USBD_SetFeature+0xd0>
                    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
                    {
                        pudev->dev.DevRemoteWakeup = 1;
                        USB_CtlTransmitStatus(pudev);
                    }
                    break;
 8004a06:	bf00      	nop

                default:
                    break;
            }
            break;
 8004a08:	e042      	b.n	8004a90 <USBD_SetFeature+0xd0>

        case USB_REQTYPE_INTERFACE:
            switch(pudev->dev.device_cur_state)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	789b      	ldrb	r3, [r3, #2]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d002      	beq.n	8004a18 <USBD_SetFeature+0x58>
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d005      	beq.n	8004a22 <USBD_SetFeature+0x62>
                        USBD_EnumError(pudev, req);
                    }
                    break;

                default:
                    break;
 8004a16:	e00e      	b.n	8004a36 <USBD_SetFeature+0x76>

        case USB_REQTYPE_INTERFACE:
            switch(pudev->dev.device_cur_state)
            {
                case USB_STATUS_ADDRESSED:
                    USBD_EnumError(pudev, req);
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa7a 	bl	8004f14 <USBD_EnumError>
                    break;
 8004a20:	e009      	b.n	8004a36 <USBD_SetFeature+0x76>

                case USB_STATUS_CONFIGURED:
                    if (LOWBYTE(req->wIndex) <= USBD_ITF_MAX_NUM)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	889b      	ldrh	r3, [r3, #4]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d903      	bls.n	8004a34 <USBD_SetFeature+0x74>
                    {/* No operation */
                    }
                    else
                    {
                        USBD_EnumError(pudev, req);
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa70 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004a34:	bf00      	nop

                default:
                    break;
            }
            break;
 8004a36:	e02b      	b.n	8004a90 <USBD_SetFeature+0xd0>

        case USB_REQTYPE_ENDPOINT:
            switch (pudev->dev.device_cur_status) 
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	78db      	ldrb	r3, [r3, #3]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d002      	beq.n	8004a46 <USBD_SetFeature+0x86>
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d00b      	beq.n	8004a5c <USBD_SetFeature+0x9c>
                    }
                    USB_CtlTransmitStatus(pudev);
                    break;

                default:
                    break;
 8004a44:	e01e      	b.n	8004a84 <USBD_SetFeature+0xc4>

        case USB_REQTYPE_ENDPOINT:
            switch (pudev->dev.device_cur_status) 
            {
                case USB_STATUS_ADDRESSED:
                    if (IS_NOT_EP0(ep_addr))
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01a      	beq.n	8004a82 <USBD_SetFeature+0xc2>
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d017      	beq.n	8004a82 <USBD_SetFeature+0xc2>
                    {
                        USBD_EnumError(pudev, req);
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fa5d 	bl	8004f14 <USBD_EnumError>
                    }
                    break;
 8004a5a:	e012      	b.n	8004a82 <USBD_SetFeature+0xc2>

                case USB_STATUS_CONFIGURED:   
                    if (req->wValue == USB_FEATURE_ENDP_HALT)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	885b      	ldrh	r3, [r3, #2]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <USBD_SetFeature+0xba>
                    {
                        if (IS_NOT_EP0(ep_addr)) 
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <USBD_SetFeature+0xba>
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d004      	beq.n	8004a7a <USBD_SetFeature+0xba>
                        {
                            USB_EP_Stall(pudev, ep_addr);
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 fec9 	bl	800680c <USB_EP_Stall>
                        }
                    }
                    USB_CtlTransmitStatus(pudev);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f002 f87c 	bl	8006b78 <USB_CtlTransmitStatus>
                    break;
 8004a80:	e000      	b.n	8004a84 <USBD_SetFeature+0xc4>
                case USB_STATUS_ADDRESSED:
                    if (IS_NOT_EP0(ep_addr))
                    {
                        USBD_EnumError(pudev, req);
                    }
                    break;
 8004a82:	bf00      	nop
                    break;

                default:
                    break;
            }
            break;
 8004a84:	e004      	b.n	8004a90 <USBD_SetFeature+0xd0>

        default:
            USBD_EnumError(pudev, req);
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa43 	bl	8004f14 <USBD_EnumError>
            break;
 8004a8e:	bf00      	nop
    }
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USBD_SetAddress>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_SetAddress (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
    if ((req->wIndex == 0) && (req->wLength == 0))
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	889b      	ldrh	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d123      	bne.n	8004af2 <USBD_SetAddress+0x5a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	88db      	ldrh	r3, [r3, #6]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11f      	bne.n	8004af2 <USBD_SetAddress+0x5a>
    {
        gAddress = (uint8_t)(req->wValue) & 0x7F;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	885b      	ldrh	r3, [r3, #2]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <USBD_SetAddress+0x6c>)
 8004ac0:	701a      	strb	r2, [r3, #0]

        if (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED) 
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	78db      	ldrb	r3, [r3, #3]
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	d104      	bne.n	8004ad4 <USBD_SetAddress+0x3c>
        {
            USBD_EnumError(pudev, req);
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fa21 	bl	8004f14 <USBD_EnumError>
{
    if ((req->wIndex == 0) && (req->wLength == 0))
    {
        gAddress = (uint8_t)(req->wValue) & 0x7F;

        if (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED) 
 8004ad2:	e012      	b.n	8004afa <USBD_SetAddress+0x62>
        {
            USBD_EnumError(pudev, req);
        }
        else
        {
            USB_CtlTransmitStatus(pudev);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f002 f84f 	bl	8006b78 <USB_CtlTransmitStatus>

            if (gAddress != 0) 
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <USBD_SetAddress+0x6c>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <USBD_SetAddress+0x52>
            {
                pudev->dev.device_cur_status  = USB_STATUS_ADDRESSED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	70da      	strb	r2, [r3, #3]
{
    if ((req->wIndex == 0) && (req->wLength == 0))
    {
        gAddress = (uint8_t)(req->wValue) & 0x7F;

        if (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED) 
 8004ae8:	e007      	b.n	8004afa <USBD_SetAddress+0x62>
            {
                pudev->dev.device_cur_status  = USB_STATUS_ADDRESSED;
            }
            else
            {
                pudev->dev.device_cur_status  = USB_STATUS_DEFAULT;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	70da      	strb	r2, [r3, #3]
{
    if ((req->wIndex == 0) && (req->wLength == 0))
    {
        gAddress = (uint8_t)(req->wValue) & 0x7F;

        if (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED) 
 8004af0:	e003      	b.n	8004afa <USBD_SetAddress+0x62>
            }
        }
    }
    else 
    {
        USBD_EnumError(pudev , req);
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa0d 	bl	8004f14 <USBD_EnumError>
    }
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2000013a 	.word	0x2000013a

08004b08 <USBD_GetDescriptor>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_GetDescriptor (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
    if((req->bmRequestType & USB_REQ_RECIPIENT_MASK) == USB_REQTYPE_DEVICE)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80b9 	bne.w	8004c92 <USBD_GetDescriptor+0x18a>
    {
        uint16_t len;
        uint8_t *pbuf;

        switch (req->wValue >> 8)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	885b      	ldrh	r3, [r3, #2]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	f200 8094 	bhi.w	8004c58 <USBD_GetDescriptor+0x150>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <USBD_GetDescriptor+0x30>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b77 	.word	0x08004b77
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	08004c59 	.word	0x08004c59
 8004b48:	08004c59 	.word	0x08004c59
 8004b4c:	08004c45 	.word	0x08004c45
 8004b50:	08004c4f 	.word	0x08004c4f
        {
            case USB_DESCTYPE_DEVICE:
                pbuf = pudev->dev.desc_cb->GetDeviceDescriptor(pudev->dev.speed, &len);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	7812      	ldrb	r2, [r2, #0]
 8004b5e:	f107 010a 	add.w	r1, r7, #10
 8004b62:	4610      	mov	r0, r2
 8004b64:	4798      	blx	r3
 8004b66:	60f8      	str	r0, [r7, #12]
                if (req->wLength == 64) len = 8;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	88db      	ldrh	r3, [r3, #6]
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d179      	bne.n	8004c64 <USBD_GetDescriptor+0x15c>
 8004b70:	2308      	movs	r3, #8
 8004b72:	817b      	strh	r3, [r7, #10]
                break;
 8004b74:	e076      	b.n	8004c64 <USBD_GetDescriptor+0x15c>

            case USB_DESCTYPE_CONFIGURATION:
                pbuf = (uint8_t *)pudev->dev.class_cb->GetConfigDescriptor(pudev->dev.speed, &len);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	7812      	ldrb	r2, [r2, #0]
 8004b80:	f107 010a 	add.w	r1, r7, #10
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
 8004b88:	60f8      	str	r0, [r7, #12]
                break;
 8004b8a:	e06c      	b.n	8004c66 <USBD_GetDescriptor+0x15e>

            case USB_DESCTYPE_STRING:
                switch ((uint8_t)(req->wValue))
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	885b      	ldrh	r3, [r3, #2]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b05      	cmp	r3, #5
 8004b94:	d850      	bhi.n	8004c38 <USBD_GetDescriptor+0x130>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <USBD_GetDescriptor+0x94>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bb5 	.word	0x08004bb5
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004be1 	.word	0x08004be1
 8004ba8:	08004bf7 	.word	0x08004bf7
 8004bac:	08004c0d 	.word	0x08004c0d
 8004bb0:	08004c23 	.word	0x08004c23
                {
                    case USBD_LANGID_STR_IDX:
                        pbuf = pudev->dev.desc_cb->GetLangIDStrDescriptor(pudev->dev.speed, &len);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	7812      	ldrb	r2, [r2, #0]
 8004bbe:	f107 010a 	add.w	r1, r7, #10
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	4798      	blx	r3
 8004bc6:	60f8      	str	r0, [r7, #12]
                        break;
 8004bc8:	e03b      	b.n	8004c42 <USBD_GetDescriptor+0x13a>

                    case USBD_MFC_STR_IDX:
                        pbuf = pudev->dev.desc_cb->GetManufacturerStrDescriptor(pudev->dev.speed, &len);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	f107 010a 	add.w	r1, r7, #10
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4798      	blx	r3
 8004bdc:	60f8      	str	r0, [r7, #12]
                        break;
 8004bde:	e030      	b.n	8004c42 <USBD_GetDescriptor+0x13a>

                    case USBD_PRODUCT_STR_IDX:
                        pbuf = pudev->dev.desc_cb->GetProductStrDescriptor(pudev->dev.speed, &len);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	f107 010a 	add.w	r1, r7, #10
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4798      	blx	r3
 8004bf2:	60f8      	str	r0, [r7, #12]
                        break;
 8004bf4:	e025      	b.n	8004c42 <USBD_GetDescriptor+0x13a>

                    case USBD_SERIAL_STR_IDX:
                        pbuf = pudev->dev.desc_cb->GetSerialStrDescriptor(pudev->dev.speed, &len);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	7812      	ldrb	r2, [r2, #0]
 8004c00:	f107 010a 	add.w	r1, r7, #10
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
 8004c08:	60f8      	str	r0, [r7, #12]
                        break;
 8004c0a:	e01a      	b.n	8004c42 <USBD_GetDescriptor+0x13a>

                    case USBD_CONFIG_STR_IDX:
                        pbuf = pudev->dev.desc_cb->GetConfigurationStrDescriptor(pudev->dev.speed, &len);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	f107 010a 	add.w	r1, r7, #10
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4798      	blx	r3
 8004c1e:	60f8      	str	r0, [r7, #12]
                        break;
 8004c20:	e00f      	b.n	8004c42 <USBD_GetDescriptor+0x13a>

                    case USBD_INTERFACE_STR_IDX:
                        pbuf = pudev->dev.desc_cb->GetInterfaceStrDescriptor(pudev->dev.speed, &len);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	7812      	ldrb	r2, [r2, #0]
 8004c2c:	f107 010a 	add.w	r1, r7, #10
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
 8004c34:	60f8      	str	r0, [r7, #12]
                        break;
 8004c36:	e004      	b.n	8004c42 <USBD_GetDescriptor+0x13a>
                    default:  
#ifdef USB_SUPPORT_USER_STRING_DESC
                        pbuf = pudev->dev.class_cb->GetUsrStrDescriptor(pudev->dev.speed, (req->wValue), &len);
                        break;
#else
                        USBD_EnumError(pudev, req);
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f96a 	bl	8004f14 <USBD_EnumError>
                        return;
 8004c40:	e033      	b.n	8004caa <USBD_GetDescriptor+0x1a2>
#endif  
                }
                break;
 8004c42:	e010      	b.n	8004c66 <USBD_GetDescriptor+0x15e>

            case USB_DESCTYPE_DEVICE_QUALIFIER:
                USBD_EnumError(pudev, req);
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f964 	bl	8004f14 <USBD_EnumError>
                return;  
 8004c4c:	e02d      	b.n	8004caa <USBD_GetDescriptor+0x1a2>

            case USB_DESCTYPE_OTHER_SPEED_CONFIGURATION:
                USBD_EnumError(pudev, req);
 8004c4e:	6839      	ldr	r1, [r7, #0]
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f95f 	bl	8004f14 <USBD_EnumError>
                return;
 8004c56:	e028      	b.n	8004caa <USBD_GetDescriptor+0x1a2>

            default: 
                USBD_EnumError(pudev, req);
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f95a 	bl	8004f14 <USBD_EnumError>
                return;
 8004c60:	bf00      	nop
 8004c62:	e022      	b.n	8004caa <USBD_GetDescriptor+0x1a2>
        switch (req->wValue >> 8)
        {
            case USB_DESCTYPE_DEVICE:
                pbuf = pudev->dev.desc_cb->GetDeviceDescriptor(pudev->dev.speed, &len);
                if (req->wLength == 64) len = 8;
                break;
 8004c64:	bf00      	nop
            default: 
                USBD_EnumError(pudev, req);
                return;
        }

        if((len != 0) && (req->wLength != 0))
 8004c66:	897b      	ldrh	r3, [r7, #10]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01e      	beq.n	8004caa <USBD_GetDescriptor+0x1a2>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	88db      	ldrh	r3, [r3, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01a      	beq.n	8004caa <USBD_GetDescriptor+0x1a2>
        {
            len = MIN(len, req->wLength);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	88da      	ldrh	r2, [r3, #6]
 8004c78:	897b      	ldrh	r3, [r7, #10]
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bf28      	it	cs
 8004c7e:	4613      	movcs	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	817b      	strh	r3, [r7, #10]

            USB_CtlTx (pudev, pbuf,len);
 8004c84:	897b      	ldrh	r3, [r7, #10]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68f9      	ldr	r1, [r7, #12]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 ff24 	bl	8006ad8 <USB_CtlTx>
 8004c90:	e00b      	b.n	8004caa <USBD_GetDescriptor+0x1a2>
        }
    }
    else if((req->bmRequestType & USB_REQ_RECIPIENT_MASK) == USB_REQTYPE_INTERFACE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <USBD_GetDescriptor+0x1a2>
    {
        pudev->dev.class_cb->GetClassDescriptor(pudev, req);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	4798      	blx	r3
    }
}
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <USBD_SetDescriptor>:
  * @param  pudev: usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_SetDescriptor (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
    /* No handle... */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <USBD_GetConfiguration>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_GetConfiguration (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
    uint32_t USBD_default_config = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]

    if (req->wLength != 1)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	88db      	ldrh	r3, [r3, #6]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d004      	beq.n	8004ce4 <USBD_GetConfiguration+0x20>
    {
        USBD_EnumError(pudev, req);
 8004cda:	6839      	ldr	r1, [r7, #0]
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f919 	bl	8004f14 <USBD_EnumError>

            default:
                break;
        }
    }
}
 8004ce2:	e016      	b.n	8004d12 <USBD_GetConfiguration+0x4e>
    {
        USBD_EnumError(pudev, req);
    }
    else 
    {
        switch (pudev->dev.device_cur_status)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d002      	beq.n	8004cf2 <USBD_GetConfiguration+0x2e>
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d008      	beq.n	8004d02 <USBD_GetConfiguration+0x3e>
            case USB_STATUS_CONFIGURED:
                USB_CtlTx (pudev, &pudev->dev.device_cur_config, 1);
                break;

            default:
                break;
 8004cf0:	e00f      	b.n	8004d12 <USBD_GetConfiguration+0x4e>
    else 
    {
        switch (pudev->dev.device_cur_status)
        {
            case USB_STATUS_ADDRESSED:
                USB_CtlTx (pudev, (uint8_t *)&USBD_default_config, 1);
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 feec 	bl	8006ad8 <USB_CtlTx>
                break;
 8004d00:	e007      	b.n	8004d12 <USBD_GetConfiguration+0x4e>

            case USB_STATUS_CONFIGURED:
                USB_CtlTx (pudev, &pudev->dev.device_cur_config, 1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3301      	adds	r3, #1
 8004d06:	2201      	movs	r2, #1
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fee4 	bl	8006ad8 <USB_CtlTx>
                break;
 8004d10:	bf00      	nop

            default:
                break;
        }
    }
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop

08004d1c <USBD_SetConfiguration>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_SetConfiguration (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
    static uint8_t  cfgidx;

    cfgidx = (uint8_t)(req->wValue);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	885b      	ldrh	r3, [r3, #2]
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b30      	ldr	r3, [pc, #192]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d2e:	701a      	strb	r2, [r3, #0]

    if (cfgidx > USBD_CFG_MAX_NUM) 
 8004d30:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d904      	bls.n	8004d42 <USBD_SetConfiguration+0x26>
    {
        USBD_EnumError(pudev, req);
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8ea 	bl	8004f14 <USBD_EnumError>

            default:
                break;
        }
    }
}
 8004d40:	e052      	b.n	8004de8 <USBD_SetConfiguration+0xcc>
    {
        USBD_EnumError(pudev, req);
    }
    else 
    {
        switch (pudev->dev.device_cur_status) 
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	78db      	ldrb	r3, [r3, #3]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d002      	beq.n	8004d50 <USBD_SetConfiguration+0x34>
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d019      	beq.n	8004d82 <USBD_SetConfiguration+0x66>
                    USB_CtlTransmitStatus(pudev);
                }
                break;

            default:
                break;
 8004d4e:	e04b      	b.n	8004de8 <USBD_SetConfiguration+0xcc>
    else 
    {
        switch (pudev->dev.device_cur_status) 
        {
            case USB_STATUS_ADDRESSED:
                if (cfgidx)
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <USBD_SetConfiguration+0x5e>
                {
                    pudev->dev.device_cur_config = cfgidx;
 8004d58:	4b25      	ldr	r3, [pc, #148]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d5a:	781a      	ldrb	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	705a      	strb	r2, [r3, #1]
                    pudev->dev.device_cur_status = USB_STATUS_CONFIGURED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	70da      	strb	r2, [r3, #3]
                    USBD_SetCfg(pudev, cfgidx);
 8004d66:	4b22      	ldr	r3, [pc, #136]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fc95 	bl	800469c <USBD_SetCfg>
                    USB_CtlTransmitStatus(pudev);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f001 ff00 	bl	8006b78 <USB_CtlTransmitStatus>
                }
                else
                {
                    USB_CtlTransmitStatus(pudev);
                }
                break;
 8004d78:	e036      	b.n	8004de8 <USBD_SetConfiguration+0xcc>
                    USBD_SetCfg(pudev, cfgidx);
                    USB_CtlTransmitStatus(pudev);
                }
                else
                {
                    USB_CtlTransmitStatus(pudev);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 fefc 	bl	8006b78 <USB_CtlTransmitStatus>
                }
                break;
 8004d80:	e032      	b.n	8004de8 <USBD_SetConfiguration+0xcc>

            case USB_STATUS_CONFIGURED:
                if (cfgidx == 0) 
 8004d82:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d110      	bne.n	8004dac <USBD_SetConfiguration+0x90>
                {
                    pudev->dev.device_cur_status = USB_STATUS_ADDRESSED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	70da      	strb	r2, [r3, #3]
                    pudev->dev.device_cur_config = cfgidx;
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d92:	781a      	ldrb	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	705a      	strb	r2, [r3, #1]
                    USBD_ClrCfg(pudev, cfgidx);
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fc92 	bl	80046c8 <USBD_ClrCfg>
                    USB_CtlTransmitStatus(pudev);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 fee7 	bl	8006b78 <USB_CtlTransmitStatus>
                }
                else
                {
                    USB_CtlTransmitStatus(pudev);
                }
                break;
 8004daa:	e01c      	b.n	8004de6 <USBD_SetConfiguration+0xca>
                    pudev->dev.device_cur_status = USB_STATUS_ADDRESSED;
                    pudev->dev.device_cur_config = cfgidx;
                    USBD_ClrCfg(pudev, cfgidx);
                    USB_CtlTransmitStatus(pudev);
                }
                else if (cfgidx != pudev->dev.device_cur_config)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	785a      	ldrb	r2, [r3, #1]
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d013      	beq.n	8004de0 <USBD_SetConfiguration+0xc4>
                {
                    /* Clear old configuration */
                    USBD_ClrCfg(pudev, pudev->dev.device_cur_config);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fc82 	bl	80046c8 <USBD_ClrCfg>

                    /* Set new configuration */
                    pudev->dev.device_cur_config = cfgidx;
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	705a      	strb	r2, [r3, #1]
                    USBD_SetCfg(pudev, cfgidx);
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <USBD_SetConfiguration+0xd4>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fc62 	bl	800469c <USBD_SetCfg>
                    USB_CtlTransmitStatus(pudev);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 fecd 	bl	8006b78 <USB_CtlTransmitStatus>
                }
                else
                {
                    USB_CtlTransmitStatus(pudev);
                }
                break;
 8004dde:	e002      	b.n	8004de6 <USBD_SetConfiguration+0xca>
                    USBD_SetCfg(pudev, cfgidx);
                    USB_CtlTransmitStatus(pudev);
                }
                else
                {
                    USB_CtlTransmitStatus(pudev);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 fec9 	bl	8006b78 <USB_CtlTransmitStatus>
                }
                break;
 8004de6:	bf00      	nop

            default:
                break;
        }
    }
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	2000013b 	.word	0x2000013b

08004df4 <USBD_GetInterface>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_GetInterface (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
    switch (pudev->dev.device_cur_status) 
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	78db      	ldrb	r3, [r3, #3]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d002      	beq.n	8004e0c <USBD_GetInterface+0x18>
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d005      	beq.n	8004e16 <USBD_GetInterface+0x22>
                USBD_EnumError(pudev, req);
            }
            break;

        default:
            break;
 8004e0a:	e015      	b.n	8004e38 <USBD_GetInterface+0x44>
static void  USBD_GetInterface (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
    switch (pudev->dev.device_cur_status) 
    {
        case USB_STATUS_ADDRESSED:
            USBD_EnumError(pudev, req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f880 	bl	8004f14 <USBD_EnumError>
            break;
 8004e14:	e010      	b.n	8004e38 <USBD_GetInterface+0x44>

        case USB_STATUS_CONFIGURED:
            if (LOWBYTE(req->wIndex) <= USBD_ITF_MAX_NUM)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	889b      	ldrh	r3, [r3, #4]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d806      	bhi.n	8004e2e <USBD_GetInterface+0x3a>
            {
                pudev->dev.class_cb->GetInterface (pudev, req);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
            }
            else
            {
                USBD_EnumError(pudev, req);
            }
            break;
 8004e2c:	e003      	b.n	8004e36 <USBD_GetInterface+0x42>
            {
                pudev->dev.class_cb->GetInterface (pudev, req);
            }
            else
            {
                USBD_EnumError(pudev, req);
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f86f 	bl	8004f14 <USBD_EnumError>
            }
            break;
 8004e36:	bf00      	nop

        default:
            break;
    }
}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USBD_SetInterface>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_SetInterface (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
    switch (pudev->dev.device_cur_status) 
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d002      	beq.n	8004e58 <USBD_SetInterface+0x18>
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d005      	beq.n	8004e62 <USBD_SetInterface+0x22>
                USBD_EnumError(pudev, req);
            }
            break;

        default:
            break;
 8004e56:	e015      	b.n	8004e84 <USBD_SetInterface+0x44>
static void  USBD_SetInterface (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
    switch (pudev->dev.device_cur_status) 
    {
        case USB_STATUS_ADDRESSED:
            USBD_EnumError(pudev, req);
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f85a 	bl	8004f14 <USBD_EnumError>
            break;
 8004e60:	e010      	b.n	8004e84 <USBD_SetInterface+0x44>

        case USB_STATUS_CONFIGURED:
            if (LOWBYTE(req->wIndex) <= USBD_ITF_MAX_NUM)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	889b      	ldrh	r3, [r3, #4]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d806      	bhi.n	8004e7a <USBD_SetInterface+0x3a>
            {
                pudev->dev.class_cb->SetInterface (pudev, req);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
            }
            else
            {
                USBD_EnumError(pudev, req);
            }
            break;
 8004e78:	e003      	b.n	8004e82 <USBD_SetInterface+0x42>
            {
                pudev->dev.class_cb->SetInterface (pudev, req);
            }
            else
            {
                USBD_EnumError(pudev, req);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f849 	bl	8004f14 <USBD_EnumError>
            }
            break;
 8004e82:	bf00      	nop

        default:
            break;
    }
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USBD_SynchFrame>:
  * @param  pudev: pointer to usb device instance
  * @param  req: usb device request
  * @retval None
  */
static void  USBD_SynchFrame (USB_DEVICE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
    /* No handle... */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <USBD_ParseSetupRequest>:
  * @param  req: usb device request
  * @retval None
  */

void  USBD_ParseSetupRequest (USB_CORE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
    req->bmRequestType = *(uint8_t *)  (pudev->dev.setup_packet);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	799a      	ldrb	r2, [r3, #6]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
    req->bRequest      = *(uint8_t *)  (pudev->dev.setup_packet + 1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	79da      	ldrb	r2, [r3, #7]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	705a      	strb	r2, [r3, #1]
    req->wValue        = SWAPBYTE      (pudev->dev.setup_packet + 2);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7a1b      	ldrb	r3, [r3, #8]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7a5b      	ldrb	r3, [r3, #9]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	805a      	strh	r2, [r3, #2]
    req->wIndex        = SWAPBYTE      (pudev->dev.setup_packet + 4);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7a9b      	ldrb	r3, [r3, #10]
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	7adb      	ldrb	r3, [r3, #11]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	809a      	strh	r2, [r3, #4]
    req->wLength       = SWAPBYTE      (pudev->dev.setup_packet + 6);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7b1b      	ldrb	r3, [r3, #12]
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	7b5b      	ldrb	r3, [r3, #13]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	80da      	strh	r2, [r3, #6]

    pudev->dev.device_cur_state = USB_CTRL_SETUP;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	709a      	strb	r2, [r3, #2]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop

08004f14 <USBD_EnumError>:
  * @param  req: usb device request
  * @retval None
  */

void  USBD_EnumError (USB_CORE_HANDLE *pudev, USB_DEVICE_REQ *req)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    USB_EP_Stall(pudev, EP0);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 fc73 	bl	800680c <USB_EP_Stall>
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <USBD_GetUnicodeString>:
  * @param  unicode: formatted string (unicode)
  * @param  len: descriptor length pointer
  * @retval None
  */
void  USBD_GetUnicodeString (uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
    uint8_t idx = 1;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]

    if (desc != NULL) 
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d028      	beq.n	8004f98 <USBD_GetUnicodeString+0x68>
    {
        unicode[idx++] =  USB_DESCTYPE_STRING;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	75fa      	strb	r2, [r7, #23]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	2203      	movs	r2, #3
 8004f54:	701a      	strb	r2, [r3, #0]

        for (; *desc != NULL; ) 
 8004f56:	e012      	b.n	8004f7e <USBD_GetUnicodeString+0x4e>
        {
            unicode[idx++] = *desc++;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	75fa      	strb	r2, [r7, #23]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	441a      	add	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	60f9      	str	r1, [r7, #12]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	7013      	strb	r3, [r2, #0]
            unicode[idx++] =  0x00;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	75fa      	strb	r2, [r7, #23]
 8004f74:	461a      	mov	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4413      	add	r3, r2
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]

    if (desc != NULL) 
    {
        unicode[idx++] =  USB_DESCTYPE_STRING;

        for (; *desc != NULL; ) 
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e8      	bne.n	8004f58 <USBD_GetUnicodeString+0x28>
        {
            unicode[idx++] = *desc++;
            unicode[idx++] =  0x00;
        }

        *len = idx;
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	801a      	strh	r2, [r3, #0]
        unicode[0] = *len;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	701a      	strb	r2, [r3, #0]
    }
}
 8004f98:	bf00      	nop
 8004f9a:	371c      	adds	r7, #28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop

08004fa4 <USBINT_LPST>:
  * @brief  Handle usb low priority successful transfer event 
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_LPST (USB_DEVICE_HANDLE *pudev)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
    USB_EP *Ep = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
    uint8_t EpID = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74fb      	strb	r3, [r7, #19]
    __IO uint16_t Ifr = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	817b      	strh	r3, [r7, #10]
    __IO uint16_t EpValue = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	813b      	strh	r3, [r7, #8]

    /* Wait till interrupts are not pending */
    while(((Ifr = _GetIFR()) & IFR_STIF) != 0)
 8004fbc:	e0d3      	b.n	8005166 <USBINT_LPST+0x1c2>
    {
        /* Get endpoint number and the value of control and state register */
        EpID = (uint8_t)(Ifr & IFR_EPNUM);
 8004fbe:	897b      	ldrh	r3, [r7, #10]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	74fb      	strb	r3, [r7, #19]
        EpValue = _GetEPxCSR(EpID);
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fd2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	813b      	strh	r3, [r7, #8]

        if((Ifr & IFR_DIR) == 0)
 8004fdc:	897b      	ldrh	r3, [r7, #10]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d13f      	bne.n	8005068 <USBINT_LPST+0xc4>
        {
            /* Handle the In direction transaction */

            Ep = &(pudev->dev.in_ep[EpID]);
 8004fe8:	7cfa      	ldrb	r2, [r7, #19]
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	3310      	adds	r3, #16
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

            if((EpValue & EPTX_ST) != 0)
 8004ffa:	893b      	ldrh	r3, [r7, #8]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80af 	beq.w	8005166 <USBINT_LPST+0x1c2>
            {
                /* Clear successful transmit interrupt flag */
                _ClearEPTX_ST(EpID);
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005010:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005014:	7cfa      	ldrb	r2, [r7, #19]
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800501c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	b292      	uxth	r2, r2
 8005024:	4611      	mov	r1, r2
 8005026:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]

                /* Just handle single buffer situation */
                Ep->xfer_count = _GetEPTxCount(EpID);
 800502e:	4b55      	ldr	r3, [pc, #340]	; (8005184 <USBINT_LPST+0x1e0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	7cfb      	ldrb	r3, [r7, #19]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	441a      	add	r2, r3
 800503c:	4b52      	ldr	r3, [pc, #328]	; (8005188 <USBINT_LPST+0x1e4>)
 800503e:	4413      	add	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	615a      	str	r2, [r3, #20]

                /* Maybe mutiple packets */
                Ep->xfer_buf += Ep->xfer_count;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	441a      	add	r2, r3
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	60da      	str	r2, [r3, #12]

                USBD_DataInStage(pudev, EpID);
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fa8f 	bl	8004584 <USBD_DataInStage>
 8005066:	e07e      	b.n	8005166 <USBINT_LPST+0x1c2>
        }
        else
        {
            /* Handle the OUT direction transaction */

            int count = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

            Ep = &(pudev->dev.out_ep[EpID]);
 800506c:	7cfa      	ldrb	r2, [r7, #19]
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	3340      	adds	r3, #64	; 0x40
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

            if((EpValue & EPRX_ST) != 0)
 800507e:	893b      	ldrh	r3, [r7, #8]
 8005080:	b29b      	uxth	r3, r3
 8005082:	b21b      	sxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	da6e      	bge.n	8005166 <USBINT_LPST+0x1c2>
            {
                /* Clear successful receive interrupt flag */
                _ClearEPRX_ST(EpID);
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005090:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005094:	7cfa      	ldrb	r2, [r7, #19]
 8005096:	0092      	lsls	r2, r2, #2
 8005098:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800509c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	b292      	uxth	r2, r2
 80050a4:	4611      	mov	r1, r2
 80050a6:	f640 728f 	movw	r2, #3983	; 0xf8f
 80050aa:	400a      	ands	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]

                count = _GetEPRxCount(EpID);
 80050ae:	4b35      	ldr	r3, [pc, #212]	; (8005184 <USBINT_LPST+0x1e0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	441a      	add	r2, r3
 80050bc:	4b33      	ldr	r3, [pc, #204]	; (800518c <USBINT_LPST+0x1e8>)
 80050be:	4413      	add	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ca:	60fb      	str	r3, [r7, #12]

                if(count != 0)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01c      	beq.n	800510c <USBINT_LPST+0x168>
                {
                    if((EpValue & EP_SETUP) != 0)
 80050d2:	893b      	ldrh	r3, [r7, #8]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00d      	beq.n	80050fa <USBINT_LPST+0x156>
                    {
                        /* Handle setup packet */
                        BufferCopyToUser(&(pudev->dev.setup_packet[0]), Ep->bufaddress, count);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	1d98      	adds	r0, r3, #6
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	885b      	ldrh	r3, [r3, #2]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	b292      	uxth	r2, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	f000 fdca 	bl	8005c84 <BufferCopyToUser>

                        USBD_SetupStage(pudev);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff f9b1 	bl	8004458 <USBD_SetupStage>

                        return USBD_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	e03f      	b.n	800517a <USBINT_LPST+0x1d6>
                    }
                    else
                    {
                        BufferCopyToUser(Ep->xfer_buf, Ep->bufaddress, count);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	68d8      	ldr	r0, [r3, #12]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	885b      	ldrh	r3, [r3, #2]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	b292      	uxth	r2, r2
 8005106:	4619      	mov	r1, r3
 8005108:	f000 fdbc 	bl	8005c84 <BufferCopyToUser>
                    }
                }

                /* Maybe mutiple packets */
                Ep->xfer_count += count;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	441a      	add	r2, r3
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	615a      	str	r2, [r3, #20]
                Ep->xfer_buf += count;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	441a      	add	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	60da      	str	r2, [r3, #12]
                Ep->xfer_len -= count;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1ad2      	subs	r2, r2, r3
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	611a      	str	r2, [r3, #16]

                if(Ep->xfer_len == 0 || count < Ep->maxpacket)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <USBINT_LPST+0x19e>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	429a      	cmp	r2, r3
 8005140:	d908      	bls.n	8005154 <USBINT_LPST+0x1b0>
                {
                    USBD_DataOutStage(pudev, EpID);
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff f9b8 	bl	80044bc <USBD_DataOutStage>
                    Ep->xfer_count = 0;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	615a      	str	r2, [r3, #20]
 8005152:	e008      	b.n	8005166 <USBINT_LPST+0x1c2>
                }
                else
                {
                    USB_EP_Rx(pudev, EpID, Ep->xfer_buf, Ep->xfer_len);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	b29b      	uxth	r3, r3
 800515e:	7cf9      	ldrb	r1, [r7, #19]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 f9b9 	bl	80064d8 <USB_EP_Rx>
    uint8_t EpID = 0;
    __IO uint16_t Ifr = 0;
    __IO uint16_t EpValue = 0;

    /* Wait till interrupts are not pending */
    while(((Ifr = _GetIFR()) & IFR_STIF) != 0)
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <USBINT_LPST+0x1ec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	817a      	strh	r2, [r7, #10]
 8005170:	b21b      	sxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	f6ff af23 	blt.w	8004fbe <USBINT_LPST+0x1a>
                }
            }
        }/* if((temp_Ifr & IFR_DIR) == 0) else ... */    
    }/* while(...) */

    return USBD_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40005c50 	.word	0x40005c50
 8005188:	20003002 	.word	0x20003002
 800518c:	20003006 	.word	0x20003006
 8005190:	40005c44 	.word	0x40005c44

08005194 <USBINT_HPST>:
  * @brief  Handle usb high priority successful transfer event
  * @param  pudev: pointer to usb device instance 
  * @retval usb device operation status
  */
static uint8_t  USBINT_HPST (USB_DEVICE_HANDLE *pudev)
{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b089      	sub	sp, #36	; 0x24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    USB_EP  *Ep = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
    uint8_t  EpID = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	74fb      	strb	r3, [r7, #19]
    __IO uint16_t Ifr = 0;  
 80051a4:	2300      	movs	r3, #0
 80051a6:	823b      	strh	r3, [r7, #16]
    __IO uint16_t EpValue = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	81fb      	strh	r3, [r7, #14]

    /* wait till interrupts are not pending */
    while (((Ifr = _GetIFR()) & IFR_STIF) != 0)
 80051ac:	e163      	b.n	8005476 <USBINT_HPST+0x2e2>
    {
        /* Get endpoint number and the value of control and states register */
        EpID = (uint8_t)(Ifr & IFR_EPNUM);
 80051ae:	8a3b      	ldrh	r3, [r7, #16]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	74fb      	strb	r3, [r7, #19]
        EpValue = _GetEPxCSR(EpID);
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051c2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	81fb      	strh	r3, [r7, #14]

        if((Ifr & IFR_DIR) == 0)
 80051cc:	8a3b      	ldrh	r3, [r7, #16]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 80ac 	bne.w	8005332 <USBINT_HPST+0x19e>
        {
            /* handle the In direction transaction */

            Ep = &(pudev->dev.in_ep[EpID]);
 80051da:	7cfa      	ldrb	r2, [r7, #19]
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	3310      	adds	r3, #16
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

            if((EpValue & EPTX_ST) != 0)
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 813e 	beq.w	8005476 <USBINT_HPST+0x2e2>
            {
                uint16_t len = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	83fb      	strh	r3, [r7, #30]
                uint16_t bufaddr = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	83bb      	strh	r3, [r7, #28]

                _ClearEPTX_ST(EpID);
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800520a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800520e:	7cfa      	ldrb	r2, [r7, #19]
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005216:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	b292      	uxth	r2, r2
 800521e:	4611      	mov	r1, r2
 8005220:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8005224:	400a      	ands	r2, r1
 8005226:	601a      	str	r2, [r3, #0]

                if (EpValue & EPTX_DTG)
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d013      	beq.n	800525c <USBINT_HPST+0xc8>
                {
                    Ep->xfer_count = _GetEPDblBuf0Count(EpID);
 8005234:	4b97      	ldr	r3, [pc, #604]	; (8005494 <USBINT_HPST+0x300>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	441a      	add	r2, r3
 8005242:	4b95      	ldr	r3, [pc, #596]	; (8005498 <USBINT_HPST+0x304>)
 8005244:	4413      	add	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	615a      	str	r2, [r3, #20]
                    bufaddr = Ep->buf1addr;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	88db      	ldrh	r3, [r3, #6]
 8005258:	83bb      	strh	r3, [r7, #28]
 800525a:	e012      	b.n	8005282 <USBINT_HPST+0xee>
                }
                else
                {
                    Ep->xfer_count = _GetEPDblBuf1Count(EpID);
 800525c:	4b8d      	ldr	r3, [pc, #564]	; (8005494 <USBINT_HPST+0x300>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	7cfb      	ldrb	r3, [r7, #19]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	441a      	add	r2, r3
 800526a:	4b8c      	ldr	r3, [pc, #560]	; (800549c <USBINT_HPST+0x308>)
 800526c:	4413      	add	r3, r2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	615a      	str	r2, [r3, #20]
                    bufaddr = Ep->buf0addr;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	889b      	ldrh	r3, [r3, #4]
 8005280:	83bb      	strh	r3, [r7, #28]
                }

                Ep->xfer_buf += Ep->xfer_count;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	441a      	add	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	60da      	str	r2, [r3, #12]
                Ep->xfer_len -= Ep->xfer_count;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	1ad2      	subs	r2, r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	611a      	str	r2, [r3, #16]

                if(Ep->xfer_len > Ep->maxpacket)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d903      	bls.n	80052b2 <USBINT_HPST+0x11e>
                {
                    len = Ep->maxpacket;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	83fb      	strh	r3, [r7, #30]
 80052b0:	e00c      	b.n	80052cc <USBINT_HPST+0x138>
                }
                else if((0 < Ep->xfer_len) && (Ep->xfer_len <= Ep->maxpacket))
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <USBINT_HPST+0x138>
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d802      	bhi.n	80052cc <USBINT_HPST+0x138>
                {
                    len = Ep->xfer_len;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	83fb      	strh	r3, [r7, #30]
                }

                if(len > 0)
 80052cc:	8bfb      	ldrh	r3, [r7, #30]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <USBINT_HPST+0x156>
                {
                    UserCopyToBuffer(Ep->xfer_buf, bufaddr, len);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	8bfa      	ldrh	r2, [r7, #30]
 80052d8:	8bb9      	ldrh	r1, [r7, #28]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fc98 	bl	8005c10 <UserCopyToBuffer>
                    FreeUserBuffer(EpID, DBUF_EP_IN);
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fc55 	bl	8005b94 <FreeUserBuffer>
                }

                if(Ep->xfer_len == 0)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 80c1 	bne.w	8005476 <USBINT_HPST+0x2e2>
                {
                    _SetEPTxStatus(EpID, EPTX_NAK);
 80052f4:	7cfb      	ldrb	r3, [r7, #19]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	b29c      	uxth	r4, r3
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005316:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800531a:	f084 0220 	eor.w	r2, r4, #32
 800531e:	b292      	uxth	r2, r2
 8005320:	601a      	str	r2, [r3, #0]
                    pudev->dev.class_cb->DataIn(&USB_Device_dev, EpID);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	7cfa      	ldrb	r2, [r7, #19]
 800532a:	4611      	mov	r1, r2
 800532c:	485c      	ldr	r0, [pc, #368]	; (80054a0 <USBINT_HPST+0x30c>)
 800532e:	4798      	blx	r3
 8005330:	e0a1      	b.n	8005476 <USBINT_HPST+0x2e2>
        }
        else
        {
            /* Handle the Out direction transaction */

            Ep = &((&USB_Device_dev)->dev.out_ep[EpID]);
 8005332:	7cfa      	ldrb	r2, [r7, #19]
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	3340      	adds	r3, #64	; 0x40
 800533e:	4a58      	ldr	r2, [pc, #352]	; (80054a0 <USBINT_HPST+0x30c>)
 8005340:	4413      	add	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

            if((EpValue & EPRX_ST) != 0)
 8005344:	89fb      	ldrh	r3, [r7, #14]
 8005346:	b29b      	uxth	r3, r3
 8005348:	b21b      	sxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	f280 8093 	bge.w	8005476 <USBINT_HPST+0x2e2>
            {
                int count = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]

                _ClearEPRX_ST(EpID);
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800535c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005360:	7cfa      	ldrb	r2, [r7, #19]
 8005362:	0092      	lsls	r2, r2, #2
 8005364:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005368:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	b292      	uxth	r2, r2
 8005370:	4611      	mov	r1, r2
 8005372:	f640 728f 	movw	r2, #3983	; 0xf8f
 8005376:	400a      	ands	r2, r1
 8005378:	601a      	str	r2, [r3, #0]

                if (EpValue & EPRX_DTG)
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01b      	beq.n	80053be <USBINT_HPST+0x22a>
                {
                    count = _GetEPDblBuf0Count(EpID);
 8005386:	4b43      	ldr	r3, [pc, #268]	; (8005494 <USBINT_HPST+0x300>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	441a      	add	r2, r3
 8005394:	4b40      	ldr	r3, [pc, #256]	; (8005498 <USBINT_HPST+0x304>)
 8005396:	4413      	add	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a2:	61bb      	str	r3, [r7, #24]
                    if (count != 0)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d024      	beq.n	80053f4 <USBINT_HPST+0x260>
                    {
                        BufferCopyToUser(Ep->xfer_buf, Ep->buf0addr, count);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	68d8      	ldr	r0, [r3, #12]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	889b      	ldrh	r3, [r3, #4]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	b292      	uxth	r2, r2
 80053b6:	4619      	mov	r1, r3
 80053b8:	f000 fc64 	bl	8005c84 <BufferCopyToUser>
 80053bc:	e01a      	b.n	80053f4 <USBINT_HPST+0x260>
                    }
                }
                else
                {
                    count = _GetEPDblBuf1Count(EpID);
 80053be:	4b35      	ldr	r3, [pc, #212]	; (8005494 <USBINT_HPST+0x300>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	441a      	add	r2, r3
 80053cc:	4b33      	ldr	r3, [pc, #204]	; (800549c <USBINT_HPST+0x308>)
 80053ce:	4413      	add	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053da:	61bb      	str	r3, [r7, #24]
                    if (count != 0)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <USBINT_HPST+0x260>
                    {
                        BufferCopyToUser(Ep->xfer_buf, Ep->buf1addr, count);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	68d8      	ldr	r0, [r3, #12]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	88db      	ldrh	r3, [r3, #6]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	b292      	uxth	r2, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	f000 fc48 	bl	8005c84 <BufferCopyToUser>
                    }
                }

                FreeUserBuffer(EpID, DBUF_EP_OUT);
 80053f4:	7cfb      	ldrb	r3, [r7, #19]
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fbcb 	bl	8005b94 <FreeUserBuffer>

                /* Maybe multiple packets */
                Ep->xfer_buf += count;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	441a      	add	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	60da      	str	r2, [r3, #12]
                Ep->xfer_count += count;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	441a      	add	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	615a      	str	r2, [r3, #20]
                Ep->xfer_len -= count;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	1ad2      	subs	r2, r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	611a      	str	r2, [r3, #16]

                if((Ep->xfer_len == 0) || (count < Ep->maxpacket))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <USBINT_HPST+0x2a0>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d920      	bls.n	8005476 <USBINT_HPST+0x2e2>
                {
                    _SetEPRxStatus(EpID, EPRX_NAK);
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800543c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	b29c      	uxth	r4, r3
 800544e:	7cfb      	ldrb	r3, [r7, #19]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005456:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800545a:	f484 5200 	eor.w	r2, r4, #8192	; 0x2000
 800545e:	b292      	uxth	r2, r2
 8005460:	601a      	str	r2, [r3, #0]
                    pudev->dev.class_cb->DataOut(&USB_Device_dev, EpID);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	7cfa      	ldrb	r2, [r7, #19]
 800546a:	4611      	mov	r1, r2
 800546c:	480c      	ldr	r0, [pc, #48]	; (80054a0 <USBINT_HPST+0x30c>)
 800546e:	4798      	blx	r3
                    Ep->xfer_count = 0;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2200      	movs	r2, #0
 8005474:	615a      	str	r2, [r3, #20]
    uint8_t  EpID = 0;
    __IO uint16_t Ifr = 0;  
    __IO uint16_t EpValue = 0;

    /* wait till interrupts are not pending */
    while (((Ifr = _GetIFR()) & IFR_STIF) != 0)
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <USBINT_HPST+0x310>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	823a      	strh	r2, [r7, #16]
 8005480:	b21b      	sxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	f6ff ae93 	blt.w	80051ae <USBINT_HPST+0x1a>
                }
            }
        }/* if((temp_Ifr & IFR_DIR) == 0) else ... */    
    }/* while(...) */

    return USBD_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3724      	adds	r7, #36	; 0x24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd90      	pop	{r4, r7, pc}
 8005492:	bf00      	nop
 8005494:	40005c50 	.word	0x40005c50
 8005498:	20003002 	.word	0x20003002
 800549c:	20003006 	.word	0x20003006
 80054a0:	20000150 	.word	0x20000150
 80054a4:	40005c44 	.word	0x40005c44

080054a8 <USBINT_PMOU>:
  * @brief  Handle usb packet buffer overrun/underrun event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_PMOU (USB_CORE_HANDLE *pudev)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
    return USBD_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <USBINT_Error>:
  * @brief  Handle error event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_Error (USB_CORE_HANDLE *pudev)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    return USBD_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <USBINT_SOF>:
  * @brief  Handle usb SOF event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_SOF (USB_CORE_HANDLE *pudev)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    if(pudev->dev.class_cb->SOF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <USBINT_SOF+0x1c>
    {
        pudev->dev.class_cb->SOF(pudev); 
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
    }
    return USBD_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <USBINT_ESOF>:
  * @brief  Handle usb expect SOF event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_ESOF (USB_CORE_HANDLE *pudev)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
    /* Control resume time by ESOFs */
    USBD_Resume(RESUME_ESOF); 
 8005500:	2005      	movs	r0, #5
 8005502:	f000 f8cf 	bl	80056a4 <USBD_Resume>

    return USBD_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USBINT_Reset>:
  * @brief  Handle usb reset event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_Reset (USB_CORE_HANDLE *pudev)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
    USB_EP_BufConfig(pudev, 0x00, USB_SNG_BUFTYPE, EP0_RX_ADDRESS);
 8005518:	2320      	movs	r3, #32
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fc16 	bl	8005d50 <USB_EP_BufConfig>
    USB_EP_BufConfig(pudev, 0x80, USB_SNG_BUFTYPE, EP0_TX_ADDRESS);
 8005524:	2360      	movs	r3, #96	; 0x60
 8005526:	2200      	movs	r2, #0
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fc10 	bl	8005d50 <USB_EP_BufConfig>

    /* Initialize endpoint0 in OUT direction */
    USB_EP_Init(pudev,
 8005530:	2340      	movs	r3, #64	; 0x40
 8005532:	2200      	movs	r2, #0
 8005534:	2100      	movs	r1, #0
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fc8a 	bl	8005e50 <USB_EP_Init>
                EP0_OUT,
                USB_EPTYPE_CONTROL,
                USB_EP0_MAX_SIZE);

    /* Initialize endpoint0 in IN direction */
    USB_EP_Init(pudev,
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	2200      	movs	r2, #0
 8005540:	2180      	movs	r1, #128	; 0x80
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fc84 	bl	8005e50 <USB_EP_Init>
                EP0_IN,
                USB_EPTYPE_CONTROL,
                USB_EP0_MAX_SIZE);

    /* Call back user reset function */
    pudev->dev.user_cb->DeviceReset(pudev->dev.speed);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	4610      	mov	r0, r2
 8005554:	4798      	blx	r3

    /* Set device address as default address 0 */
    USB_EP_SetAddress(pudev, 0);
 8005556:	2100      	movs	r1, #0
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 fa65 	bl	8006a28 <USB_EP_SetAddress>

    pudev->dev.device_cur_status = USB_STATUS_DEFAULT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	70da      	strb	r2, [r3, #3]

    return USBD_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop

08005570 <USBINT_Suspend>:
  * @brief  Handle usb suspend event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_Suspend (USB_CORE_HANDLE *pudev)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    /* Store the device current status */
    pudev->dev.device_old_status = pudev->dev.device_cur_status;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	78da      	ldrb	r2, [r3, #3]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	711a      	strb	r2, [r3, #4]

    /* Set device in suspended state */
    pudev->dev.device_cur_status  = USB_STATUS_SUSPENDED;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2204      	movs	r2, #4
 8005584:	70da      	strb	r2, [r3, #3]

    /* Call back user suspend function */
    pudev->dev.user_cb->DeviceSuspended();
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4798      	blx	r3

    /* Enter usb in suspend and mcu system in low power mode */
    if (SuspendEnabled)
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <USBINT_Suspend+0x40>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <USBINT_Suspend+0x2e>
    {
        USBD_Suspend();
 8005598:	f000 f85c 	bl	8005654 <USBD_Suspend>
 800559c:	e002      	b.n	80055a4 <USBINT_Suspend+0x34>
    }
    else
    {
        /* if not possible then resume after xx ms */
        USBD_Resume(RESUME_LATER);
 800559e:	2002      	movs	r0, #2
 80055a0:	f000 f880 	bl	80056a4 <USBD_Resume>
    }

    return USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200000f9 	.word	0x200000f9

080055b4 <USBINT_WakeUp>:
  * @brief  Handle usb wakeup event
  * @param  pudev: pointer to usb device instance
  * @retval usb device operation status
  */
static uint8_t  USBINT_WakeUp (USB_CORE_HANDLE *pudev)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
    /* Call back user resume function */
    pudev->dev.user_cb->DeviceResumed(); 
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	4798      	blx	r3

    /* Restore the old status */
    pudev->dev.device_cur_status = pudev->dev.device_old_status;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	791a      	ldrb	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	70da      	strb	r2, [r3, #3]

    USBD_Resume(RESUME_EXTERNAL);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f000 f869 	bl	80056a4 <USBD_Resume>

    return USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <ResumeMCU>:
  * @brief  Usb wakeup first operation is to wakeup mcu
  * @param  None
  * @retval None
  */
static void  ResumeMCU (void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
    /* Clear low_power mode bit in CTLR */
    _SetCTLR(_GetCTLR() & (~CTLR_LOWM));
 80055e0:	4a08      	ldr	r2, [pc, #32]	; (8005604 <ResumeMCU+0x28>)
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <ResumeMCU+0x28>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f023 0304 	bic.w	r3, r3, #4
 80055ec:	6013      	str	r3, [r2, #0]

#ifdef USB_DEVICE_LOW_PWR_MODE_SUPPORT

    /* Restore normal operations */
    LeaveLowPowerMode();
 80055ee:	f000 f80b 	bl	8005608 <LeaveLowPowerMode>

#endif

    /* Clear SETSPS bit */
    _SetCTLR(_GetCTLR() & (~CTLR_SETSPS));
 80055f2:	4a04      	ldr	r2, [pc, #16]	; (8005604 <ResumeMCU+0x28>)
 80055f4:	4b03      	ldr	r3, [pc, #12]	; (8005604 <ResumeMCU+0x28>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f023 0308 	bic.w	r3, r3, #8
 80055fe:	6013      	str	r3, [r2, #0]
}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40005c40 	.word	0x40005c40

08005608 <LeaveLowPowerMode>:
  * @brief  Restores system clocks and power while exiting suspend mode
  * @param  None
  * @retval None
  */
static void  LeaveLowPowerMode (void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
    /* Restore system clock */

    /* Enable HSE */
    RCC_HSEConfig(RCC_HSE_ON);
 800560c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005610:	f7fb fdea 	bl	80011e8 <RCC_HSEConfig>

    /* Wait till HSE is ready */
    while(RCC_GetBitState(RCC_FLAG_HSESTB) == RESET);
 8005614:	bf00      	nop
 8005616:	2031      	movs	r0, #49	; 0x31
 8005618:	f7fc f9d4 	bl	80019c4 <RCC_GetBitState>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f9      	beq.n	8005616 <LeaveLowPowerMode+0xe>

    /* Enable PLL */
    RCC_PLL_Enable(ENABLE);
 8005622:	2001      	movs	r0, #1
 8005624:	f7fb fe78 	bl	8001318 <RCC_PLL_Enable>

    /* Wait till PLL is ready */
    while(RCC_GetBitState(RCC_FLAG_PLLSTB) == RESET);
 8005628:	bf00      	nop
 800562a:	2039      	movs	r0, #57	; 0x39
 800562c:	f7fc f9ca 	bl	80019c4 <RCC_GetBitState>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f9      	beq.n	800562a <LeaveLowPowerMode+0x22>

    /* Select PLL as system clock source */
    RCC_CK_SYSConfig(RCC_SYSCLKSOURCE_PLLCLK);
 8005636:	2002      	movs	r0, #2
 8005638:	f7fb fe8a 	bl	8001350 <RCC_CK_SYSConfig>

    /* Wait till PLL is used as system clock source */
    while(RCC_GetCK_SYSSource() != 0x08);
 800563c:	bf00      	nop
 800563e:	f7fb fea3 	bl	8001388 <RCC_GetCK_SYSSource>
 8005642:	4603      	mov	r3, r0
 8005644:	2b08      	cmp	r3, #8
 8005646:	d1fa      	bne.n	800563e <LeaveLowPowerMode+0x36>

    /* Low power sleep on exit disabled */
    NVIC_SystemLowPowerConfig(NVIC_LOWPOWER_SLEEPONEXIT, DISABLE);
 8005648:	2100      	movs	r1, #0
 800564a:	2002      	movs	r0, #2
 800564c:	f7fd ff5c 	bl	8003508 <NVIC_SystemLowPowerConfig>
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBD_Suspend>:
  * @brief  Set usb device to suspend mode
  * @param  None
  * @retval None
  */
void  USBD_Suspend (void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
    /* Set suspend and low-power mode in the macrocell */
    _SetCTLR(_GetCTLR() | CTLR_SETSPS | CTLR_LOWM);
 8005658:	4a10      	ldr	r2, [pc, #64]	; (800569c <USBD_Suspend+0x48>)
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <USBD_Suspend+0x48>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f043 030c 	orr.w	r3, r3, #12
 8005664:	b29b      	uxth	r3, r3
 8005666:	6013      	str	r3, [r2, #0]

#ifdef USB_DEVICE_LOW_PWR_MODE_SUPPORT

    /* When wakeup flag in not set, enter system to DEEP_SLEEP mode */
    if((_GetIFR() & IFR_WKUPIF) == 0)
 8005668:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <USBD_Suspend+0x4c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d104      	bne.n	8005680 <USBD_Suspend+0x2c>
    {
        /* Enter DEEP_SLEEP mode with LDO in low power mode */
        PWR_DEEPSLEEPMode_Entry(PWR_LDO_LOWPOWER, PWR_DEEPSLEEPENTRY_WFI);
 8005676:	2101      	movs	r1, #1
 8005678:	2001      	movs	r0, #1
 800567a:	f000 fa0b 	bl	8005a94 <PWR_DEEPSLEEPMode_Entry>
        /* Clear SETSPS to abort entry in suspend mode */
        _SetCTLR(_GetCTLR() & (~CTLR_SETSPS));
    }

#endif
}
 800567e:	e00a      	b.n	8005696 <USBD_Suspend+0x42>
        PWR_DEEPSLEEPMode_Entry(PWR_LDO_LOWPOWER, PWR_DEEPSLEEPENTRY_WFI);
    }
    else
    {
        /* Clear wakeup flag */
        _SetIFR(CLR_WKUPIF);
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <USBD_Suspend+0x4c>)
 8005682:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8005686:	601a      	str	r2, [r3, #0]

        /* Clear SETSPS to abort entry in suspend mode */
        _SetCTLR(_GetCTLR() & (~CTLR_SETSPS));
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <USBD_Suspend+0x48>)
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <USBD_Suspend+0x48>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f023 0308 	bic.w	r3, r3, #8
 8005694:	6013      	str	r3, [r2, #0]
    }

#endif
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40005c40 	.word	0x40005c40
 80056a0:	40005c44 	.word	0x40005c44

080056a4 <USBD_Resume>:
  *     @arg RESUME_ESOF: it doesn't change state just allowing
  *       decrementing of the ESOF counter in different states.
  * @retval None
  */
void  USBD_Resume (RESUME_STATE ResumeValue)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
    if (ResumeValue != RESUME_ESOF) State = ResumeValue;
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d002      	beq.n	80056ba <USBD_Resume+0x16>
 80056b4:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <USBD_Resume+0xc0>)
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	7013      	strb	r3, [r2, #0]

    switch (State)
 80056ba:	4b2a      	ldr	r3, [pc, #168]	; (8005764 <USBD_Resume+0xc0>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d848      	bhi.n	8005756 <USBD_Resume+0xb2>
 80056c4:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <USBD_Resume+0x28>)
 80056c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ca:	bf00      	nop
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056fb 	.word	0x080056fb
 80056d4:	08005705 	.word	0x08005705
 80056d8:	08005723 	.word	0x08005723
    {
        case RESUME_EXTERNAL:
            if (RemoteWakeupOn == 0)
 80056dc:	4b22      	ldr	r3, [pc, #136]	; (8005768 <USBD_Resume+0xc4>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <USBD_Resume+0x4e>
            {
                ResumeMCU();
 80056e6:	f7ff ff79 	bl	80055dc <ResumeMCU>
                State = RESUME_OFF;
 80056ea:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <USBD_Resume+0xc0>)
 80056ec:	2204      	movs	r2, #4
 80056ee:	701a      	strb	r2, [r3, #0]
            else
            {
                /* If resume is detected during the RemoteWakeup signalling, need keep RemoteWakeup handling */
                State = RESUME_ON;
            }
            break;
 80056f0:	e034      	b.n	800575c <USBD_Resume+0xb8>
                State = RESUME_OFF;
            }
            else
            {
                /* If resume is detected during the RemoteWakeup signalling, need keep RemoteWakeup handling */
                State = RESUME_ON;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <USBD_Resume+0xc0>)
 80056f4:	2203      	movs	r2, #3
 80056f6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80056f8:	e030      	b.n	800575c <USBD_Resume+0xb8>

        case RESUME_INTERNAL:
            ResumeMCU();
 80056fa:	f7ff ff6f 	bl	80055dc <ResumeMCU>
            RemoteWakeupOn = 1;
 80056fe:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <USBD_Resume+0xc4>)
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]

        case RESUME_LATER:
            ESOFcount = 15;
 8005704:	4b19      	ldr	r3, [pc, #100]	; (800576c <USBD_Resume+0xc8>)
 8005706:	220f      	movs	r2, #15
 8005708:	701a      	strb	r2, [r3, #0]
            _SetCTLR(_GetCTLR() | CTLR_RSREQ);
 800570a:	4a19      	ldr	r2, [pc, #100]	; (8005770 <USBD_Resume+0xcc>)
 800570c:	4b18      	ldr	r3, [pc, #96]	; (8005770 <USBD_Resume+0xcc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f043 0310 	orr.w	r3, r3, #16
 8005716:	b29b      	uxth	r3, r3
 8005718:	6013      	str	r3, [r2, #0]
            State = RESUME_ON;
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <USBD_Resume+0xc0>)
 800571c:	2203      	movs	r2, #3
 800571e:	701a      	strb	r2, [r3, #0]
            break;
 8005720:	e01c      	b.n	800575c <USBD_Resume+0xb8>

        case RESUME_ON:
            ESOFcount--;
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <USBD_Resume+0xc8>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b2da      	uxtb	r2, r3
 800572c:	4b0f      	ldr	r3, [pc, #60]	; (800576c <USBD_Resume+0xc8>)
 800572e:	701a      	strb	r2, [r3, #0]
            if (ESOFcount == 0)
 8005730:	4b0e      	ldr	r3, [pc, #56]	; (800576c <USBD_Resume+0xc8>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <USBD_Resume+0xb6>
            {
                _SetCTLR(_GetCTLR() & (~CTLR_RSREQ));
 800573a:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <USBD_Resume+0xcc>)
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <USBD_Resume+0xcc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	6013      	str	r3, [r2, #0]
                State = RESUME_OFF;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <USBD_Resume+0xc0>)
 800574a:	2204      	movs	r2, #4
 800574c:	701a      	strb	r2, [r3, #0]
                RemoteWakeupOn = 0;
 800574e:	4b06      	ldr	r3, [pc, #24]	; (8005768 <USBD_Resume+0xc4>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
            }
            break;
 8005754:	e001      	b.n	800575a <USBD_Resume+0xb6>

        case RESUME_OFF:
        case RESUME_ESOF:
        default:
            break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <USBD_Resume+0xb8>
            {
                _SetCTLR(_GetCTLR() & (~CTLR_RSREQ));
                State = RESUME_OFF;
                RemoteWakeupOn = 0;
            }
            break;
 800575a:	bf00      	nop
        case RESUME_OFF:
        case RESUME_ESOF:
        default:
            break;
    }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200000f8 	.word	0x200000f8
 8005768:	2000013d 	.word	0x2000013d
 800576c:	2000013c 	.word	0x2000013c
 8005770:	40005c40 	.word	0x40005c40

08005774 <USBD_HID_Init>:
  * @param  pudev: pointer to usb device instance
  * @param  ConfigIndex: configuration index
  * @retval usb device operation status
  */
static uint8_t  USBD_HID_Init (void *pudev, uint8_t ConfigIndex)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
    USB_EP_BufConfig(pudev, HID_IN_EP, USB_SNG_BUFTYPE, HID_TX_ADDRESS);
 8005780:	23a0      	movs	r3, #160	; 0xa0
 8005782:	2200      	movs	r2, #0
 8005784:	2181      	movs	r1, #129	; 0x81
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fae2 	bl	8005d50 <USB_EP_BufConfig>

    /* Initialize Tx endpoint */
    USB_EP_Init(pudev,
 800578c:	2302      	movs	r3, #2
 800578e:	2203      	movs	r2, #3
 8005790:	2181      	movs	r1, #129	; 0x81
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fb5c 	bl	8005e50 <USB_EP_Init>
                HID_IN_EP,
                USB_EPTYPE_INT,
                HID_IN_PACKET);

    /* Initialize Rx endpoint */
    USB_EP_Init(pudev,
 8005798:	2302      	movs	r3, #2
 800579a:	2203      	movs	r2, #3
 800579c:	2101      	movs	r1, #1
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb56 	bl	8005e50 <USB_EP_Init>
                HID_OUT_EP,
                USB_EPTYPE_INT,
                HID_OUT_PACKET);

    return USBD_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop

080057b0 <USBD_HID_DeInit>:
  * @param  pudev: pointer to usb device instance
  * @param  ConfigIndex: Configuration index
  * @retval usb device operation status
  */
static uint8_t  USBD_HID_DeInit (void *pudev, uint8_t ConfigIndex)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
    /* Deinitialize HID endpoints */
    USB_EP_DeInit (pudev, HID_IN_EP);
 80057bc:	2181      	movs	r1, #129	; 0x81
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fd58 	bl	8006274 <USB_EP_DeInit>
    USB_EP_DeInit (pudev, HID_OUT_EP);
 80057c4:	2101      	movs	r1, #1
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fd54 	bl	8006274 <USB_EP_DeInit>

    return USBD_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop

080057d8 <USBD_HID_ClassReqHandle>:
  * @param  pudev: pointer to usb device instance
  * @param  req: device class-specific request
  * @retval usb device operation status
  */
static uint8_t  USBD_HID_ClassReqHandle (void *pudev, USB_DEVICE_REQ *req)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
    switch (req->bRequest)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	2b0a      	cmp	r3, #10
 80057ea:	d835      	bhi.n	8005858 <USBD_HID_ClassReqHandle+0x80>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <USBD_HID_ClassReqHandle+0x1c>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005865 	.word	0x08005865
 80057f8:	08005821 	.word	0x08005821
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	08005859 	.word	0x08005859
 8005804:	08005859 	.word	0x08005859
 8005808:	08005859 	.word	0x08005859
 800580c:	08005859 	.word	0x08005859
 8005810:	08005859 	.word	0x08005859
 8005814:	08005865 	.word	0x08005865
 8005818:	08005839 	.word	0x08005839
 800581c:	0800584b 	.word	0x0800584b
        case GET_REPORT:
            /* No use for this driver */
            break;

        case GET_IDLE:
            USB_CtlTx (pudev, (uint8_t *)&USBD_HID_IdleState, 1);
 8005820:	2201      	movs	r2, #1
 8005822:	4913      	ldr	r1, [pc, #76]	; (8005870 <USBD_HID_ClassReqHandle+0x98>)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 f957 	bl	8006ad8 <USB_CtlTx>
            break;
 800582a:	e01c      	b.n	8005866 <USBD_HID_ClassReqHandle+0x8e>

        case GET_PROTOCOL:
            USB_CtlTx (pudev, (uint8_t *)&USBD_HID_Protocol, 1);
 800582c:	2201      	movs	r2, #1
 800582e:	4911      	ldr	r1, [pc, #68]	; (8005874 <USBD_HID_ClassReqHandle+0x9c>)
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f001 f951 	bl	8006ad8 <USB_CtlTx>
            break;
 8005836:	e016      	b.n	8005866 <USBD_HID_ClassReqHandle+0x8e>
        case SET_REPORT:
            /* No use for this driver */
            break;

        case SET_IDLE:
            USBD_HID_IdleState = (uint8_t)(req->wValue >> 8);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	885b      	ldrh	r3, [r3, #2]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	b29b      	uxth	r3, r3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <USBD_HID_ClassReqHandle+0x98>)
 8005846:	601a      	str	r2, [r3, #0]
            break;
 8005848:	e00d      	b.n	8005866 <USBD_HID_ClassReqHandle+0x8e>

        case SET_PROTOCOL:
            USBD_HID_Protocol = (uint8_t)(req->wValue);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	885b      	ldrh	r3, [r3, #2]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	4b08      	ldr	r3, [pc, #32]	; (8005874 <USBD_HID_ClassReqHandle+0x9c>)
 8005854:	601a      	str	r2, [r3, #0]
            break;
 8005856:	e006      	b.n	8005866 <USBD_HID_ClassReqHandle+0x8e>

        default:
            USBD_EnumError (pudev, req);
 8005858:	6839      	ldr	r1, [r7, #0]
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fb5a 	bl	8004f14 <USBD_EnumError>
            return USBD_FAIL; 
 8005860:	2302      	movs	r3, #2
 8005862:	e001      	b.n	8005868 <USBD_HID_ClassReqHandle+0x90>
{
    switch (req->bRequest)
    {
        case GET_REPORT:
            /* No use for this driver */
            break;
 8005864:	bf00      	nop
        default:
            USBD_EnumError (pudev, req);
            return USBD_FAIL; 
    }

    return USBD_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000148 	.word	0x20000148
 8005874:	20000144 	.word	0x20000144

08005878 <USBD_HID_GetClassDescriptor>:
  * @param  pudev: pointer to usb device instance
  * @param  req: device request
  * @retval usb device operation status
  */
static uint8_t  USBD_HID_GetClassDescriptor (void *pudev, USB_DEVICE_REQ *req)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
    uint16_t len = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	81fb      	strh	r3, [r7, #14]
    uint8_t  *pbuf = NULL;
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]

    switch(req->wValue >> 8)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	885b      	ldrh	r3, [r3, #2]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b21      	cmp	r3, #33	; 0x21
 8005894:	d00b      	beq.n	80058ae <USBD_HID_GetClassDescriptor+0x36>
 8005896:	2b22      	cmp	r3, #34	; 0x22
 8005898:	d000      	beq.n	800589c <USBD_HID_GetClassDescriptor+0x24>
            len = MIN(USB_HID_DESC_SIZE, req->wLength);
            pbuf = (uint8_t *)USBD_HID_CfgDesc + 0x12;
            break;

        default:
            break;
 800589a:	e011      	b.n	80058c0 <USBD_HID_GetClassDescriptor+0x48>
    uint8_t  *pbuf = NULL;

    switch(req->wValue >> 8)
    {
        case HID_REPORT_DESCTYPE:
            len = MIN(USB_HID_REPORT_DESC_SIZE, req->wLength);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	88db      	ldrh	r3, [r3, #6]
 80058a0:	2b15      	cmp	r3, #21
 80058a2:	bf28      	it	cs
 80058a4:	2315      	movcs	r3, #21
 80058a6:	81fb      	strh	r3, [r7, #14]
            pbuf = (uint8_t *)HID_ReportDesc;
 80058a8:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <USBD_HID_GetClassDescriptor+0x60>)
 80058aa:	60bb      	str	r3, [r7, #8]
            break;
 80058ac:	e008      	b.n	80058c0 <USBD_HID_GetClassDescriptor+0x48>

        case HID_DESC_TYPE:
            len = MIN(USB_HID_DESC_SIZE, req->wLength);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	88db      	ldrh	r3, [r3, #6]
 80058b2:	2b09      	cmp	r3, #9
 80058b4:	bf28      	it	cs
 80058b6:	2309      	movcs	r3, #9
 80058b8:	81fb      	strh	r3, [r7, #14]
            pbuf = (uint8_t *)USBD_HID_CfgDesc + 0x12;
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <USBD_HID_GetClassDescriptor+0x64>)
 80058bc:	60bb      	str	r3, [r7, #8]
            break;
 80058be:	bf00      	nop

        default:
            break;
    }

    USB_CtlTx (pudev, pbuf, len);
 80058c0:	89fb      	ldrh	r3, [r7, #14]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 f906 	bl	8006ad8 <USB_CtlTx>

    return USBD_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	08007548 	.word	0x08007548
 80058dc:	08007536 	.word	0x08007536

080058e0 <USBD_HID_GetInterface>:
  * @param  pudev: usb device instance
  * @param  req: standard device request
  * @retval usb device operation status
  */
static uint8_t  USBD_HID_GetInterface (void *pudev, USB_DEVICE_REQ *req)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
    USB_CtlTx (pudev, (uint8_t *)&USBD_HID_AltSet, 1);
 80058ea:	2201      	movs	r2, #1
 80058ec:	4904      	ldr	r1, [pc, #16]	; (8005900 <USBD_HID_GetInterface+0x20>)
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f001 f8f2 	bl	8006ad8 <USB_CtlTx>

    return USBD_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000140 	.word	0x20000140

08005904 <USBD_HID_SetInterface>:
  * @param  pudev: pointer to device instance
  * @param  req: standard device request
  * @retval usb device operation status
  */
static uint8_t  USBD_HID_SetInterface (void *pudev, USB_DEVICE_REQ *req)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
    USBD_HID_AltSet = (uint8_t)(req->wValue);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	885b      	ldrh	r3, [r3, #2]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <USBD_HID_SetInterface+0x24>)
 8005918:	601a      	str	r2, [r3, #0]

    return USBD_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20000140 	.word	0x20000140

0800592c <USBD_HID_SendReport>:
  * @retval usb device operation status
  */
uint8_t  USBD_HID_SendReport (USB_DEVICE_HANDLE *pudev,
                                       uint8_t *report,
                                       uint16_t Len)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
    /* Check if USB is configured */
    if (pudev->dev.device_cur_status == USB_STATUS_CONFIGURED)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	78db      	ldrb	r3, [r3, #3]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d105      	bne.n	800594e <USBD_HID_SendReport+0x22>
    {
        USB_EP_Tx (pudev, HID_IN_EP, report, Len);
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	2181      	movs	r1, #129	; 0x81
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 feb5 	bl	80066b8 <USB_EP_Tx>
    }

    return USBD_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_HID_GetCfgDesc>:
  * @param  USBSpeed: current device speed
  * @param  len: pointer to data length
  * @retval Pointer to descriptor buffer
  */
static uint8_t*  USBD_HID_GetCfgDesc (uint8_t USBSpeed, uint16_t *len)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	6039      	str	r1, [r7, #0]
 8005962:	71fb      	strb	r3, [r7, #7]
    *len = sizeof (USBD_HID_CfgDesc);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2222      	movs	r2, #34	; 0x22
 8005968:	801a      	strh	r2, [r3, #0]

    return (uint8_t *)USBD_HID_CfgDesc;
 800596a:	4b03      	ldr	r3, [pc, #12]	; (8005978 <USBD_HID_GetCfgDesc+0x20>)
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	08007524 	.word	0x08007524

0800597c <PWR_DeInit>:
  * @brief  Reset the PWR peripheral registers.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
    RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_PWRRST, ENABLE);
 8005980:	2101      	movs	r1, #1
 8005982:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005986:	f7fb ff85 	bl	8001894 <RCC_APB1PeriphReset_Enable>
    RCC_APB1PeriphReset_Enable(RCC_APB1PERIPH_PWRRST, DISABLE);
 800598a:	2100      	movs	r1, #0
 800598c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005990:	f7fb ff80 	bl	8001894 <RCC_APB1PeriphReset_Enable>
}
 8005994:	bf00      	nop
 8005996:	bd80      	pop	{r7, pc}

08005998 <PWR_BackupAccess_Enable>:
  * @param  NewValue: New value of write access state to the registers in Backup domain.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccess_Enable(TypeState NewValue)
{ 
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
    if (NewValue != DISABLE)
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <PWR_BackupAccess_Enable+0x1e>
    {
        /* Enable the Backup Domain Access */
        PWR->CTLR |= PWR_CTLR_BKPWE;
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <PWR_BackupAccess_Enable+0x34>)
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <PWR_BackupAccess_Enable+0x34>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b2:	6013      	str	r3, [r2, #0]
    else
    {
        /* Disable the Backup Domain Access */
        PWR->CTLR &= ~((uint32_t)PWR_CTLR_BKPWE);
    } 
}
 80059b4:	e005      	b.n	80059c2 <PWR_BackupAccess_Enable+0x2a>
        PWR->CTLR |= PWR_CTLR_BKPWE;
    }
    else
    {
        /* Disable the Backup Domain Access */
        PWR->CTLR &= ~((uint32_t)PWR_CTLR_BKPWE);
 80059b6:	4a05      	ldr	r2, [pc, #20]	; (80059cc <PWR_BackupAccess_Enable+0x34>)
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <PWR_BackupAccess_Enable+0x34>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c0:	6013      	str	r3, [r2, #0]
    } 
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr
 80059cc:	40007000 	.word	0x40007000

080059d0 <PWR_LVDConfig>:
  * @param  NewValue: New value of the LVD state.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_LVDConfig(uint32_t PWR_LVDT, TypeState NewValue)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
    uint32_t temp = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
    
    temp = PWR->CTLR;
 80059e0:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <PWR_LVDConfig+0x58>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
    
    /* Clear LVDT[7:5] bits */
    temp &= ~((uint32_t)PWR_CTLR_LVDT);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80059ec:	60fb      	str	r3, [r7, #12]
    
    /* Set LVDT[7:5] bits according to PWR_LVDT value */
    temp |= PWR_LVDT;
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new value */
    PWR->CTLR = temp;
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <PWR_LVDConfig+0x58>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6013      	str	r3, [r2, #0]
    
    /* Enable or disable the LVD */
    if (NewValue != DISABLE)
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d006      	beq.n	8005a10 <PWR_LVDConfig+0x40>
    {
        /* Enable the LVD */
        PWR->CTLR |= PWR_CTLR_LVDE;
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <PWR_LVDConfig+0x58>)
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <PWR_LVDConfig+0x58>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f043 0310 	orr.w	r3, r3, #16
 8005a0c:	6013      	str	r3, [r2, #0]
    else
    {
        /* Disable the LVD */
        PWR->CTLR &= ~((uint32_t)PWR_CTLR_LVDE);
    }
}
 8005a0e:	e005      	b.n	8005a1c <PWR_LVDConfig+0x4c>
        PWR->CTLR |= PWR_CTLR_LVDE;
    }
    else
    {
        /* Disable the LVD */
        PWR->CTLR &= ~((uint32_t)PWR_CTLR_LVDE);
 8005a10:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <PWR_LVDConfig+0x58>)
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <PWR_LVDConfig+0x58>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 0310 	bic.w	r3, r3, #16
 8005a1a:	6013      	str	r3, [r2, #0]
    }
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40007000 	.word	0x40007000

08005a2c <PWR_WKUP_Pin_Enable>:
  * @param  NewValue: New value of the WKUP Pin state.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WKUP_Pin_Enable(TypeState NewValue)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
    if (NewValue != DISABLE)
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d006      	beq.n	8005a4a <PWR_WKUP_Pin_Enable+0x1e>
    {
        /* Enable the WKUP pin */
        PWR->STR |= PWR_STR_WUPE;
 8005a3c:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <PWR_WKUP_Pin_Enable+0x34>)
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <PWR_WKUP_Pin_Enable+0x34>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a46:	6053      	str	r3, [r2, #4]
    else
    {
        /* Disable the WKUP pin */
        PWR->STR &= ~PWR_STR_WUPE;
    }
}
 8005a48:	e005      	b.n	8005a56 <PWR_WKUP_Pin_Enable+0x2a>
        PWR->STR |= PWR_STR_WUPE;
    }
    else
    {
        /* Disable the WKUP pin */
        PWR->STR &= ~PWR_STR_WUPE;
 8005a4a:	4a05      	ldr	r2, [pc, #20]	; (8005a60 <PWR_WKUP_Pin_Enable+0x34>)
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <PWR_WKUP_Pin_Enable+0x34>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a54:	6053      	str	r3, [r2, #4]
    }
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	40007000 	.word	0x40007000

08005a64 <PWR_SLEEPMode_Entry>:
  *     @arg PWR_SLEEPENTRY_WFI: enter Sleep mode with WFI instruction
  *     @arg PWR_SLEEPENTRY_WFE: enter Sleep mode with WFE instruction
  * @retval None
  */
void PWR_SLEEPMode_Entry(uint8_t PWR_SLEEPENTRY)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
    /* Clear SLEEPDEEP bit of Cortex-M3 System Control Register */
    SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <PWR_SLEEPMode_Entry+0x2c>)
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <PWR_SLEEPMode_Entry+0x2c>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f023 0304 	bic.w	r3, r3, #4
 8005a78:	6113      	str	r3, [r2, #16]
    
    /* Select WFI or WFE to enter Sleep mode */
    if(PWR_SLEEPENTRY == PWR_SLEEPENTRY_WFI)
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <PWR_SLEEPMode_Entry+0x20>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8005a80:	bf30      	wfi
    }
    else
    {
        __WFE();
    }
}
 8005a82:	e000      	b.n	8005a86 <PWR_SLEEPMode_Entry+0x22>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8005a84:	bf20      	wfe
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <PWR_DEEPSLEEPMode_Entry>:
  *     @arg PWR_DEEPSLEEPENTRY_WFI: enter Deep-sleep mode with WFI instruction
  *     @arg PWR_DEEPSLEEPENTRY_WFE: enter Deep-sleep mode with WFE instruction
  * @retval None
  */
void PWR_DEEPSLEEPMode_Entry(uint32_t PWR_LDO, uint8_t PWR_DEEPSLEEPENTRY)
{ 
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
    uint32_t temp = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
    
    /* Select the LDO state in Deep-sleep mode */
    temp = PWR->CTLR;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <PWR_DEEPSLEEPMode_Entry+0x60>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDBM and LDOLP bits, and select Deep-sleep mode */
    temp &= ~((uint32_t)(PWR_CTLR_SDBM | PWR_CTLR_LDOLP));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f023 0303 	bic.w	r3, r3, #3
 8005ab0:	60fb      	str	r3, [r7, #12]
    
    /* Set LDOLP bit according to PWR_LDO value, and select the LDO's state */
    temp |= PWR_LDO;
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
    
    /* Store the new value */
    PWR->CTLR = temp;
 8005aba:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <PWR_DEEPSLEEPMode_Entry+0x60>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6013      	str	r3, [r2, #0]
    
    /* Set SLEEPDEEP bit of Cortex-M3 System Control Register */
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8005ac0:	4a0d      	ldr	r2, [pc, #52]	; (8005af8 <PWR_DEEPSLEEPMode_Entry+0x64>)
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <PWR_DEEPSLEEPMode_Entry+0x64>)
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f043 0304 	orr.w	r3, r3, #4
 8005aca:	6113      	str	r3, [r2, #16]
    
    /* Select WFI or WFE to enter Deep-sleep mode */
    if(PWR_DEEPSLEEPENTRY == PWR_DEEPSLEEPENTRY_WFI)
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <PWR_DEEPSLEEPMode_Entry+0x42>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8005ad2:	bf30      	wfi
 8005ad4:	e002      	b.n	8005adc <PWR_DEEPSLEEPMode_Entry+0x48>

    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8005ad6:	bf40      	sev
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8005ad8:	bf20      	wfe
 8005ada:	bf20      	wfe
        __SEV();
        __WFE();
        __WFE();
    }
    /* Reset SLEEPDEEP bit of Cortex-M3 System Control Register */
    SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8005adc:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <PWR_DEEPSLEEPMode_Entry+0x64>)
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <PWR_DEEPSLEEPMode_Entry+0x64>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f023 0304 	bic.w	r3, r3, #4
 8005ae6:	6113      	str	r3, [r2, #16]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40007000 	.word	0x40007000
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <PWR_STDBYMode_Entry>:
  *     @arg PWR_STDBYENTRY_WFI: enter Standby mode with WFI instruction
  *     @arg PWR_STDBYENTRY_WFE: enter Standby mode with WFE instruction
  * @retval None
  */
void PWR_STDBYMode_Entry(uint8_t PWR_STDBYENTRY)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
    /* Set SLEEPDEEP bit of Cortex-M3 System Control Register */
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8005b06:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <PWR_STDBYMode_Entry+0x44>)
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <PWR_STDBYMode_Entry+0x44>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f043 0304 	orr.w	r3, r3, #4
 8005b10:	6113      	str	r3, [r2, #16]

    /* Set SDBM bit, and select Standby mode */
    PWR->CTLR |= PWR_CTLR_SDBM;
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <PWR_STDBYMode_Entry+0x48>)
 8005b14:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <PWR_STDBYMode_Entry+0x48>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f043 0302 	orr.w	r3, r3, #2
 8005b1c:	6013      	str	r3, [r2, #0]
        
    /* Reset Wakeup flag */
    PWR->CTLR |= PWR_CTLR_WUFR;
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <PWR_STDBYMode_Entry+0x48>)
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <PWR_STDBYMode_Entry+0x48>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f043 0304 	orr.w	r3, r3, #4
 8005b28:	6013      	str	r3, [r2, #0]
    
    /* Select WFI or WFE to enter Standby mode */
    if(PWR_STDBYENTRY == PWR_STDBYENTRY_WFI)
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <PWR_STDBYMode_Entry+0x38>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8005b30:	bf30      	wfi
    }
    else
    {
        __WFE();
    }
}
 8005b32:	e000      	b.n	8005b36 <PWR_STDBYMode_Entry+0x3a>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8005b34:	bf20      	wfe
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	40007000 	.word	0x40007000

08005b48 <PWR_GetBitState>:
  *     @arg PWR_FLAG_LVDF: LVD State flag. This flag is valid only if LVD 
  *          is enabled by the PWR_LVD_Config()function.
  * @retval The new value of PWR_FLAG (SET or RESET).
  */
TypeState PWR_GetBitState(uint32_t PWR_FLAG)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
    /* Check and get the selected PWR flag */
    if ((PWR->STR & PWR_FLAG) != (uint32_t)RESET)
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <PWR_GetBitState+0x24>)
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <PWR_GetBitState+0x18>
    {
        /* PWR_FLAG bit is SET */
        return SET;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <PWR_GetBitState+0x1a>
    }
    else 
    {
        /* PWR_FLAG bit is RESET */
        return RESET;
 8005b60:	2300      	movs	r3, #0
    }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	40007000 	.word	0x40007000

08005b70 <PWR_ClearBitState>:
  *     @arg PWR_FLAG_WKUP: Wake_Up flag
  *     @arg PWR_FLAG_STB: StandBy flag
  * @retval None
  */
void PWR_ClearBitState(uint32_t PWR_FLAG)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
    /* Clear the selected PWR flag */
    PWR->CTLR |=  PWR_FLAG << BIT_SHIFT;
 8005b78:	4905      	ldr	r1, [pc, #20]	; (8005b90 <PWR_ClearBitState+0x20>)
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <PWR_ClearBitState+0x20>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr
 8005b90:	40007000 	.word	0x40007000

08005b94 <FreeUserBuffer>:
  * @param  EpID: endpoint identifier which is in (0..7)
  * @param  Dir: endpoint direction which can be OUT(0) or IN(1)
  * @retval None
  */
void  FreeUserBuffer (uint8_t EpID, uint8_t Dir)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	460a      	mov	r2, r1
 8005b9e:	71fb      	strb	r3, [r7, #7]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71bb      	strb	r3, [r7, #6]
    if (Dir == DBUF_EP_OUT)
 8005ba4:	79bb      	ldrb	r3, [r7, #6]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d115      	bne.n	8005bd6 <FreeUserBuffer+0x42>
    {
        _ToggleSWBUF_RX(EpID);
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bb2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005bb6:	79fa      	ldrb	r2, [r7, #7]
 8005bb8:	0092      	lsls	r2, r2, #2
 8005bba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005bbe:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8005bcc:	400a      	ands	r2, r1
 8005bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd2:	601a      	str	r2, [r3, #0]
    }
    else if (Dir == DBUF_EP_IN)
    {
        _ToggleSWBUF_TX(EpID);
    }
}
 8005bd4:	e017      	b.n	8005c06 <FreeUserBuffer+0x72>
{
    if (Dir == DBUF_EP_OUT)
    {
        _ToggleSWBUF_RX(EpID);
    }
    else if (Dir == DBUF_EP_IN)
 8005bd6:	79bb      	ldrb	r3, [r7, #6]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d114      	bne.n	8005c06 <FreeUserBuffer+0x72>
    {
        _ToggleSWBUF_TX(EpID);
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005be4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005be8:	79fa      	ldrb	r2, [r7, #7]
 8005bea:	0092      	lsls	r2, r2, #2
 8005bec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005bf0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8005bfe:	400a      	ands	r2, r1
 8005c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c04:	601a      	str	r2, [r3, #0]
    }
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <UserCopyToBuffer>:
  * @param  BufAddr: the allocation buffer address
  * @param  Bytes: byte count
  * @retval None
  */
void  UserCopyToBuffer (uint8_t *UsrBuf, uint16_t BufAddr, uint16_t Bytes)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	803b      	strh	r3, [r7, #0]
    uint32_t n = (Bytes + 1) >> 1;
 8005c20:	883b      	ldrh	r3, [r7, #0]
 8005c22:	3301      	adds	r3, #1
 8005c24:	105b      	asrs	r3, r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
    uint32_t i, temp;
    uint16_t *BaseAddr = (uint16_t *)(BufAddr * 2 + PBA_ADDR);
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005c2e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	613b      	str	r3, [r7, #16]

    for (i = n; i != 0; i--)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e01b      	b.n	8005c74 <UserCopyToBuffer+0x64>
    {
        temp = (uint16_t) * UsrBuf;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	60bb      	str	r3, [r7, #8]
        UsrBuf++;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3301      	adds	r3, #1
 8005c46:	607b      	str	r3, [r7, #4]
        *BaseAddr++ = temp | (uint16_t) * UsrBuf << 8;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	613a      	str	r2, [r7, #16]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	7812      	ldrb	r2, [r2, #0]
 8005c52:	b292      	uxth	r2, r2
 8005c54:	0212      	lsls	r2, r2, #8
 8005c56:	b291      	uxth	r1, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	801a      	strh	r2, [r3, #0]
        BaseAddr++;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	3302      	adds	r3, #2
 8005c66:	613b      	str	r3, [r7, #16]
        UsrBuf++;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	607b      	str	r3, [r7, #4]
{
    uint32_t n = (Bytes + 1) >> 1;
    uint32_t i, temp;
    uint16_t *BaseAddr = (uint16_t *)(BufAddr * 2 + PBA_ADDR);

    for (i = n; i != 0; i--)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e0      	bne.n	8005c3c <UserCopyToBuffer+0x2c>
        UsrBuf++;
        *BaseAddr++ = temp | (uint16_t) * UsrBuf << 8;
        BaseAddr++;
        UsrBuf++;
    }
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bc80      	pop	{r7}
 8005c82:	4770      	bx	lr

08005c84 <BufferCopyToUser>:
  * @param  BufAddr: the allocation buffer address
  * @param  Bytes: byte count
  * @retval None
  */
void  BufferCopyToUser (uint8_t *UsrBuf, uint16_t BufAddr, uint16_t Bytes)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	807b      	strh	r3, [r7, #2]
 8005c90:	4613      	mov	r3, r2
 8005c92:	803b      	strh	r3, [r7, #0]
    uint32_t n = (Bytes + 1) >> 1;
 8005c94:	883b      	ldrh	r3, [r7, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	105b      	asrs	r3, r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
    uint32_t i;
    uint32_t *BaseAddr = (uint32_t *)(BufAddr * 2 + PBA_ADDR);
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005ca2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	613b      	str	r3, [r7, #16]

    for (i = n; i != 0; i--)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e00e      	b.n	8005cce <BufferCopyToUser+0x4a>
    {
        *(uint16_t*)UsrBuf++ = *BaseAddr++;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	1d11      	adds	r1, r2, #4
 8005cba:	6139      	str	r1, [r7, #16]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	801a      	strh	r2, [r3, #0]
        UsrBuf++;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	607b      	str	r3, [r7, #4]
{
    uint32_t n = (Bytes + 1) >> 1;
    uint32_t i;
    uint32_t *BaseAddr = (uint32_t *)(BufAddr * 2 + PBA_ADDR);

    for (i = n; i != 0; i--)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ed      	bne.n	8005cb0 <BufferCopyToUser+0x2c>
    {
        *(uint16_t*)UsrBuf++ = *BaseAddr++;
        UsrBuf++;
    }
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <DR_Init>:
  * @brief  Device register initialization
  * @param  None
  * @retval None
  */
void  DR_Init (void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
    /* Just reset the CLOSE bit */
    _SetCTLR(CTLR_SETRST);
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <DR_Init+0x38>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

    /* May be need wait some time(tSTARTUP) ... */

    /* Clear SETRST bit in CTLR register */
    _SetCTLR(0);
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <DR_Init+0x38>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

    /* Clear all pending interrupts */
    _SetIFR(0);
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <DR_Init+0x3c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

    /* Set allocation buffer address */
    _SetBAR(BUFFER_ADDRESS);
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <DR_Init+0x40>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

    InterruptMask = IER_MASK;
 8005cfc:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <DR_Init+0x44>)
 8005cfe:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005d02:	601a      	str	r2, [r3, #0]

    /* Enable all interrupts mask bits */
    _SetCTLR(InterruptMask); 
 8005d04:	4b04      	ldr	r3, [pc, #16]	; (8005d18 <DR_Init+0x38>)
 8005d06:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <DR_Init+0x44>)
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	601a      	str	r2, [r3, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40005c40 	.word	0x40005c40
 8005d1c:	40005c44 	.word	0x40005c44
 8005d20:	40005c50 	.word	0x40005c50
 8005d24:	2000014c 	.word	0x2000014c

08005d28 <DR_StopDevice>:
  * @brief  Device register configure when stop device
  * @param  None
  * @retval None
  */
void  DR_StopDevice (void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
    /* Disable all interrupts and set USB reset */
    _SetCTLR(CTLR_SETRST);
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <DR_StopDevice+0x20>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

    /* Clear all interrupt flags */
    _SetIFR(0);
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <DR_StopDevice+0x24>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

    /* Close device */
    _SetCTLR(CTLR_SETRST | CTLR_CLOSE);  
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <DR_StopDevice+0x20>)
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40005c40 	.word	0x40005c40
 8005d4c:	40005c44 	.word	0x40005c44

08005d50 <USB_EP_BufConfig>:
void  USB_EP_BufConfig (USB_CORE_HANDLE *pudev,
                                uint8_t EpAddr,
                                uint8_t EpKind,
                                uint32_t BufAddr)

{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	72fb      	strb	r3, [r7, #11]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	72bb      	strb	r3, [r7, #10]
    USB_EP *ep;
    uint8_t EpID = EpAddr & 0x7F;
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d68:	74fb      	strb	r3, [r7, #19]

    if (EpAddr >> 7)
 8005d6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da09      	bge.n	8005d86 <USB_EP_BufConfig+0x36>
    {
        /* Get an IN endpoint */
        ep = &pudev->dev.in_ep[EpID];
 8005d72:	7cfa      	ldrb	r2, [r7, #19]
 8005d74:	4613      	mov	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	4413      	add	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e008      	b.n	8005d98 <USB_EP_BufConfig+0x48>
    }
    else
    {
        /* Get a OUT endpoint */
        ep = &pudev->dev.out_ep[EpID];
 8005d86:	7cfa      	ldrb	r2, [r7, #19]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	3340      	adds	r3, #64	; 0x40
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
    }

    if (EpKind == USB_SNG_BUFTYPE)
 8005d98:	7abb      	ldrb	r3, [r7, #10]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <USB_EP_BufConfig+0x5e>
    {
        /* Endpoint is single buffer kind */
        ep->is_dblbuf = 0;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2200      	movs	r2, #0
 8005da2:	705a      	strb	r2, [r3, #1]

        /* Configure the buffer address */
        ep->bufaddress = (uint16_t)BufAddr;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	805a      	strh	r2, [r3, #2]
        _SetEPDoubleBuff(EpID);

        /* Set buffer address for double buffered endpoint */
        _SetEPDblBufAddr(EpID, ep->buf0addr, ep->buf1addr);
    }
}
 8005dac:	e047      	b.n	8005e3e <USB_EP_BufConfig+0xee>
        ep->is_dblbuf = 0;

        /* Configure the buffer address */
        ep->bufaddress = (uint16_t)BufAddr;
    }
    else if(EpKind == USB_DBL_BUFTYPE)
 8005dae:	7abb      	ldrb	r3, [r7, #10]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d144      	bne.n	8005e3e <USB_EP_BufConfig+0xee>
    {
        /* Endpoint is double buffer kind */
        ep->is_dblbuf = 1;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2201      	movs	r2, #1
 8005db8:	705a      	strb	r2, [r3, #1]

        /* Get the buffer0 and buffer1 address */
        ep->buf0addr = BufAddr & 0xFFFF;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	809a      	strh	r2, [r3, #4]
        ep->buf1addr = (BufAddr & 0xFFFF0000) >> 16;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0c1b      	lsrs	r3, r3, #16
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	80da      	strh	r2, [r3, #6]

        /* Set the endpoint kind as double buffer */
        _SetEPDoubleBuff(EpID);
 8005dcc:	7cfb      	ldrb	r3, [r7, #19]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dd4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005dd8:	7cfa      	ldrb	r2, [r7, #19]
 8005dda:	0092      	lsls	r2, r2, #2
 8005ddc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005de0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	b292      	uxth	r2, r2
 8005de8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005dec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005df0:	b292      	uxth	r2, r2
 8005df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df6:	b292      	uxth	r2, r2
 8005df8:	601a      	str	r2, [r3, #0]

        /* Set buffer address for double buffered endpoint */
        _SetEPDblBufAddr(EpID, ep->buf0addr, ep->buf1addr);
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <USB_EP_BufConfig+0xf8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e0c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	461a      	mov	r2, r3
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	889b      	ldrh	r3, [r3, #4]
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <USB_EP_BufConfig+0xf8>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	7cfb      	ldrb	r3, [r7, #19]
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	441a      	add	r2, r3
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <USB_EP_BufConfig+0xfc>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	461a      	mov	r2, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	88db      	ldrh	r3, [r3, #6]
 8005e38:	f023 0301 	bic.w	r3, r3, #1
 8005e3c:	6013      	str	r3, [r2, #0]
    }
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr
 8005e48:	40005c50 	.word	0x40005c50
 8005e4c:	20003004 	.word	0x20003004

08005e50 <USB_EP_Init>:
  */
void  USB_EP_Init (USB_CORE_HANDLE *pudev,
                          uint8_t EpAddr,
                          uint8_t EpType,
                          uint16_t EpMps)
{
 8005e50:	b490      	push	{r4, r7}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	70fb      	strb	r3, [r7, #3]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70bb      	strb	r3, [r7, #2]
 8005e66:	4613      	mov	r3, r2
 8005e68:	803b      	strh	r3, [r7, #0]
    USB_EP *ep;
    uint8_t EpID = EpAddr & 0x7F;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	72fb      	strb	r3, [r7, #11]

    /* Set the endpoint type */
    switch (EpType)
 8005e72:	78bb      	ldrb	r3, [r7, #2]
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d86a      	bhi.n	8005f4e <USB_EP_Init+0xfe>
 8005e78:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <USB_EP_Init+0x30>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005e91 	.word	0x08005e91
 8005e84:	08005f1d 	.word	0x08005f1d
 8005e88:	08005ec3 	.word	0x08005ec3
 8005e8c:	08005eeb 	.word	0x08005eeb
    {
        case USB_EPTYPE_CONTROL:
            _SetEPType(EpID, EP_CONTROL);
 8005e90:	7afb      	ldrb	r3, [r7, #11]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e98:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005e9c:	7afa      	ldrb	r2, [r7, #11]
 8005e9e:	0092      	lsls	r2, r2, #2
 8005ea0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ea4:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	b212      	sxth	r2, r2
 8005eac:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8005eb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005eb4:	b212      	sxth	r2, r2
 8005eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eba:	b212      	sxth	r2, r2
 8005ebc:	b292      	uxth	r2, r2
 8005ebe:	601a      	str	r2, [r3, #0]
            break;
 8005ec0:	e045      	b.n	8005f4e <USB_EP_Init+0xfe>

        case USB_EPTYPE_BULK:
            _SetEPType(EpID, EP_BULK);
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005eca:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005ece:	7afa      	ldrb	r2, [r7, #11]
 8005ed0:	0092      	lsls	r2, r2, #2
 8005ed2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005ed6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	b292      	uxth	r2, r2
 8005ede:	4611      	mov	r1, r2
 8005ee0:	f648 128f 	movw	r2, #35215	; 0x898f
 8005ee4:	400a      	ands	r2, r1
 8005ee6:	601a      	str	r2, [r3, #0]
            break;
 8005ee8:	e031      	b.n	8005f4e <USB_EP_Init+0xfe>

        case USB_EPTYPE_INT:
            _SetEPType(EpID, EP_INTERRUPT);
 8005eea:	7afb      	ldrb	r3, [r7, #11]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ef2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005ef6:	7afa      	ldrb	r2, [r7, #11]
 8005ef8:	0092      	lsls	r2, r2, #2
 8005efa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005efe:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	b212      	sxth	r2, r2
 8005f06:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8005f0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f0e:	b212      	sxth	r2, r2
 8005f10:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8005f14:	b212      	sxth	r2, r2
 8005f16:	b292      	uxth	r2, r2
 8005f18:	601a      	str	r2, [r3, #0]
            break;
 8005f1a:	e018      	b.n	8005f4e <USB_EP_Init+0xfe>

        case USB_EPTYPE_ISOC:
            _SetEPType(EpID, EP_ISO);
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f24:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005f28:	7afa      	ldrb	r2, [r7, #11]
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f30:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	b212      	sxth	r2, r2
 8005f38:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8005f3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005f40:	b212      	sxth	r2, r2
 8005f42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f46:	b212      	sxth	r2, r2
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	601a      	str	r2, [r3, #0]
            break;
 8005f4c:	bf00      	nop
    }

    if (EpAddr >> 7)
 8005f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f280 80bf 	bge.w	80060d6 <USB_EP_Init+0x286>
    {
        ep = &pudev->dev.in_ep[EpID];
 8005f58:	7afa      	ldrb	r2, [r7, #11]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	4413      	add	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	3310      	adds	r3, #16
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

        /* Initialize the transmit endpoint data toggle bit */
        _ClearDTG_TX(EpID);
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d014      	beq.n	8005fac <USB_EP_Init+0x15c>
 8005f82:	7afb      	ldrb	r3, [r7, #11]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f8a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005f8e:	7afa      	ldrb	r2, [r7, #11]
 8005f90:	0092      	lsls	r2, r2, #2
 8005f92:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f96:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8005fa4:	400a      	ands	r2, r1
 8005fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005faa:	601a      	str	r2, [r3, #0]

        if(ep->is_dblbuf == 0)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d142      	bne.n	800603a <USB_EP_Init+0x1ea>
        {
            /* Set the endpoint transmit buffer address */
            _SetEPTxAddr(EpID, ep->bufaddress);
 8005fb4:	4bad      	ldr	r3, [pc, #692]	; (800626c <USB_EP_Init+0x41c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005fc6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	885b      	ldrh	r3, [r3, #2]
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6013      	str	r3, [r2, #0]

            /* Configure the endpoint status as NAK status */
            _SetEPTxStatus(EpID, EPTX_NAK);
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fe0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff0:	b29c      	uxth	r4, r3
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ffa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8005ffe:	f084 0220 	eor.w	r2, r4, #32
 8006002:	b292      	uxth	r2, r2
 8006004:	601a      	str	r2, [r3, #0]

            /* Control endpoint need toggle data toggle bit */
            if(EpID == 0) _ToggleDTG_TX(EpID);
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 811a 	bne.w	8006242 <USB_EP_Init+0x3f2>
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006016:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800601a:	7afa      	ldrb	r2, [r7, #11]
 800601c:	0092      	lsls	r2, r2, #2
 800601e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006022:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	b292      	uxth	r2, r2
 800602a:	4611      	mov	r1, r2
 800602c:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006030:	400a      	ands	r2, r1
 8006032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e103      	b.n	8006242 <USB_EP_Init+0x3f2>
        }
        else
        {
            /* Clear another direction data toggle bit when use double buffer */
            _ClearDTG_RX(EpID);
 800603a:	7afb      	ldrb	r3, [r7, #11]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006042:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d014      	beq.n	800607c <USB_EP_Init+0x22c>
 8006052:	7afb      	ldrb	r3, [r7, #11]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800605a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800605e:	7afa      	ldrb	r2, [r7, #11]
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006066:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	b292      	uxth	r2, r2
 800606e:	4611      	mov	r1, r2
 8006070:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006074:	400a      	ands	r2, r1
 8006076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800607a:	601a      	str	r2, [r3, #0]

            /* Configure the double buffer endpoint status */
            _SetEPRxStatus(EpID, EPRX_DISABLED);
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006084:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006094:	b29c      	uxth	r4, r3
 8006096:	7afb      	ldrb	r3, [r7, #11]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800609e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80060a2:	4622      	mov	r2, r4
 80060a4:	601a      	str	r2, [r3, #0]
            _SetEPTxStatus(EpID, EPTX_VALID);
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060ae:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060be:	b29c      	uxth	r4, r3
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060c8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80060cc:	f084 0230 	eor.w	r2, r4, #48	; 0x30
 80060d0:	b292      	uxth	r2, r2
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e0b5      	b.n	8006242 <USB_EP_Init+0x3f2>
        }
    }
    else
    {
        ep = &pudev->dev.out_ep[EpID];
 80060d6:	7afa      	ldrb	r2, [r7, #11]
 80060d8:	4613      	mov	r3, r2
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	3340      	adds	r3, #64	; 0x40
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4413      	add	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

        _ClearDTG_RX(EpID);
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060f0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d014      	beq.n	800612a <USB_EP_Init+0x2da>
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006108:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800610c:	7afa      	ldrb	r2, [r7, #11]
 800610e:	0092      	lsls	r2, r2, #2
 8006110:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006114:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	b292      	uxth	r2, r2
 800611c:	4611      	mov	r1, r2
 800611e:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006122:	400a      	ands	r2, r1
 8006124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006128:	601a      	str	r2, [r3, #0]

        if(ep->is_dblbuf == 0)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d127      	bne.n	8006182 <USB_EP_Init+0x332>
        {
            /*Set the endpoint receive buffer address */
            _SetEPRxAddr(EpID, ep->bufaddress);
 8006132:	4b4e      	ldr	r3, [pc, #312]	; (800626c <USB_EP_Init+0x41c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	7afb      	ldrb	r3, [r7, #11]
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	441a      	add	r2, r3
 8006140:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <USB_EP_Init+0x420>)
 8006142:	4413      	add	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	461a      	mov	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	885b      	ldrh	r3, [r3, #2]
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6013      	str	r3, [r2, #0]

            /* Configure the endpoint status as NAK */
            _SetEPRxStatus(EpID, EPRX_NAK);
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800615a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	b29c      	uxth	r4, r3
 800616c:	7afb      	ldrb	r3, [r7, #11]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006174:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006178:	f484 5200 	eor.w	r2, r4, #8192	; 0x2000
 800617c:	b292      	uxth	r2, r2
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e05f      	b.n	8006242 <USB_EP_Init+0x3f2>
        }
        else
        {
            _ClearDTG_TX(EpID);
 8006182:	7afb      	ldrb	r3, [r7, #11]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800618a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d014      	beq.n	80061c4 <USB_EP_Init+0x374>
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061a2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80061a6:	7afa      	ldrb	r2, [r7, #11]
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80061ae:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	b292      	uxth	r2, r2
 80061b6:	4611      	mov	r1, r2
 80061b8:	f648 728f 	movw	r2, #36751	; 0x8f8f
 80061bc:	400a      	ands	r2, r1
 80061be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c2:	601a      	str	r2, [r3, #0]

            /* Toggle the SW_BUF bit(TX data toggle bit) */
            _ToggleDTG_TX(EpID);
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061cc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80061d0:	7afa      	ldrb	r2, [r7, #11]
 80061d2:	0092      	lsls	r2, r2, #2
 80061d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80061d8:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	b292      	uxth	r2, r2
 80061e0:	4611      	mov	r1, r2
 80061e2:	f648 728f 	movw	r2, #36751	; 0x8f8f
 80061e6:	400a      	ands	r2, r1
 80061e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ec:	601a      	str	r2, [r3, #0]

            /* Configure the endpoint status as DISABLED in two direction */
            _SetEPRxStatus(EpID, EPRX_DISABLED);
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061f6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	b29c      	uxth	r4, r3
 8006208:	7afb      	ldrb	r3, [r7, #11]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006210:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006214:	4622      	mov	r2, r4
 8006216:	601a      	str	r2, [r3, #0]
            _SetEPTxStatus(EpID, EPTX_DISABLED);
 8006218:	7afb      	ldrb	r3, [r7, #11]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006220:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006230:	b29c      	uxth	r4, r3
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800623a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800623e:	4622      	mov	r2, r4
 8006240:	601a      	str	r2, [r3, #0]
        }
    }

    /* Initialize the basic parameters */
    ep->maxpacket = EpMps;
 8006242:	883a      	ldrh	r2, [r7, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]
    ep->is_stall = 0;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]

    /* Initialize the transaction level parameters */
    ep->xfer_buf = 0;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	60da      	str	r2, [r3, #12]
    ep->xfer_len = 0;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	611a      	str	r2, [r3, #16]
    ep->xfer_count = 0;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	615a      	str	r2, [r3, #20]
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bc90      	pop	{r4, r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40005c50 	.word	0x40005c50
 8006270:	20003004 	.word	0x20003004

08006274 <USB_EP_DeInit>:
  *     bit0..bit6: endpoint number which is in (0..7)
  *     bit7: endpoint direction which can be IN(1) or OUT(0)
  * @retval None
  */
void  USB_EP_DeInit (USB_CORE_HANDLE *pudev, uint8_t EpAddr)
{
 8006274:	b490      	push	{r4, r7}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
    USB_EP *ep;
    uint8_t EpID = EpAddr & 0x7F;
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006286:	73fb      	strb	r3, [r7, #15]

    if (EpAddr >> 7)
 8006288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f280 808f 	bge.w	80063b0 <USB_EP_DeInit+0x13c>
    {
        ep = &pudev->dev.in_ep[EpID];
 8006292:	7bfa      	ldrb	r2, [r7, #15]
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	3310      	adds	r3, #16
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]

        _ClearDTG_TX(EpID);
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062ac:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d014      	beq.n	80062e6 <USB_EP_DeInit+0x72>
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062c4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	0092      	lsls	r2, r2, #2
 80062cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80062d0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	b292      	uxth	r2, r2
 80062d8:	4611      	mov	r1, r2
 80062da:	f648 728f 	movw	r2, #36751	; 0x8f8f
 80062de:	400a      	ands	r2, r1
 80062e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e4:	601a      	str	r2, [r3, #0]

        if(ep->is_dblbuf != 0)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04a      	beq.n	8006384 <USB_EP_DeInit+0x110>
        {
            /* Clear the data toggle bits of the endpoint */
            _ClearDTG_RX(EpID);
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062f6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <USB_EP_DeInit+0xbc>
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800630e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	0092      	lsls	r2, r2, #2
 8006316:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800631a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	b292      	uxth	r2, r2
 8006322:	4611      	mov	r1, r2
 8006324:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006328:	400a      	ands	r2, r1
 800632a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800632e:	601a      	str	r2, [r3, #0]

            /* Reset value of the data toggle bits for the endpoint IN */
            _ToggleDTG_TX(EpID);
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006338:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800633c:	7bfa      	ldrb	r2, [r7, #15]
 800633e:	0092      	lsls	r2, r2, #2
 8006340:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006344:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	b292      	uxth	r2, r2
 800634c:	4611      	mov	r1, r2
 800634e:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006352:	400a      	ands	r2, r1
 8006354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006358:	601a      	str	r2, [r3, #0]

            /* Configure the endpoint status as DISABLED */
            _SetEPRxStatus(EpID, EPRX_DISABLED);
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006362:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	b29c      	uxth	r4, r3
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800637c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006380:	4622      	mov	r2, r4
 8006382:	601a      	str	r2, [r3, #0]
        }

        /* Configure the endpoint status as DISABLED */
        _SetEPTxStatus(EpID, EPTX_DISABLED); 
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800638c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800639c:	b29c      	uxth	r4, r3
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063a6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80063aa:	4622      	mov	r2, r4
 80063ac:	601a      	str	r2, [r3, #0]
        }

        /* Configure the endpoint status as DISABLED */
        _SetEPRxStatus(EpID, EPRX_DISABLED);
    }
}
 80063ae:	e08d      	b.n	80064cc <USB_EP_DeInit+0x258>
        /* Configure the endpoint status as DISABLED */
        _SetEPTxStatus(EpID, EPTX_DISABLED); 
    }
    else
    {
        ep = &pudev->dev.out_ep[EpID];
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	3340      	adds	r3, #64	; 0x40
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4413      	add	r3, r2
 80063c0:	60bb      	str	r3, [r7, #8]

        _ClearDTG_RX(EpID);
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063ca:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d014      	beq.n	8006404 <USB_EP_DeInit+0x190>
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063e2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80063ee:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	b292      	uxth	r2, r2
 80063f6:	4611      	mov	r1, r2
 80063f8:	f648 728f 	movw	r2, #36751	; 0x8f8f
 80063fc:	400a      	ands	r2, r1
 80063fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006402:	601a      	str	r2, [r3, #0]

        if(ep->is_dblbuf != 0)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d04a      	beq.n	80064a2 <USB_EP_DeInit+0x22e>
        {
            /* Clear the data toggle bits of the endpoint */
            _ClearDTG_TX(EpID);
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006414:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	d014      	beq.n	800644e <USB_EP_DeInit+0x1da>
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800642c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	0092      	lsls	r2, r2, #2
 8006434:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006438:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	b292      	uxth	r2, r2
 8006440:	4611      	mov	r1, r2
 8006442:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006446:	400a      	ands	r2, r1
 8006448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]

            /* Reset value of the data toggle bits for the endpoint OUT */
            _ToggleDTG_RX(EpID);
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006456:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800645a:	7bfa      	ldrb	r2, [r7, #15]
 800645c:	0092      	lsls	r2, r2, #2
 800645e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006462:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	b292      	uxth	r2, r2
 800646a:	4611      	mov	r1, r2
 800646c:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006470:	400a      	ands	r2, r1
 8006472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006476:	601a      	str	r2, [r3, #0]

            /* Configure the endpoint status as DISABLED */
            _SetEPTxStatus(EpID, EPTX_DISABLED);
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006480:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006490:	b29c      	uxth	r4, r3
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800649a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800649e:	4622      	mov	r2, r4
 80064a0:	601a      	str	r2, [r3, #0]
        }

        /* Configure the endpoint status as DISABLED */
        _SetEPRxStatus(EpID, EPRX_DISABLED);
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064aa:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	b29c      	uxth	r4, r3
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064c4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80064c8:	4622      	mov	r2, r4
 80064ca:	601a      	str	r2, [r3, #0]
    }
}
 80064cc:	bf00      	nop
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc90      	pop	{r4, r7}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <USB_EP_Rx>:
  */
void  USB_EP_Rx (USB_CORE_HANDLE *pudev,
                        uint8_t  EpAddr,
                        uint8_t *pbuf,
                        uint16_t BufLen)
{
 80064d8:	b490      	push	{r4, r7}
 80064da:	b08a      	sub	sp, #40	; 0x28
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	461a      	mov	r2, r3
 80064e4:	460b      	mov	r3, r1
 80064e6:	72fb      	strb	r3, [r7, #11]
 80064e8:	4613      	mov	r3, r2
 80064ea:	813b      	strh	r3, [r7, #8]
    USB_EP *ep;
    uint8_t EpID = EpAddr & 0x7F;
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    ep = &pudev->dev.out_ep[EpID];
 80064f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	3340      	adds	r3, #64	; 0x40
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	623b      	str	r3, [r7, #32]

    /* Configure the transaction level parameters */
    ep->xfer_buf = pbuf;
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	60da      	str	r2, [r3, #12]
    ep->xfer_len = BufLen;
 8006510:	893a      	ldrh	r2, [r7, #8]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	611a      	str	r2, [r3, #16]

    if (ep->is_dblbuf == 0) 
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d137      	bne.n	800658e <USB_EP_Rx+0xb6>
    {
        /* Set receive buffer byte count */
        _SetEPRxCount(EpID, ep->maxpacket);
 800651e:	4b63      	ldr	r3, [pc, #396]	; (80066ac <USB_EP_Rx+0x1d4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	441a      	add	r2, r3
 800652e:	4b60      	ldr	r3, [pc, #384]	; (80066b0 <USB_EP_Rx+0x1d8>)
 8006530:	4413      	add	r3, r2
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b3e      	cmp	r3, #62	; 0x3e
 800653c:	d914      	bls.n	8006568 <USB_EP_Rx+0x90>
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	b29c      	uxth	r4, r3
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <USB_EP_Rx+0x80>
 8006552:	4623      	mov	r3, r4
 8006554:	3b01      	subs	r3, #1
 8006556:	b29c      	uxth	r4, r3
 8006558:	4623      	mov	r3, r4
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	461a      	mov	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e082      	b.n	800666e <USB_EP_Rx+0x196>
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	085b      	lsrs	r3, r3, #1
 800656e:	b29c      	uxth	r4, r3
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <USB_EP_Rx+0xaa>
 800657c:	4623      	mov	r3, r4
 800657e:	3301      	adds	r3, #1
 8006580:	b29c      	uxth	r4, r3
 8006582:	4623      	mov	r3, r4
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	461a      	mov	r2, r3
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	e06f      	b.n	800666e <USB_EP_Rx+0x196>
    }
    else
    {
        /* Set the double buffer receive byte count */
        _SetEPDblBuffCount(EpID, DBUF_EP_OUT, ep->maxpacket);
 800658e:	4b47      	ldr	r3, [pc, #284]	; (80066ac <USB_EP_Rx+0x1d4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	441a      	add	r2, r3
 800659e:	4b45      	ldr	r3, [pc, #276]	; (80066b4 <USB_EP_Rx+0x1dc>)
 80065a0:	4413      	add	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b3e      	cmp	r3, #62	; 0x3e
 80065ac:	d914      	bls.n	80065d8 <USB_EP_Rx+0x100>
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	b29c      	uxth	r4, r3
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <USB_EP_Rx+0xf0>
 80065c2:	4623      	mov	r3, r4
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29c      	uxth	r4, r3
 80065c8:	4623      	mov	r3, r4
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	461a      	mov	r2, r3
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e013      	b.n	8006600 <USB_EP_Rx+0x128>
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	b29c      	uxth	r4, r3
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <USB_EP_Rx+0x11a>
 80065ec:	4623      	mov	r3, r4
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29c      	uxth	r4, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	029b      	lsls	r3, r3, #10
 80065f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fa:	461a      	mov	r2, r3
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	4b2a      	ldr	r3, [pc, #168]	; (80066ac <USB_EP_Rx+0x1d4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	441a      	add	r2, r3
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <USB_EP_Rx+0x1d8>)
 8006612:	4413      	add	r3, r2
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b3e      	cmp	r3, #62	; 0x3e
 800661e:	d914      	bls.n	800664a <USB_EP_Rx+0x172>
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	b29c      	uxth	r4, r3
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <USB_EP_Rx+0x162>
 8006634:	4623      	mov	r3, r4
 8006636:	3b01      	subs	r3, #1
 8006638:	b29c      	uxth	r4, r3
 800663a:	4623      	mov	r3, r4
 800663c:	029b      	lsls	r3, r3, #10
 800663e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006642:	461a      	mov	r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e011      	b.n	800666e <USB_EP_Rx+0x196>
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	b29c      	uxth	r4, r3
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <USB_EP_Rx+0x18c>
 800665e:	4623      	mov	r3, r4
 8006660:	3301      	adds	r3, #1
 8006662:	b29c      	uxth	r4, r3
 8006664:	4623      	mov	r3, r4
 8006666:	029b      	lsls	r3, r3, #10
 8006668:	461a      	mov	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	601a      	str	r2, [r3, #0]
    }

    /* Enable endpoint to receive */
    _SetEPRxStatus(EpID, EPRX_VALID);
 800666e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006678:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	b29c      	uxth	r4, r3
 800668a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006694:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006698:	f484 5240 	eor.w	r2, r4, #12288	; 0x3000
 800669c:	b292      	uxth	r2, r2
 800669e:	601a      	str	r2, [r3, #0]
}
 80066a0:	bf00      	nop
 80066a2:	3728      	adds	r7, #40	; 0x28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc90      	pop	{r4, r7}
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40005c50 	.word	0x40005c50
 80066b0:	20003006 	.word	0x20003006
 80066b4:	20003002 	.word	0x20003002

080066b8 <USB_EP_Tx>:
  */
void  USB_EP_Tx (USB_CORE_HANDLE *pudev,
                        uint8_t  EpAddr,
                        uint8_t *pbuf,
                        uint16_t BufLen)
{
 80066b8:	b590      	push	{r4, r7, lr}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	461a      	mov	r2, r3
 80066c4:	460b      	mov	r3, r1
 80066c6:	72fb      	strb	r3, [r7, #11]
 80066c8:	4613      	mov	r3, r2
 80066ca:	813b      	strh	r3, [r7, #8]
    USB_EP *ep;
    __IO uint32_t len = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
    uint8_t EpID = EpAddr & 0x7F;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d6:	77fb      	strb	r3, [r7, #31]

    ep = &pudev->dev.in_ep[EpID];
 80066d8:	7ffa      	ldrb	r2, [r7, #31]
 80066da:	4613      	mov	r3, r2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	4413      	add	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	3310      	adds	r3, #16
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]

    /* Configure the transaction level parameters */
    ep->xfer_buf = pbuf;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	60da      	str	r2, [r3, #12]
    ep->xfer_len = BufLen;
 80066f0:	893a      	ldrh	r2, [r7, #8]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	611a      	str	r2, [r3, #16]
    ep->xfer_count = 0;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2200      	movs	r2, #0
 80066fa:	615a      	str	r2, [r3, #20]

    /* Transmit length is more than one packet */
    if (ep->xfer_len > ep->maxpacket)
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	d903      	bls.n	8006710 <USB_EP_Tx+0x58>
    {
        len = ep->maxpacket;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	e002      	b.n	8006716 <USB_EP_Tx+0x5e>
    }
    else
    {
        len = ep->xfer_len;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	617b      	str	r3, [r7, #20]
    }

    if (ep->is_dblbuf == 0)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d116      	bne.n	800674c <USB_EP_Tx+0x94>
    {
        UserCopyToBuffer(ep->xfer_buf, ep->bufaddress, len);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	68d8      	ldr	r0, [r3, #12]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	885b      	ldrh	r3, [r3, #2]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	b292      	uxth	r2, r2
 800672a:	4619      	mov	r1, r3
 800672c:	f7ff fa70 	bl	8005c10 <UserCopyToBuffer>
        _SetEPTxCount(EpID, len);
 8006730:	4b33      	ldr	r3, [pc, #204]	; (8006800 <USB_EP_Tx+0x148>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	7ffb      	ldrb	r3, [r7, #31]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	441a      	add	r2, r3
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <USB_EP_Tx+0x14c>)
 8006740:	4413      	add	r3, r2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	461a      	mov	r2, r3
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e03d      	b.n	80067c8 <USB_EP_Tx+0x110>
    }
    else
    {
        /* Set the Double buffer counter */
        _SetEPDblBuffCount(EpID, DBUF_EP_IN, len);
 800674c:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <USB_EP_Tx+0x148>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	441a      	add	r2, r3
 800675a:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <USB_EP_Tx+0x14c>)
 800675c:	4413      	add	r3, r2
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	461a      	mov	r2, r3
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <USB_EP_Tx+0x148>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	7ffb      	ldrb	r3, [r7, #31]
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	441a      	add	r2, r3
 8006774:	4b24      	ldr	r3, [pc, #144]	; (8006808 <USB_EP_Tx+0x150>)
 8006776:	4413      	add	r3, r2
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	461a      	mov	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	6013      	str	r3, [r2, #0]

        /* Copy the data to the double buffered endpoint buffer */
        if (_GetEPxCSR(EpID) & EPTX_DTG)
 8006780:	7ffb      	ldrb	r3, [r7, #31]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006788:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d009      	beq.n	80067ac <USB_EP_Tx+0xf4>
        {
            UserCopyToBuffer(ep->xfer_buf, ep->buf1addr, len);
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	68d8      	ldr	r0, [r3, #12]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	88db      	ldrh	r3, [r3, #6]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	b292      	uxth	r2, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	f7ff fa33 	bl	8005c10 <UserCopyToBuffer>
 80067aa:	e008      	b.n	80067be <USB_EP_Tx+0x106>
        }
        else
        {
            UserCopyToBuffer(ep->xfer_buf, ep->buf0addr, len);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	68d8      	ldr	r0, [r3, #12]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	889b      	ldrh	r3, [r3, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	b292      	uxth	r2, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7ff fa29 	bl	8005c10 <UserCopyToBuffer>
        }

        FreeUserBuffer(EpID, DBUF_EP_IN);
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff f9e6 	bl	8005b94 <FreeUserBuffer>
    }

    /* Enable endpoint to transmit */
    _SetEPTxStatus(EpID, EPTX_VALID);
 80067c8:	7ffb      	ldrb	r3, [r7, #31]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067d0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067e0:	b29c      	uxth	r4, r3
 80067e2:	7ffb      	ldrb	r3, [r7, #31]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067ea:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80067ee:	f084 0230 	eor.w	r2, r4, #48	; 0x30
 80067f2:	b292      	uxth	r2, r2
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3724      	adds	r7, #36	; 0x24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd90      	pop	{r4, r7, pc}
 80067fe:	bf00      	nop
 8006800:	40005c50 	.word	0x40005c50
 8006804:	20003002 	.word	0x20003002
 8006808:	20003006 	.word	0x20003006

0800680c <USB_EP_Stall>:
  *     bit0..bit6: endpoint number which is in (0..7)
  *     bit7: endpoint direction which can be IN(1) or OUT(0)
  * @retval None
  */
void  USB_EP_Stall (USB_CORE_HANDLE *pudev, uint8_t EpAddr)
{
 800680c:	b490      	push	{r4, r7}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
    USB_EP *ep;
    uint8_t EpID = EpAddr & 0x7F;
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	72fb      	strb	r3, [r7, #11]

    if (EpAddr >> 7)
 8006820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006824:	2b00      	cmp	r3, #0
 8006826:	da20      	bge.n	800686a <USB_EP_Stall+0x5e>
    {
        ep = &pudev->dev.in_ep[EpID]; 
 8006828:	7afa      	ldrb	r2, [r7, #11]
 800682a:	4613      	mov	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4413      	add	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	3310      	adds	r3, #16
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	4413      	add	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
        _SetEPTxStatus(EpID, EPTX_STALL);
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006842:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b29b      	uxth	r3, r3
 800684a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800684e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006852:	b29c      	uxth	r4, r3
 8006854:	7afb      	ldrb	r3, [r7, #11]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800685c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006860:	f084 0210 	eor.w	r2, r4, #16
 8006864:	b292      	uxth	r2, r2
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e01f      	b.n	80068aa <USB_EP_Stall+0x9e>
    }
    else
    {
       ep = &pudev->dev.out_ep[EpID];
 800686a:	7afa      	ldrb	r2, [r7, #11]
 800686c:	4613      	mov	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	4413      	add	r3, r2
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	3340      	adds	r3, #64	; 0x40
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
       _SetEPRxStatus(EpID, EPRX_STALL);
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006884:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	b29c      	uxth	r4, r3
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800689e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80068a2:	f484 5280 	eor.w	r2, r4, #4096	; 0x1000
 80068a6:	b292      	uxth	r2, r2
 80068a8:	601a      	str	r2, [r3, #0]
    }

    if (EpID == 0)
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d118      	bne.n	80068e2 <USB_EP_Stall+0xd6>
    {
        /* Control endpoint need to be stalled in two directions */
        _SetEPRxTxStatus(EpID, EPRX_STALL, EPTX_STALL); 
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068b8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	b29c      	uxth	r4, r3
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068d2:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80068d6:	f484 5280 	eor.w	r2, r4, #4096	; 0x1000
 80068da:	f082 0210 	eor.w	r2, r2, #16
 80068de:	b292      	uxth	r2, r2
 80068e0:	601a      	str	r2, [r3, #0]
    }

    /* Endpoint now is stalled */
    ep->is_stall = 1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bc90      	pop	{r4, r7}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop

080068f4 <USB_EP_ClrStall>:
  *     bit0..bit6: endpoint number which is in (0..7)
  *     bit7: endpoint direction which can be IN(1) or OUT(0)
  * @retval None
  */
void  USB_EP_ClrStall (USB_CORE_HANDLE *pudev, uint8_t EpAddr)
{
 80068f4:	b490      	push	{r4, r7}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
    USB_EP *ep;
    uint8_t EpID = EpAddr & 0x7F;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006906:	72fb      	strb	r3, [r7, #11]

    if (EpAddr >> 7)
 8006908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da41      	bge.n	8006994 <USB_EP_ClrStall+0xa0>
    {
        ep = &pudev->dev.in_ep[EpID];
 8006910:	7afa      	ldrb	r2, [r7, #11]
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	3310      	adds	r3, #16
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
        _ClearDTG_TX(EpID);
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800692a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d014      	beq.n	8006964 <USB_EP_ClrStall+0x70>
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006942:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006946:	7afa      	ldrb	r2, [r7, #11]
 8006948:	0092      	lsls	r2, r2, #2
 800694a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800694e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	b292      	uxth	r2, r2
 8006956:	4611      	mov	r1, r2
 8006958:	f648 728f 	movw	r2, #36751	; 0x8f8f
 800695c:	400a      	ands	r2, r1
 800695e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006962:	601a      	str	r2, [r3, #0]
        _SetEPTxStatus(EpID, EPTX_VALID);
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800696c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697c:	b29c      	uxth	r4, r3
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006986:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800698a:	f084 0230 	eor.w	r2, r4, #48	; 0x30
 800698e:	b292      	uxth	r2, r2
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	e040      	b.n	8006a16 <USB_EP_ClrStall+0x122>
    }
    else
    {
        ep = &pudev->dev.out_ep[EpID];
 8006994:	7afa      	ldrb	r2, [r7, #11]
 8006996:	4613      	mov	r3, r2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	4413      	add	r3, r2
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	3340      	adds	r3, #64	; 0x40
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
        _ClearDTG_RX(EpID);
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069ae:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d014      	beq.n	80069e8 <USB_EP_ClrStall+0xf4>
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069c6:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80069ca:	7afa      	ldrb	r2, [r7, #11]
 80069cc:	0092      	lsls	r2, r2, #2
 80069ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80069d2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	b292      	uxth	r2, r2
 80069da:	4611      	mov	r1, r2
 80069dc:	f648 728f 	movw	r2, #36751	; 0x8f8f
 80069e0:	400a      	ands	r2, r1
 80069e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e6:	601a      	str	r2, [r3, #0]
        _SetEPRxStatus(EpID, EPRX_VALID);
 80069e8:	7afb      	ldrb	r3, [r7, #11]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a00:	b29c      	uxth	r4, r3
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a0a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006a0e:	f484 5240 	eor.w	r2, r4, #12288	; 0x3000
 8006a12:	b292      	uxth	r2, r2
 8006a14:	601a      	str	r2, [r3, #0]
    }

    /* Endpoint now is not stalled */
    ep->is_stall = 0;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc90      	pop	{r4, r7}
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop

08006a28 <USB_EP_SetAddress>:
  * @param  pudev: pointer to usb core instance
  * @param  Addr: device address to set
  * @retval None
  */
void  USB_EP_SetAddress (USB_CORE_HANDLE *pudev, uint8_t Addr)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    /* Set endpoints address */
    for (i = 0; i < EP_COUNT; i++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	e017      	b.n	8006a6a <USB_EP_SetAddress+0x42>
    {
        _SetEPAddress(i, i);
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a42:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006a46:	7bfa      	ldrb	r2, [r7, #15]
 8006a48:	0092      	lsls	r2, r2, #2
 8006a4a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006a4e:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	b292      	uxth	r2, r2
 8006a56:	4611      	mov	r1, r2
 8006a58:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	7bf9      	ldrb	r1, [r7, #15]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]
void  USB_EP_SetAddress (USB_CORE_HANDLE *pudev, uint8_t Addr)
{
    uint8_t i;

    /* Set endpoints address */
    for (i = 0; i < EP_COUNT; i++)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	3301      	adds	r3, #1
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d9e4      	bls.n	8006a3a <USB_EP_SetAddress+0x12>
    {
        _SetEPAddress(i, i);
    }

    /* Set device address and enable USB module */
    _SetAR(Addr | AR_USBEN); 
 8006a70:	4a05      	ldr	r2, [pc, #20]	; (8006a88 <USB_EP_SetAddress+0x60>)
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	6013      	str	r3, [r2, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40005c4c 	.word	0x40005c4c

08006a8c <USB_EP_GetStatus>:
  *     bit0..bit6: endpoint number which is in (0..7)
  *     bit7: endpoint direction which can be IN(1) or OUT(0)
  * @retval Endpoint status
  */
uint8_t  USB_EP_GetStatus (USB_CORE_HANDLE *pudev, uint8_t EpAddr)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
    if (EpAddr >> 7)
 8006a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	da0d      	bge.n	8006abc <USB_EP_GetStatus+0x30>
    {
        return _GetEPTxStatus((EpAddr & 0x7F));
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006aac:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	e007      	b.n	8006acc <USB_EP_GetStatus+0x40>
    }
    else
    {
        return _GetEPRxStatus(EpAddr);
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ac4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2300      	movs	r3, #0
    }
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop

08006ad8 <USB_CtlTx>:
  * @retval usb operation status
  */
uint8_t  USB_CtlTx (USB_CORE_HANDLE  *pudev,
                              uint8_t *pbuf,
                              uint16_t Len)
{ 
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
    pudev->dev.device_cur_state = USB_CTRL_DATA_IN;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	709a      	strb	r2, [r3, #2]

    USB_EP_Tx(pudev, EP0_IN, pbuf, Len);
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff fde0 	bl	80066b8 <USB_EP_Tx>

    return USB_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop

08006b04 <USB_CtlContinueTx>:
  * @retval usb operation status
  */
uint8_t  USB_CtlContinueTx (USB_CORE_HANDLE  *pudev,
                                      uint8_t *pbuf,
                                      uint16_t Len)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
    USB_EP_Tx (pudev, EP0_IN, pbuf, Len);
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	2180      	movs	r1, #128	; 0x80
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f7ff fdcd 	bl	80066b8 <USB_EP_Tx>

    return USB_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USB_CtlRx>:
  * @retval usb operation status
  */
uint8_t  USB_CtlRx (USB_CORE_HANDLE  *pudev,
                              uint8_t *pbuf,
                              uint16_t Len)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
    pudev->dev.device_cur_state = USB_CTRL_DATA_OUT;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2203      	movs	r2, #3
 8006b3a:	709a      	strb	r2, [r3, #2]

    USB_EP_Rx(pudev, EP0_OUT, pbuf, Len);
 8006b3c:	88fb      	ldrh	r3, [r7, #6]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	2100      	movs	r1, #0
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f7ff fcc8 	bl	80064d8 <USB_EP_Rx>

    return USB_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop

08006b54 <USB_CtlContinueRx>:
  * @retval usb operation status
  */
uint8_t  USB_CtlContinueRx (USB_CORE_HANDLE  *pudev,
                                      uint8_t *pbuf,
                                      uint16_t Len)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	80fb      	strh	r3, [r7, #6]
    USB_EP_Rx(pudev, EP0_OUT, pbuf, Len);
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	2100      	movs	r1, #0
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff fcb5 	bl	80064d8 <USB_EP_Rx>

    return USB_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <USB_CtlTransmitStatus>:
  * @brief  Transmit status stage on the control pipe
  * @param  pudev: pointer to usb core instance
  * @retval usb operation status
  */
uint8_t  USB_CtlTransmitStatus (USB_CORE_HANDLE *pudev)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    pudev->dev.device_cur_state = USB_CTRL_STATUS_IN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2204      	movs	r2, #4
 8006b84:	709a      	strb	r2, [r3, #2]

    USB_EP_Tx(pudev, EP0_IN, NULL, 0);
 8006b86:	2300      	movs	r3, #0
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fd93 	bl	80066b8 <USB_EP_Tx>

    return USB_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USB_CtlReceiveStatus>:
  * @brief  Receive status stage on the control pipe
  * @param  pudev: pointer to usb core instance
  * @retval usb operation status
  */
uint8_t  USB_CtlReceiveStatus (USB_CORE_HANDLE *pudev)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
    _Set_Status_Out(EP0);
 8006ba4:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <USB_CtlReceiveStatus+0x40>)
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <USB_CtlReceiveStatus+0x40>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	6013      	str	r3, [r2, #0]

    pudev->dev.device_cur_state = USB_CTRL_STATUS_OUT;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2205      	movs	r2, #5
 8006bc2:	709a      	strb	r2, [r3, #2]

    USB_EP_Rx(pudev, EP0_OUT, NULL, 0); 
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fc84 	bl	80064d8 <USB_EP_Rx>

    return USB_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40005c00 	.word	0x40005c00

08006be0 <USB_GetRxCount>:
  * @param  pudev: pointer to usb core instance
  * @param  EpID: endpoint identifier which is in (0..7)
  * @retval Received data length
  */
uint16_t  USB_GetRxCount (USB_CORE_HANDLE *pudev, uint8_t EpID)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	70fb      	strb	r3, [r7, #3]
    return pudev->dev.out_ep[EpID].xfer_count;
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3354      	adds	r3, #84	; 0x54
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop

08006c0c <__aeabi_drsub>:
 8006c0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006c10:	e002      	b.n	8006c18 <__adddf3>
 8006c12:	bf00      	nop

08006c14 <__aeabi_dsub>:
 8006c14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006c18 <__adddf3>:
 8006c18:	b530      	push	{r4, r5, lr}
 8006c1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006c1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006c22:	ea94 0f05 	teq	r4, r5
 8006c26:	bf08      	it	eq
 8006c28:	ea90 0f02 	teqeq	r0, r2
 8006c2c:	bf1f      	itttt	ne
 8006c2e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006c32:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006c36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006c3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006c3e:	f000 80e2 	beq.w	8006e06 <__adddf3+0x1ee>
 8006c42:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006c46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006c4a:	bfb8      	it	lt
 8006c4c:	426d      	neglt	r5, r5
 8006c4e:	dd0c      	ble.n	8006c6a <__adddf3+0x52>
 8006c50:	442c      	add	r4, r5
 8006c52:	ea80 0202 	eor.w	r2, r0, r2
 8006c56:	ea81 0303 	eor.w	r3, r1, r3
 8006c5a:	ea82 0000 	eor.w	r0, r2, r0
 8006c5e:	ea83 0101 	eor.w	r1, r3, r1
 8006c62:	ea80 0202 	eor.w	r2, r0, r2
 8006c66:	ea81 0303 	eor.w	r3, r1, r3
 8006c6a:	2d36      	cmp	r5, #54	; 0x36
 8006c6c:	bf88      	it	hi
 8006c6e:	bd30      	pophi	{r4, r5, pc}
 8006c70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006c74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006c78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006c7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006c80:	d002      	beq.n	8006c88 <__adddf3+0x70>
 8006c82:	4240      	negs	r0, r0
 8006c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006c8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006c90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006c94:	d002      	beq.n	8006c9c <__adddf3+0x84>
 8006c96:	4252      	negs	r2, r2
 8006c98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006c9c:	ea94 0f05 	teq	r4, r5
 8006ca0:	f000 80a7 	beq.w	8006df2 <__adddf3+0x1da>
 8006ca4:	f1a4 0401 	sub.w	r4, r4, #1
 8006ca8:	f1d5 0e20 	rsbs	lr, r5, #32
 8006cac:	db0d      	blt.n	8006cca <__adddf3+0xb2>
 8006cae:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006cb2:	fa22 f205 	lsr.w	r2, r2, r5
 8006cb6:	1880      	adds	r0, r0, r2
 8006cb8:	f141 0100 	adc.w	r1, r1, #0
 8006cbc:	fa03 f20e 	lsl.w	r2, r3, lr
 8006cc0:	1880      	adds	r0, r0, r2
 8006cc2:	fa43 f305 	asr.w	r3, r3, r5
 8006cc6:	4159      	adcs	r1, r3
 8006cc8:	e00e      	b.n	8006ce8 <__adddf3+0xd0>
 8006cca:	f1a5 0520 	sub.w	r5, r5, #32
 8006cce:	f10e 0e20 	add.w	lr, lr, #32
 8006cd2:	2a01      	cmp	r2, #1
 8006cd4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006cd8:	bf28      	it	cs
 8006cda:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006cde:	fa43 f305 	asr.w	r3, r3, r5
 8006ce2:	18c0      	adds	r0, r0, r3
 8006ce4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006ce8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006cec:	d507      	bpl.n	8006cfe <__adddf3+0xe6>
 8006cee:	f04f 0e00 	mov.w	lr, #0
 8006cf2:	f1dc 0c00 	rsbs	ip, ip, #0
 8006cf6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006cfa:	eb6e 0101 	sbc.w	r1, lr, r1
 8006cfe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006d02:	d31b      	bcc.n	8006d3c <__adddf3+0x124>
 8006d04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006d08:	d30c      	bcc.n	8006d24 <__adddf3+0x10c>
 8006d0a:	0849      	lsrs	r1, r1, #1
 8006d0c:	ea5f 0030 	movs.w	r0, r0, rrx
 8006d10:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006d14:	f104 0401 	add.w	r4, r4, #1
 8006d18:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006d1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006d20:	f080 809a 	bcs.w	8006e58 <__adddf3+0x240>
 8006d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006d28:	bf08      	it	eq
 8006d2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006d2e:	f150 0000 	adcs.w	r0, r0, #0
 8006d32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d36:	ea41 0105 	orr.w	r1, r1, r5
 8006d3a:	bd30      	pop	{r4, r5, pc}
 8006d3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006d40:	4140      	adcs	r0, r0
 8006d42:	eb41 0101 	adc.w	r1, r1, r1
 8006d46:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006d4a:	f1a4 0401 	sub.w	r4, r4, #1
 8006d4e:	d1e9      	bne.n	8006d24 <__adddf3+0x10c>
 8006d50:	f091 0f00 	teq	r1, #0
 8006d54:	bf04      	itt	eq
 8006d56:	4601      	moveq	r1, r0
 8006d58:	2000      	moveq	r0, #0
 8006d5a:	fab1 f381 	clz	r3, r1
 8006d5e:	bf08      	it	eq
 8006d60:	3320      	addeq	r3, #32
 8006d62:	f1a3 030b 	sub.w	r3, r3, #11
 8006d66:	f1b3 0220 	subs.w	r2, r3, #32
 8006d6a:	da0c      	bge.n	8006d86 <__adddf3+0x16e>
 8006d6c:	320c      	adds	r2, #12
 8006d6e:	dd08      	ble.n	8006d82 <__adddf3+0x16a>
 8006d70:	f102 0c14 	add.w	ip, r2, #20
 8006d74:	f1c2 020c 	rsb	r2, r2, #12
 8006d78:	fa01 f00c 	lsl.w	r0, r1, ip
 8006d7c:	fa21 f102 	lsr.w	r1, r1, r2
 8006d80:	e00c      	b.n	8006d9c <__adddf3+0x184>
 8006d82:	f102 0214 	add.w	r2, r2, #20
 8006d86:	bfd8      	it	le
 8006d88:	f1c2 0c20 	rsble	ip, r2, #32
 8006d8c:	fa01 f102 	lsl.w	r1, r1, r2
 8006d90:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006d94:	bfdc      	itt	le
 8006d96:	ea41 010c 	orrle.w	r1, r1, ip
 8006d9a:	4090      	lslle	r0, r2
 8006d9c:	1ae4      	subs	r4, r4, r3
 8006d9e:	bfa2      	ittt	ge
 8006da0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006da4:	4329      	orrge	r1, r5
 8006da6:	bd30      	popge	{r4, r5, pc}
 8006da8:	ea6f 0404 	mvn.w	r4, r4
 8006dac:	3c1f      	subs	r4, #31
 8006dae:	da1c      	bge.n	8006dea <__adddf3+0x1d2>
 8006db0:	340c      	adds	r4, #12
 8006db2:	dc0e      	bgt.n	8006dd2 <__adddf3+0x1ba>
 8006db4:	f104 0414 	add.w	r4, r4, #20
 8006db8:	f1c4 0220 	rsb	r2, r4, #32
 8006dbc:	fa20 f004 	lsr.w	r0, r0, r4
 8006dc0:	fa01 f302 	lsl.w	r3, r1, r2
 8006dc4:	ea40 0003 	orr.w	r0, r0, r3
 8006dc8:	fa21 f304 	lsr.w	r3, r1, r4
 8006dcc:	ea45 0103 	orr.w	r1, r5, r3
 8006dd0:	bd30      	pop	{r4, r5, pc}
 8006dd2:	f1c4 040c 	rsb	r4, r4, #12
 8006dd6:	f1c4 0220 	rsb	r2, r4, #32
 8006dda:	fa20 f002 	lsr.w	r0, r0, r2
 8006dde:	fa01 f304 	lsl.w	r3, r1, r4
 8006de2:	ea40 0003 	orr.w	r0, r0, r3
 8006de6:	4629      	mov	r1, r5
 8006de8:	bd30      	pop	{r4, r5, pc}
 8006dea:	fa21 f004 	lsr.w	r0, r1, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	bd30      	pop	{r4, r5, pc}
 8006df2:	f094 0f00 	teq	r4, #0
 8006df6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006dfa:	bf06      	itte	eq
 8006dfc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006e00:	3401      	addeq	r4, #1
 8006e02:	3d01      	subne	r5, #1
 8006e04:	e74e      	b.n	8006ca4 <__adddf3+0x8c>
 8006e06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006e0a:	bf18      	it	ne
 8006e0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006e10:	d029      	beq.n	8006e66 <__adddf3+0x24e>
 8006e12:	ea94 0f05 	teq	r4, r5
 8006e16:	bf08      	it	eq
 8006e18:	ea90 0f02 	teqeq	r0, r2
 8006e1c:	d005      	beq.n	8006e2a <__adddf3+0x212>
 8006e1e:	ea54 0c00 	orrs.w	ip, r4, r0
 8006e22:	bf04      	itt	eq
 8006e24:	4619      	moveq	r1, r3
 8006e26:	4610      	moveq	r0, r2
 8006e28:	bd30      	pop	{r4, r5, pc}
 8006e2a:	ea91 0f03 	teq	r1, r3
 8006e2e:	bf1e      	ittt	ne
 8006e30:	2100      	movne	r1, #0
 8006e32:	2000      	movne	r0, #0
 8006e34:	bd30      	popne	{r4, r5, pc}
 8006e36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006e3a:	d105      	bne.n	8006e48 <__adddf3+0x230>
 8006e3c:	0040      	lsls	r0, r0, #1
 8006e3e:	4149      	adcs	r1, r1
 8006e40:	bf28      	it	cs
 8006e42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006e46:	bd30      	pop	{r4, r5, pc}
 8006e48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006e4c:	bf3c      	itt	cc
 8006e4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006e52:	bd30      	popcc	{r4, r5, pc}
 8006e54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006e58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006e5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e60:	f04f 0000 	mov.w	r0, #0
 8006e64:	bd30      	pop	{r4, r5, pc}
 8006e66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006e6a:	bf1a      	itte	ne
 8006e6c:	4619      	movne	r1, r3
 8006e6e:	4610      	movne	r0, r2
 8006e70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006e74:	bf1c      	itt	ne
 8006e76:	460b      	movne	r3, r1
 8006e78:	4602      	movne	r2, r0
 8006e7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006e7e:	bf06      	itte	eq
 8006e80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006e84:	ea91 0f03 	teqeq	r1, r3
 8006e88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006e8c:	bd30      	pop	{r4, r5, pc}
 8006e8e:	bf00      	nop

08006e90 <__aeabi_ui2d>:
 8006e90:	f090 0f00 	teq	r0, #0
 8006e94:	bf04      	itt	eq
 8006e96:	2100      	moveq	r1, #0
 8006e98:	4770      	bxeq	lr
 8006e9a:	b530      	push	{r4, r5, lr}
 8006e9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006ea0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006ea4:	f04f 0500 	mov.w	r5, #0
 8006ea8:	f04f 0100 	mov.w	r1, #0
 8006eac:	e750      	b.n	8006d50 <__adddf3+0x138>
 8006eae:	bf00      	nop

08006eb0 <__aeabi_i2d>:
 8006eb0:	f090 0f00 	teq	r0, #0
 8006eb4:	bf04      	itt	eq
 8006eb6:	2100      	moveq	r1, #0
 8006eb8:	4770      	bxeq	lr
 8006eba:	b530      	push	{r4, r5, lr}
 8006ebc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006ec0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006ec4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006ec8:	bf48      	it	mi
 8006eca:	4240      	negmi	r0, r0
 8006ecc:	f04f 0100 	mov.w	r1, #0
 8006ed0:	e73e      	b.n	8006d50 <__adddf3+0x138>
 8006ed2:	bf00      	nop

08006ed4 <__aeabi_f2d>:
 8006ed4:	0042      	lsls	r2, r0, #1
 8006ed6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006eda:	ea4f 0131 	mov.w	r1, r1, rrx
 8006ede:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006ee2:	bf1f      	itttt	ne
 8006ee4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006ee8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006eec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006ef0:	4770      	bxne	lr
 8006ef2:	f092 0f00 	teq	r2, #0
 8006ef6:	bf14      	ite	ne
 8006ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006efc:	4770      	bxeq	lr
 8006efe:	b530      	push	{r4, r5, lr}
 8006f00:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006f04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006f08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f0c:	e720      	b.n	8006d50 <__adddf3+0x138>
 8006f0e:	bf00      	nop

08006f10 <__aeabi_ul2d>:
 8006f10:	ea50 0201 	orrs.w	r2, r0, r1
 8006f14:	bf08      	it	eq
 8006f16:	4770      	bxeq	lr
 8006f18:	b530      	push	{r4, r5, lr}
 8006f1a:	f04f 0500 	mov.w	r5, #0
 8006f1e:	e00a      	b.n	8006f36 <__aeabi_l2d+0x16>

08006f20 <__aeabi_l2d>:
 8006f20:	ea50 0201 	orrs.w	r2, r0, r1
 8006f24:	bf08      	it	eq
 8006f26:	4770      	bxeq	lr
 8006f28:	b530      	push	{r4, r5, lr}
 8006f2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006f2e:	d502      	bpl.n	8006f36 <__aeabi_l2d+0x16>
 8006f30:	4240      	negs	r0, r0
 8006f32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006f36:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006f3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006f3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006f42:	f43f aedc 	beq.w	8006cfe <__adddf3+0xe6>
 8006f46:	f04f 0203 	mov.w	r2, #3
 8006f4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006f4e:	bf18      	it	ne
 8006f50:	3203      	addne	r2, #3
 8006f52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006f56:	bf18      	it	ne
 8006f58:	3203      	addne	r2, #3
 8006f5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006f5e:	f1c2 0320 	rsb	r3, r2, #32
 8006f62:	fa00 fc03 	lsl.w	ip, r0, r3
 8006f66:	fa20 f002 	lsr.w	r0, r0, r2
 8006f6a:	fa01 fe03 	lsl.w	lr, r1, r3
 8006f6e:	ea40 000e 	orr.w	r0, r0, lr
 8006f72:	fa21 f102 	lsr.w	r1, r1, r2
 8006f76:	4414      	add	r4, r2
 8006f78:	e6c1      	b.n	8006cfe <__adddf3+0xe6>
 8006f7a:	bf00      	nop

08006f7c <__aeabi_dmul>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f8a:	bf1d      	ittte	ne
 8006f8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f90:	ea94 0f0c 	teqne	r4, ip
 8006f94:	ea95 0f0c 	teqne	r5, ip
 8006f98:	f000 f8de 	bleq	8007158 <__aeabi_dmul+0x1dc>
 8006f9c:	442c      	add	r4, r5
 8006f9e:	ea81 0603 	eor.w	r6, r1, r3
 8006fa2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006fa6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006faa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006fae:	bf18      	it	ne
 8006fb0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006fb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fbc:	d038      	beq.n	8007030 <__aeabi_dmul+0xb4>
 8006fbe:	fba0 ce02 	umull	ip, lr, r0, r2
 8006fc2:	f04f 0500 	mov.w	r5, #0
 8006fc6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006fca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006fce:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006fd2:	f04f 0600 	mov.w	r6, #0
 8006fd6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006fda:	f09c 0f00 	teq	ip, #0
 8006fde:	bf18      	it	ne
 8006fe0:	f04e 0e01 	orrne.w	lr, lr, #1
 8006fe4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006fe8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006fec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006ff0:	d204      	bcs.n	8006ffc <__aeabi_dmul+0x80>
 8006ff2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006ff6:	416d      	adcs	r5, r5
 8006ff8:	eb46 0606 	adc.w	r6, r6, r6
 8006ffc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007000:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007004:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007008:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800700c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007010:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007014:	bf88      	it	hi
 8007016:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800701a:	d81e      	bhi.n	800705a <__aeabi_dmul+0xde>
 800701c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007020:	bf08      	it	eq
 8007022:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007026:	f150 0000 	adcs.w	r0, r0, #0
 800702a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800702e:	bd70      	pop	{r4, r5, r6, pc}
 8007030:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007034:	ea46 0101 	orr.w	r1, r6, r1
 8007038:	ea40 0002 	orr.w	r0, r0, r2
 800703c:	ea81 0103 	eor.w	r1, r1, r3
 8007040:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007044:	bfc2      	ittt	gt
 8007046:	ebd4 050c 	rsbsgt	r5, r4, ip
 800704a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800704e:	bd70      	popgt	{r4, r5, r6, pc}
 8007050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007054:	f04f 0e00 	mov.w	lr, #0
 8007058:	3c01      	subs	r4, #1
 800705a:	f300 80ab 	bgt.w	80071b4 <__aeabi_dmul+0x238>
 800705e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007062:	bfde      	ittt	le
 8007064:	2000      	movle	r0, #0
 8007066:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800706a:	bd70      	pople	{r4, r5, r6, pc}
 800706c:	f1c4 0400 	rsb	r4, r4, #0
 8007070:	3c20      	subs	r4, #32
 8007072:	da35      	bge.n	80070e0 <__aeabi_dmul+0x164>
 8007074:	340c      	adds	r4, #12
 8007076:	dc1b      	bgt.n	80070b0 <__aeabi_dmul+0x134>
 8007078:	f104 0414 	add.w	r4, r4, #20
 800707c:	f1c4 0520 	rsb	r5, r4, #32
 8007080:	fa00 f305 	lsl.w	r3, r0, r5
 8007084:	fa20 f004 	lsr.w	r0, r0, r4
 8007088:	fa01 f205 	lsl.w	r2, r1, r5
 800708c:	ea40 0002 	orr.w	r0, r0, r2
 8007090:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007094:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007098:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800709c:	fa21 f604 	lsr.w	r6, r1, r4
 80070a0:	eb42 0106 	adc.w	r1, r2, r6
 80070a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80070a8:	bf08      	it	eq
 80070aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	f1c4 040c 	rsb	r4, r4, #12
 80070b4:	f1c4 0520 	rsb	r5, r4, #32
 80070b8:	fa00 f304 	lsl.w	r3, r0, r4
 80070bc:	fa20 f005 	lsr.w	r0, r0, r5
 80070c0:	fa01 f204 	lsl.w	r2, r1, r4
 80070c4:	ea40 0002 	orr.w	r0, r0, r2
 80070c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80070cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80070d0:	f141 0100 	adc.w	r1, r1, #0
 80070d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80070d8:	bf08      	it	eq
 80070da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	f1c4 0520 	rsb	r5, r4, #32
 80070e4:	fa00 f205 	lsl.w	r2, r0, r5
 80070e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80070ec:	fa20 f304 	lsr.w	r3, r0, r4
 80070f0:	fa01 f205 	lsl.w	r2, r1, r5
 80070f4:	ea43 0302 	orr.w	r3, r3, r2
 80070f8:	fa21 f004 	lsr.w	r0, r1, r4
 80070fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007100:	fa21 f204 	lsr.w	r2, r1, r4
 8007104:	ea20 0002 	bic.w	r0, r0, r2
 8007108:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800710c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007110:	bf08      	it	eq
 8007112:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f094 0f00 	teq	r4, #0
 800711c:	d10f      	bne.n	800713e <__aeabi_dmul+0x1c2>
 800711e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007122:	0040      	lsls	r0, r0, #1
 8007124:	eb41 0101 	adc.w	r1, r1, r1
 8007128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800712c:	bf08      	it	eq
 800712e:	3c01      	subeq	r4, #1
 8007130:	d0f7      	beq.n	8007122 <__aeabi_dmul+0x1a6>
 8007132:	ea41 0106 	orr.w	r1, r1, r6
 8007136:	f095 0f00 	teq	r5, #0
 800713a:	bf18      	it	ne
 800713c:	4770      	bxne	lr
 800713e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8007142:	0052      	lsls	r2, r2, #1
 8007144:	eb43 0303 	adc.w	r3, r3, r3
 8007148:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800714c:	bf08      	it	eq
 800714e:	3d01      	subeq	r5, #1
 8007150:	d0f7      	beq.n	8007142 <__aeabi_dmul+0x1c6>
 8007152:	ea43 0306 	orr.w	r3, r3, r6
 8007156:	4770      	bx	lr
 8007158:	ea94 0f0c 	teq	r4, ip
 800715c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007160:	bf18      	it	ne
 8007162:	ea95 0f0c 	teqne	r5, ip
 8007166:	d00c      	beq.n	8007182 <__aeabi_dmul+0x206>
 8007168:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800716c:	bf18      	it	ne
 800716e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007172:	d1d1      	bne.n	8007118 <__aeabi_dmul+0x19c>
 8007174:	ea81 0103 	eor.w	r1, r1, r3
 8007178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800717c:	f04f 0000 	mov.w	r0, #0
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007186:	bf06      	itte	eq
 8007188:	4610      	moveq	r0, r2
 800718a:	4619      	moveq	r1, r3
 800718c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007190:	d019      	beq.n	80071c6 <__aeabi_dmul+0x24a>
 8007192:	ea94 0f0c 	teq	r4, ip
 8007196:	d102      	bne.n	800719e <__aeabi_dmul+0x222>
 8007198:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800719c:	d113      	bne.n	80071c6 <__aeabi_dmul+0x24a>
 800719e:	ea95 0f0c 	teq	r5, ip
 80071a2:	d105      	bne.n	80071b0 <__aeabi_dmul+0x234>
 80071a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80071a8:	bf1c      	itt	ne
 80071aa:	4610      	movne	r0, r2
 80071ac:	4619      	movne	r1, r3
 80071ae:	d10a      	bne.n	80071c6 <__aeabi_dmul+0x24a>
 80071b0:	ea81 0103 	eor.w	r1, r1, r3
 80071b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80071b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80071bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071c0:	f04f 0000 	mov.w	r0, #0
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
 80071c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80071ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80071ce:	bd70      	pop	{r4, r5, r6, pc}

080071d0 <__aeabi_ddiv>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80071d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80071da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80071de:	bf1d      	ittte	ne
 80071e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80071e4:	ea94 0f0c 	teqne	r4, ip
 80071e8:	ea95 0f0c 	teqne	r5, ip
 80071ec:	f000 f8a7 	bleq	800733e <__aeabi_ddiv+0x16e>
 80071f0:	eba4 0405 	sub.w	r4, r4, r5
 80071f4:	ea81 0e03 	eor.w	lr, r1, r3
 80071f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80071fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007200:	f000 8088 	beq.w	8007314 <__aeabi_ddiv+0x144>
 8007204:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007208:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800720c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007210:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007214:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007218:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800721c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007220:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007224:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007228:	429d      	cmp	r5, r3
 800722a:	bf08      	it	eq
 800722c:	4296      	cmpeq	r6, r2
 800722e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007232:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007236:	d202      	bcs.n	800723e <__aeabi_ddiv+0x6e>
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	ea4f 0232 	mov.w	r2, r2, rrx
 800723e:	1ab6      	subs	r6, r6, r2
 8007240:	eb65 0503 	sbc.w	r5, r5, r3
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	ea4f 0232 	mov.w	r2, r2, rrx
 800724a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800724e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8007252:	ebb6 0e02 	subs.w	lr, r6, r2
 8007256:	eb75 0e03 	sbcs.w	lr, r5, r3
 800725a:	bf22      	ittt	cs
 800725c:	1ab6      	subcs	r6, r6, r2
 800725e:	4675      	movcs	r5, lr
 8007260:	ea40 000c 	orrcs.w	r0, r0, ip
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	ea4f 0232 	mov.w	r2, r2, rrx
 800726a:	ebb6 0e02 	subs.w	lr, r6, r2
 800726e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007272:	bf22      	ittt	cs
 8007274:	1ab6      	subcs	r6, r6, r2
 8007276:	4675      	movcs	r5, lr
 8007278:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800727c:	085b      	lsrs	r3, r3, #1
 800727e:	ea4f 0232 	mov.w	r2, r2, rrx
 8007282:	ebb6 0e02 	subs.w	lr, r6, r2
 8007286:	eb75 0e03 	sbcs.w	lr, r5, r3
 800728a:	bf22      	ittt	cs
 800728c:	1ab6      	subcs	r6, r6, r2
 800728e:	4675      	movcs	r5, lr
 8007290:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	ea4f 0232 	mov.w	r2, r2, rrx
 800729a:	ebb6 0e02 	subs.w	lr, r6, r2
 800729e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80072a2:	bf22      	ittt	cs
 80072a4:	1ab6      	subcs	r6, r6, r2
 80072a6:	4675      	movcs	r5, lr
 80072a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80072ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80072b0:	d018      	beq.n	80072e4 <__aeabi_ddiv+0x114>
 80072b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80072b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80072ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80072be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80072c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80072c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80072ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80072ce:	d1c0      	bne.n	8007252 <__aeabi_ddiv+0x82>
 80072d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072d4:	d10b      	bne.n	80072ee <__aeabi_ddiv+0x11e>
 80072d6:	ea41 0100 	orr.w	r1, r1, r0
 80072da:	f04f 0000 	mov.w	r0, #0
 80072de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80072e2:	e7b6      	b.n	8007252 <__aeabi_ddiv+0x82>
 80072e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072e8:	bf04      	itt	eq
 80072ea:	4301      	orreq	r1, r0
 80072ec:	2000      	moveq	r0, #0
 80072ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80072f2:	bf88      	it	hi
 80072f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80072f8:	f63f aeaf 	bhi.w	800705a <__aeabi_dmul+0xde>
 80072fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8007300:	bf04      	itt	eq
 8007302:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800730a:	f150 0000 	adcs.w	r0, r0, #0
 800730e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007318:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800731c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007320:	bfc2      	ittt	gt
 8007322:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007326:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800732a:	bd70      	popgt	{r4, r5, r6, pc}
 800732c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007330:	f04f 0e00 	mov.w	lr, #0
 8007334:	3c01      	subs	r4, #1
 8007336:	e690      	b.n	800705a <__aeabi_dmul+0xde>
 8007338:	ea45 0e06 	orr.w	lr, r5, r6
 800733c:	e68d      	b.n	800705a <__aeabi_dmul+0xde>
 800733e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8007342:	ea94 0f0c 	teq	r4, ip
 8007346:	bf08      	it	eq
 8007348:	ea95 0f0c 	teqeq	r5, ip
 800734c:	f43f af3b 	beq.w	80071c6 <__aeabi_dmul+0x24a>
 8007350:	ea94 0f0c 	teq	r4, ip
 8007354:	d10a      	bne.n	800736c <__aeabi_ddiv+0x19c>
 8007356:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800735a:	f47f af34 	bne.w	80071c6 <__aeabi_dmul+0x24a>
 800735e:	ea95 0f0c 	teq	r5, ip
 8007362:	f47f af25 	bne.w	80071b0 <__aeabi_dmul+0x234>
 8007366:	4610      	mov	r0, r2
 8007368:	4619      	mov	r1, r3
 800736a:	e72c      	b.n	80071c6 <__aeabi_dmul+0x24a>
 800736c:	ea95 0f0c 	teq	r5, ip
 8007370:	d106      	bne.n	8007380 <__aeabi_ddiv+0x1b0>
 8007372:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007376:	f43f aefd 	beq.w	8007174 <__aeabi_dmul+0x1f8>
 800737a:	4610      	mov	r0, r2
 800737c:	4619      	mov	r1, r3
 800737e:	e722      	b.n	80071c6 <__aeabi_dmul+0x24a>
 8007380:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007384:	bf18      	it	ne
 8007386:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800738a:	f47f aec5 	bne.w	8007118 <__aeabi_dmul+0x19c>
 800738e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8007392:	f47f af0d 	bne.w	80071b0 <__aeabi_dmul+0x234>
 8007396:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800739a:	f47f aeeb 	bne.w	8007174 <__aeabi_dmul+0x1f8>
 800739e:	e712      	b.n	80071c6 <__aeabi_dmul+0x24a>

080073a0 <__aeabi_d2iz>:
 80073a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80073a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80073a8:	d215      	bcs.n	80073d6 <__aeabi_d2iz+0x36>
 80073aa:	d511      	bpl.n	80073d0 <__aeabi_d2iz+0x30>
 80073ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80073b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80073b4:	d912      	bls.n	80073dc <__aeabi_d2iz+0x3c>
 80073b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80073ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80073c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80073c6:	fa23 f002 	lsr.w	r0, r3, r2
 80073ca:	bf18      	it	ne
 80073cc:	4240      	negne	r0, r0
 80073ce:	4770      	bx	lr
 80073d0:	f04f 0000 	mov.w	r0, #0
 80073d4:	4770      	bx	lr
 80073d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80073da:	d105      	bne.n	80073e8 <__aeabi_d2iz+0x48>
 80073dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80073e0:	bf08      	it	eq
 80073e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80073e6:	4770      	bx	lr
 80073e8:	f04f 0000 	mov.w	r0, #0
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
